
FinalProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082d0  080082d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d8  080082d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d8  080082d8  000182d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082dc  080082dc  000182dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080082e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000074  08008354  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08008354  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017be7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003196  00000000  00000000  00037c8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003c2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000316f  00000000  00000000  0003d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c62  00000000  00000000  000407bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e4e  00000000  00000000  00057421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c60  00000000  00000000  000ef2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800814c 	.word	0x0800814c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800814c 	.word	0x0800814c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]

}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <delay>:




void delay(uint16_t Delay){ // will delay = Delay * 1 micro second (Delay should not exceed 2^16 - 1)
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim3,0);  // set the counter value a 0
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <delay+0x30>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
    while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) < Delay);// wait for the counter to reach the us input in the parameter
 8000de6:	bf00      	nop
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <delay+0x30>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	88fa      	ldrh	r2, [r7, #6]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d8f8      	bhi.n	8000de8 <delay+0x14>
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200000d8 	.word	0x200000d8

08000e08 <Set_Pin_Output>:
uint16_t RH, TEMP;

float Temp = 0,Humi = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f001 fa4a 	bl	80022d0 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f001 fa2c 	bl	80022d0 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DHT22_Start>:

void DHT22_Start (void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8000e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e88:	4811      	ldr	r0, [pc, #68]	; (8000ed0 <DHT22_Start+0x50>)
 8000e8a:	f7ff ffbd 	bl	8000e08 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e94:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <DHT22_Start+0x50>)
 8000e96:	f001 fbb7 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_Delay(1200);   // wait for > 1ms
 8000e9a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e9e:	f001 f84f 	bl	8001f40 <HAL_Delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <DHT22_Start+0x50>)
 8000eaa:	f001 fbad 	bl	8002608 <HAL_GPIO_WritePin>
	delay (20);   // wait for 30us
 8000eae:	2014      	movs	r0, #20
 8000eb0:	f7ff ff90 	bl	8000dd4 <delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin high
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <DHT22_Start+0x50>)
 8000ebc:	f001 fba4 	bl	8002608 <HAL_GPIO_WritePin>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000ec0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DHT22_Start+0x50>)
 8000ec6:	f7ff ffbd 	bl	8000e44 <Set_Pin_Input>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40020400 	.word	0x40020400

08000ed4 <DHT22_Check_Response>:
uint8_t DHT22_Check_Response (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	4817      	ldr	r0, [pc, #92]	; (8000f3c <DHT22_Check_Response+0x68>)
 8000ee0:	f7ff ffb0 	bl	8000e44 <Set_Pin_Input>
	uint8_t Response = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	71fb      	strb	r3, [r7, #7]
	delay (40);  // wait for 40us
 8000ee8:	2028      	movs	r0, #40	; 0x28
 8000eea:	f7ff ff73 	bl	8000dd4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 8000eee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <DHT22_Check_Response+0x68>)
 8000ef4:	f001 fb70 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10f      	bne.n	8000f1e <DHT22_Check_Response+0x4a>
	{
		delay (80);   // wait for 80us
 8000efe:	2050      	movs	r0, #80	; 0x50
 8000f00:	f7ff ff68 	bl	8000dd4 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 8000f04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <DHT22_Check_Response+0x68>)
 8000f0a:	f001 fb65 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <DHT22_Check_Response+0x46>
 8000f14:	2301      	movs	r3, #1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	e001      	b.n	8000f1e <DHT22_Check_Response+0x4a>
		else Response = -1;
 8000f1a:	23ff      	movs	r3, #255	; 0xff
 8000f1c:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));// wait for the pin to go low
 8000f1e:	bf00      	nop
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <DHT22_Check_Response+0x68>)
 8000f26:	f001 fb57 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f7      	bne.n	8000f20 <DHT22_Check_Response+0x4c>
	return Response;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020400 	.word	0x40020400

08000f40 <DHT22_Read>:
uint8_t DHT22_Read (void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	uint8_t i=0,j;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]
	for (j=0;j<8;j++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	e03f      	b.n	8000fd0 <DHT22_Read+0x90>
	{
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
			delay(1); // wait for the pin to go high
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff ff3f 	bl	8000dd4 <delay>
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8000f56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5a:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <DHT22_Read+0xa0>)
 8000f5c:	f001 fb3c 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f4      	beq.n	8000f50 <DHT22_Read+0x10>
		}
		delay (40);   // wait for 40 us
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f7ff ff34 	bl	8000dd4 <delay>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8000f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f70:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <DHT22_Read+0xa0>)
 8000f72:	f001 fb31 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10e      	bne.n	8000f9a <DHT22_Read+0x5a>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	4013      	ands	r3, r2
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	e00f      	b.n	8000fba <DHT22_Read+0x7a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f9a:	79bb      	ldrb	r3, [r7, #6]
 8000f9c:	f1c3 0307 	rsb	r3, r3, #7
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8000fb2:	e002      	b.n	8000fba <DHT22_Read+0x7a>
			delay(1);  // wait for the pin to go low
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ff0d 	bl	8000dd4 <delay>
		while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))){
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <DHT22_Read+0xa0>)
 8000fc0:	f001 fb0a 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f4      	bne.n	8000fb4 <DHT22_Read+0x74>
	for (j=0;j<8;j++)
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	71bb      	strb	r3, [r7, #6]
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	d9bf      	bls.n	8000f56 <DHT22_Read+0x16>
		}
	}

	return i;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 ff38 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f84a 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f000 f9fc 	bl	80013ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 f9a6 	bl	8001344 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ff8:	f000 f8ac 	bl	8001154 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ffc:	f000 f92c 	bl	8001258 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001000:	f000 f976 	bl	80012f0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001004:	f000 f9c8 	bl	8001398 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001008:	f003 feae 	bl	8004d68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <main+0x70>)
 800100e:	2100      	movs	r1, #0
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <main+0x74>)
 8001012:	f003 fef3 	bl	8004dfc <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <main+0x78>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <main+0x7c>)
 800101e:	2100      	movs	r1, #0
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0x80>)
 8001022:	f003 feeb 	bl	8004dfc <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <main+0x84>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <main+0x88>)
 800102e:	2100      	movs	r1, #0
 8001030:	480f      	ldr	r0, [pc, #60]	; (8001070 <main+0x8c>)
 8001032:	f003 fee3 	bl	8004dfc <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <main+0x90>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 800103c:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <main+0x94>)
 800103e:	2100      	movs	r1, #0
 8001040:	480e      	ldr	r0, [pc, #56]	; (800107c <main+0x98>)
 8001042:	f003 fedb 	bl	8004dfc <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <main+0x9c>)
 800104a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800104c:	f003 feb0 	bl	8004db0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x6c>
 8001052:	bf00      	nop
 8001054:	080081f4 	.word	0x080081f4
 8001058:	08001501 	.word	0x08001501
 800105c:	200001ec 	.word	0x200001ec
 8001060:	08008218 	.word	0x08008218
 8001064:	08001511 	.word	0x08001511
 8001068:	200001f0 	.word	0x200001f0
 800106c:	0800823c 	.word	0x0800823c
 8001070:	08001765 	.word	0x08001765
 8001074:	200001f4 	.word	0x200001f4
 8001078:	08008260 	.word	0x08008260
 800107c:	080017b5 	.word	0x080017b5
 8001080:	200001f8 	.word	0x200001f8

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f006 fbf2 	bl	800787c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xc8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <SystemClock_Config+0xc8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <SystemClock_Config+0xcc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <SystemClock_Config+0xcc>)
 80010ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010f4:	2308      	movs	r3, #8
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80010f8:	2332      	movs	r3, #50	; 0x32
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f001 fa97 	bl	800263c <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 fc86 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fcf9 	bl	8002b2c <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001140:	f000 fc70 	bl	8001a24 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b092      	sub	sp, #72	; 0x48
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2220      	movs	r2, #32
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f006 fb7c 	bl	800787c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001186:	4a33      	ldr	r2, [pc, #204]	; (8001254 <MX_TIM1_Init+0x100>)
 8001188:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 800118a:	4b31      	ldr	r3, [pc, #196]	; (8001250 <MX_TIM1_Init+0xfc>)
 800118c:	2231      	movs	r2, #49	; 0x31
 800118e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001198:	2263      	movs	r2, #99	; 0x63
 800119a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_TIM1_Init+0xfc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_TIM1_Init+0xfc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MX_TIM1_Init+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011ae:	4828      	ldr	r0, [pc, #160]	; (8001250 <MX_TIM1_Init+0xfc>)
 80011b0:	f001 ff86 	bl	80030c0 <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 fc33 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ca:	4619      	mov	r1, r3
 80011cc:	4820      	ldr	r0, [pc, #128]	; (8001250 <MX_TIM1_Init+0xfc>)
 80011ce:	f002 fccd 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80011d8:	f000 fc24 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	; 0x60
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	2200      	movs	r2, #0
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001202:	f002 f85d 	bl	80032c0 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800120c:	f000 fc0a 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001234:	f002 fd08 	bl	8003c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800123e:	f000 fbf1 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM1_Init+0xfc>)
 8001244:	f000 fc64 	bl	8001b10 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3748      	adds	r7, #72	; 0x48
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000090 	.word	0x20000090
 8001254:	40010000 	.word	0x40010000

08001258 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_TIM3_Init+0x90>)
 8001276:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <MX_TIM3_Init+0x94>)
 8001278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_TIM3_Init+0x90>)
 800127c:	2231      	movs	r2, #49	; 0x31
 800127e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM3_Init+0x90>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_TIM3_Init+0x90>)
 8001288:	2263      	movs	r2, #99	; 0x63
 800128a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <MX_TIM3_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_TIM3_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <MX_TIM3_Init+0x90>)
 800129a:	f001 fe67 	bl	8002f6c <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80012a4:	f000 fbbe 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_TIM3_Init+0x90>)
 80012b6:	f002 f8c5 	bl	8003444 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80012c0:	f000 fbb0 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_TIM3_Init+0x90>)
 80012d2:	f002 fc4b 	bl	8003b6c <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80012dc:	f000 fba2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000d8 	.word	0x200000d8
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART1_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART1_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART1_UART_Init+0x4c>)
 8001328:	f002 fce0 	bl	8003cec <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 fb77 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000120 	.word	0x20000120
 8001340:	40011000 	.word	0x40011000

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f002 fcb6 	bl	8003cec <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 fb4d 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000164 	.word	0x20000164
 8001394:	40004400 	.word	0x40004400

08001398 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_USART6_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART6_UART_Init+0x4c>)
 80013d0:	f002 fc8c 	bl	8003cec <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f000 fb23 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001a8 	.word	0x200001a8
 80013e8:	40011400 	.word	0x40011400

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <MX_GPIO_Init+0x104>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <MX_GPIO_Init+0x104>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_GPIO_Init+0x104>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001460:	f043 0302 	orr.w	r3, r3, #2
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <MX_GPIO_Init+0x104>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2120      	movs	r1, #32
 8001476:	481f      	ldr	r0, [pc, #124]	; (80014f4 <MX_GPIO_Init+0x108>)
 8001478:	f001 f8c6 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800147c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001482:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4819      	ldr	r0, [pc, #100]	; (80014f8 <MX_GPIO_Init+0x10c>)
 8001494:	f000 ff1c 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001498:	2320      	movs	r3, #32
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_GPIO_Init+0x108>)
 80014b0:	f000 ff0e 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014b4:	2320      	movs	r3, #32
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_GPIO_Init+0x110>)
 80014c8:	f000 ff02 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80014cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_GPIO_Init+0x110>)
 80014e2:	f000 fef5 	bl	80022d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020400 	.word	0x40020400

08001500 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

		  HAL_UART_Transmit_IT(&huart1, &arr, 10);
	  }*/


    osDelay(1);
 8001508:	2001      	movs	r0, #1
 800150a:	f003 fd09 	bl	8004f20 <osDelay>
 800150e:	e7fb      	b.n	8001508 <StartDefaultTask+0x8>

08001510 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	HAL_TIM_Base_Start(&htim3);
 8001518:	487d      	ldr	r0, [pc, #500]	; (8001710 <StartTask02+0x200>)
 800151a:	f001 fd77 	bl	800300c <HAL_TIM_Base_Start>
			uint8_t T[3],H[3],Check;
			uint16_t Tsum, Hsum;
  /* Infinite loop */
  for(;;)
  {
	  isTemp = 1;
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <StartTask02+0x204>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
	 // taskENTER_CRITICAL();
	  	  HAL_UART_Transmit(&huart2, "Do\r\n", 4, 10);
 8001524:	230a      	movs	r3, #10
 8001526:	2204      	movs	r2, #4
 8001528:	497b      	ldr	r1, [pc, #492]	; (8001718 <StartTask02+0x208>)
 800152a:	487c      	ldr	r0, [pc, #496]	; (800171c <StartTask02+0x20c>)
 800152c:	f002 fc2b 	bl	8003d86 <HAL_UART_Transmit>
	  	  DHT22_Start();
 8001530:	f7ff fca6 	bl	8000e80 <DHT22_Start>
	  	  Presence = DHT22_Check_Response();
 8001534:	f7ff fcce 	bl	8000ed4 <DHT22_Check_Response>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <StartTask02+0x210>)
 800153e:	701a      	strb	r2, [r3, #0]
	  	  Rh_byte1 = DHT22_Read();
 8001540:	f7ff fcfe 	bl	8000f40 <DHT22_Read>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b76      	ldr	r3, [pc, #472]	; (8001724 <StartTask02+0x214>)
 800154a:	701a      	strb	r2, [r3, #0]
	  	  Rh_byte2 = DHT22_Read();
 800154c:	f7ff fcf8 	bl	8000f40 <DHT22_Read>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <StartTask02+0x218>)
 8001556:	701a      	strb	r2, [r3, #0]

	  	  Temp_byte1 = DHT22_Read();
 8001558:	f7ff fcf2 	bl	8000f40 <DHT22_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b72      	ldr	r3, [pc, #456]	; (800172c <StartTask02+0x21c>)
 8001562:	701a      	strb	r2, [r3, #0]
	  	  Temp_byte2 = DHT22_Read();
 8001564:	f7ff fcec 	bl	8000f40 <DHT22_Read>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <StartTask02+0x220>)
 800156e:	701a      	strb	r2, [r3, #0]

	  	  SUM = DHT22_Read();
 8001570:	f7ff fce6 	bl	8000f40 <DHT22_Read>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <StartTask02+0x224>)
 800157a:	701a      	strb	r2, [r3, #0]
	  	  Check = Rh_byte1 + Rh_byte2 + Temp_byte1 + Temp_byte2;
 800157c:	4b69      	ldr	r3, [pc, #420]	; (8001724 <StartTask02+0x214>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <StartTask02+0x218>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4413      	add	r3, r2
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <StartTask02+0x21c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b67      	ldr	r3, [pc, #412]	; (8001730 <StartTask02+0x220>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	757b      	strb	r3, [r7, #21]
	  	  //HAL_UART_Transmit(&huart2, SUM, sizeof(SUM), HAL_MAX_DELAY);

	  	TEMP = ((Temp_byte1<<8)|Temp_byte2)&32767;
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <StartTask02+0x21c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b21a      	sxth	r2, r3
 80015a0:	4b63      	ldr	r3, [pc, #396]	; (8001730 <StartTask02+0x220>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b61      	ldr	r3, [pc, #388]	; (8001738 <StartTask02+0x228>)
 80015b4:	801a      	strh	r2, [r3, #0]
	  	//RH = ((Rh_byte1<<8)|Rh_byte2)&32767;

	  	  Temp = (float)(TEMP/10.0);
 80015b6:	4b60      	ldr	r3, [pc, #384]	; (8001738 <StartTask02+0x228>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ffb2 	bl	8000524 <__aeabi_i2d>
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b5d      	ldr	r3, [pc, #372]	; (800173c <StartTask02+0x22c>)
 80015c6:	f7ff f941 	bl	800084c <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fa23 	bl	8000a1c <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <StartTask02+0x230>)
 80015da:	6013      	str	r3, [r2, #0]
	  		 	/*HAL_UART_Transmit(&huart2, "Humid: ", 7, HAL_MAX_DELAY);
	  		 	HAL_UART_Transmit(&huart2, H, 3, 10);*/

	  		 	//HAL_UART_Transmit(&huart2, "\r\n", 2, 10);

	  		 		 	  if(Check == SUM){
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <StartTask02+0x224>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	7d7a      	ldrb	r2, [r7, #21]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	f040 8083 	bne.w	80016ee <StartTask02+0x1de>
	  		 		 		  if(Temp_byte1>127) {Tsum = (float)Temp_byte2/10*(-1);}
 80015e8:	4b50      	ldr	r3, [pc, #320]	; (800172c <StartTask02+0x21c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da11      	bge.n	8001616 <StartTask02+0x106>
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <StartTask02+0x220>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001602:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001606:	eef1 7a67 	vneg.f32	s15, s15
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	82fb      	strh	r3, [r7, #22]
 8001614:	e012      	b.n	800163c <StartTask02+0x12c>
	  		 		 		  else {Tsum = (float)((Temp_byte1<<8) | Temp_byte2)/10;}
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <StartTask02+0x21c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4a44      	ldr	r2, [pc, #272]	; (8001730 <StartTask02+0x220>)
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800162e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001636:	ee17 3a90 	vmov	r3, s15
 800163a:	82fb      	strh	r3, [r7, #22]


	  		 		 		T[0] = '0' + Tsum/100;
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	4a41      	ldr	r2, [pc, #260]	; (8001744 <StartTask02+0x234>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	095b      	lsrs	r3, r3, #5
 8001646:	b29b      	uxth	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	b2db      	uxtb	r3, r3
 800164e:	743b      	strb	r3, [r7, #16]
	  		 		 		T[1] = '0' + (Tsum%100)/10;
 8001650:	8afb      	ldrh	r3, [r7, #22]
 8001652:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <StartTask02+0x234>)
 8001654:	fba2 1203 	umull	r1, r2, r2, r3
 8001658:	0952      	lsrs	r2, r2, #5
 800165a:	2164      	movs	r1, #100	; 0x64
 800165c:	fb01 f202 	mul.w	r2, r1, r2
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <StartTask02+0x238>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3330      	adds	r3, #48	; 0x30
 8001672:	b2db      	uxtb	r3, r3
 8001674:	747b      	strb	r3, [r7, #17]
	  		 		 		T[2] = '0' + (Tsum%10);
 8001676:	8afa      	ldrh	r2, [r7, #22]
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <StartTask02+0x238>)
 800167a:	fba3 1302 	umull	r1, r3, r3, r2
 800167e:	08d9      	lsrs	r1, r3, #3
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	3330      	adds	r3, #48	; 0x30
 8001690:	b2db      	uxtb	r3, r3
 8001692:	74bb      	strb	r3, [r7, #18]

	  		 		 	// HUART 1-----------------

	  		 		 		//isTempTran = 0;
							HAL_UART_Transmit(&huart1, T, 3, HAL_MAX_DELAY);
 8001694:	f107 0110 	add.w	r1, r7, #16
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	2203      	movs	r2, #3
 800169e:	482b      	ldr	r0, [pc, #172]	; (800174c <StartTask02+0x23c>)
 80016a0:	f002 fb71 	bl	8003d86 <HAL_UART_Transmit>
							HAL_UART_Transmit(&huart1, "\r\n", 2, HAL_MAX_DELAY);
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	2202      	movs	r2, #2
 80016aa:	4929      	ldr	r1, [pc, #164]	; (8001750 <StartTask02+0x240>)
 80016ac:	4827      	ldr	r0, [pc, #156]	; (800174c <StartTask02+0x23c>)
 80016ae:	f002 fb6a 	bl	8003d86 <HAL_UART_Transmit>
							//isTempTran = 1;


							HAL_UART_Transmit(&huart2, "Temp: ", 6, HAL_MAX_DELAY);
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	2206      	movs	r2, #6
 80016b8:	4926      	ldr	r1, [pc, #152]	; (8001754 <StartTask02+0x244>)
 80016ba:	4818      	ldr	r0, [pc, #96]	; (800171c <StartTask02+0x20c>)
 80016bc:	f002 fb63 	bl	8003d86 <HAL_UART_Transmit>
	  		 		 		HAL_UART_Transmit(&huart2, T, 3, 10);
 80016c0:	f107 0110 	add.w	r1, r7, #16
 80016c4:	230a      	movs	r3, #10
 80016c6:	2203      	movs	r2, #3
 80016c8:	4814      	ldr	r0, [pc, #80]	; (800171c <StartTask02+0x20c>)
 80016ca:	f002 fb5c 	bl	8003d86 <HAL_UART_Transmit>



	  		 		 		HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80016ce:	230a      	movs	r3, #10
 80016d0:	2202      	movs	r2, #2
 80016d2:	491f      	ldr	r1, [pc, #124]	; (8001750 <StartTask02+0x240>)
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <StartTask02+0x20c>)
 80016d6:	f002 fb56 	bl	8003d86 <HAL_UART_Transmit>


	  		 		 		  HAL_UART_Transmit(&huart2, "Good\r\n", 6, 10);
 80016da:	230a      	movs	r3, #10
 80016dc:	2206      	movs	r2, #6
 80016de:	491e      	ldr	r1, [pc, #120]	; (8001758 <StartTask02+0x248>)
 80016e0:	480e      	ldr	r0, [pc, #56]	; (800171c <StartTask02+0x20c>)
 80016e2:	f002 fb50 	bl	8003d86 <HAL_UART_Transmit>

	  		 		 		  mainTemp = Tsum;
 80016e6:	8afb      	ldrh	r3, [r7, #22]
 80016e8:	4a1c      	ldr	r2, [pc, #112]	; (800175c <StartTask02+0x24c>)
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e005      	b.n	80016fa <StartTask02+0x1ea>

	  		 		 		  //	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,sensorState);

	  		 		 		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
	  		 		 	  }else{
	  		 		 		  HAL_UART_Transmit(&huart2, "Bad\r\n", 5, 10);
 80016ee:	230a      	movs	r3, #10
 80016f0:	2205      	movs	r2, #5
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <StartTask02+0x250>)
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <StartTask02+0x20c>)
 80016f6:	f002 fb46 	bl	8003d86 <HAL_UART_Transmit>
	  		 		 	  }
	  		  		 	HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80016fa:	230a      	movs	r3, #10
 80016fc:	2202      	movs	r2, #2
 80016fe:	4914      	ldr	r1, [pc, #80]	; (8001750 <StartTask02+0x240>)
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <StartTask02+0x20c>)
 8001702:	f002 fb40 	bl	8003d86 <HAL_UART_Transmit>


	  		  		  osDelay(500);
 8001706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800170a:	f003 fc09 	bl	8004f20 <osDelay>
	  isTemp = 1;
 800170e:	e706      	b.n	800151e <StartTask02+0xe>
 8001710:	200000d8 	.word	0x200000d8
 8001714:	20000214 	.word	0x20000214
 8001718:	08008194 	.word	0x08008194
 800171c:	20000164 	.word	0x20000164
 8001720:	20000208 	.word	0x20000208
 8001724:	200001fc 	.word	0x200001fc
 8001728:	200001fd 	.word	0x200001fd
 800172c:	200001fe 	.word	0x200001fe
 8001730:	200001ff 	.word	0x200001ff
 8001734:	20000200 	.word	0x20000200
 8001738:	20000202 	.word	0x20000202
 800173c:	40240000 	.word	0x40240000
 8001740:	20000204 	.word	0x20000204
 8001744:	51eb851f 	.word	0x51eb851f
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	20000120 	.word	0x20000120
 8001750:	0800819c 	.word	0x0800819c
 8001754:	080081a0 	.word	0x080081a0
 8001758:	080081a8 	.word	0x080081a8
 800175c:	2000020c 	.word	0x2000020c
 8001760:	080081b0 	.word	0x080081b0

08001764 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  isFloat = 1;
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <StartTask03+0x40>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart2, "3\r\n", 3, 10);
	  uint8_t sensorState = HAL_GPIO_ReadPin(WF_PORT, WF_PIN);
 8001772:	2120      	movs	r1, #32
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <StartTask03+0x44>)
 8001776:	f000 ff2f 	bl	80025d8 <HAL_GPIO_ReadPin>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,sensorState);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	461a      	mov	r2, r3
 8001782:	2120      	movs	r1, #32
 8001784:	4809      	ldr	r0, [pc, #36]	; (80017ac <StartTask03+0x48>)
 8001786:	f000 ff3f 	bl	8002608 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,sensorState);
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	461a      	mov	r2, r3
 800178e:	2101      	movs	r1, #1
 8001790:	4806      	ldr	r0, [pc, #24]	; (80017ac <StartTask03+0x48>)
 8001792:	f000 ff39 	bl	8002608 <HAL_GPIO_WritePin>

	  mainfloat = sensorState;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <StartTask03+0x4c>)
 800179a:	6013      	str	r3, [r2, #0]

    osDelay(1);
 800179c:	2001      	movs	r0, #1
 800179e:	f003 fbbf 	bl	8004f20 <osDelay>
  {
 80017a2:	e7e3      	b.n	800176c <StartTask03+0x8>
 80017a4:	20000218 	.word	0x20000218
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020000 	.word	0x40020000
 80017b0:	20000210 	.word	0x20000210

080017b4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80017b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017b8:	b094      	sub	sp, #80	; 0x50
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	//taskENTER_CRITICAL();
	isUltra = 1;
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <StartTask04+0x234>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
	int hit = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
	int miss_count = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t state = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	int delay;
	int echo=1;
 80017d2:	2301      	movs	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
	int id=0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int countultra = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
	int div = 50;
 80017de:	2332      	movs	r3, #50	; 0x32
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t arr[div];
 80017e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017e4:	1e4b      	subs	r3, r1, #1
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e8:	460a      	mov	r2, r1
 80017ea:	2300      	movs	r3, #0
 80017ec:	4690      	mov	r8, r2
 80017ee:	4699      	mov	r9, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001804:	460a      	mov	r2, r1
 8001806:	2300      	movs	r3, #0
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	00eb      	lsls	r3, r5, #3
 8001816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800181a:	00e2      	lsls	r2, r4, #3
 800181c:	460b      	mov	r3, r1
 800181e:	3307      	adds	r3, #7
 8001820:	08db      	lsrs	r3, r3, #3
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	ebad 0d03 	sub.w	sp, sp, r3
 8001828:	466b      	mov	r3, sp
 800182a:	3300      	adds	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24

	int ultmp[3];

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800182e:	2100      	movs	r1, #0
 8001830:	486e      	ldr	r0, [pc, #440]	; (80019ec <StartTask04+0x238>)
 8001832:	f001 fc95 	bl	8003160 <HAL_TIM_PWM_Start>

	TIM1->CCR1 = 20;
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <StartTask04+0x23c>)
 8001838:	2214      	movs	r2, #20
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	//HAL_UART_Transmit(&huart2, "4\r\n", 3, 10);
	uint8_t test = "TEST\r\n";
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <StartTask04+0x240>)
 800183e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	delay = 1000001;
 8001842:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <StartTask04+0x244>)
 8001844:	643b      	str	r3, [r7, #64]	; 0x40
	echo =  HAL_GPIO_ReadPin(HC_SRO4_PORT,HC_SRO4_PIN);
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	486c      	ldr	r0, [pc, #432]	; (80019fc <StartTask04+0x248>)
 800184a:	f000 fec5 	bl	80025d8 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	633b      	str	r3, [r7, #48]	; 0x30

	if (echo) {
 8001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <StartTask04+0xbe>
		delay = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
		while ( HAL_GPIO_ReadPin(HC_SRO4_PORT,HC_SRO4_PIN)) {
 800185c:	e002      	b.n	8001864 <StartTask04+0xb0>
			delay++;
 800185e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001860:	3301      	adds	r3, #1
 8001862:	643b      	str	r3, [r7, #64]	; 0x40
		while ( HAL_GPIO_ReadPin(HC_SRO4_PORT,HC_SRO4_PIN)) {
 8001864:	2140      	movs	r1, #64	; 0x40
 8001866:	4865      	ldr	r0, [pc, #404]	; (80019fc <StartTask04+0x248>)
 8001868:	f000 feb6 	bl	80025d8 <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f5      	bne.n	800185e <StartTask04+0xaa>
		}
	}

	if (delay < 1000001) {
 8001872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001874:	4a62      	ldr	r2, [pc, #392]	; (8001a00 <StartTask04+0x24c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	f300 80b1 	bgt.w	80019de <StartTask04+0x22a>

		if (delay < 1000) {
 800187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001882:	da05      	bge.n	8001890 <StartTask04+0xdc>
			hit++;
 8001884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001886:	3301      	adds	r3, #1
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
			miss_count = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800188e:	e006      	b.n	800189e <StartTask04+0xea>
		} else {
			if (miss_count++ > 100) { hit = 0; }
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	dd01      	ble.n	800189e <StartTask04+0xea>
 800189a:	2300      	movs	r3, #0
 800189c:	64bb      	str	r3, [r7, #72]	; 0x48
		 }

		if (hit > 100) {
 800189e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a0:	2b64      	cmp	r3, #100	; 0x64
 80018a2:	dd07      	ble.n	80018b4 <StartTask04+0x100>
			if (state == 0) {
 80018a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <StartTask04+0x10e>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
				state = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80018b2:	e006      	b.n	80018c2 <StartTask04+0x10e>
			}
		} else {
			if (state == 1) {
 80018b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d102      	bne.n	80018c2 <StartTask04+0x10e>
				//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);

				state = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}


		uint8_t pData[7] = {' ',' ',' ',' ',' ',' ',' '};
 80018c2:	4a50      	ldr	r2, [pc, #320]	; (8001a04 <StartTask04+0x250>)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018cc:	6018      	str	r0, [r3, #0]
 80018ce:	3304      	adds	r3, #4
 80018d0:	8019      	strh	r1, [r3, #0]
 80018d2:	3302      	adds	r3, #2
 80018d4:	0c0a      	lsrs	r2, r1, #16
 80018d6:	701a      	strb	r2, [r3, #0]

			if(countultra<div){
 80018d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	429a      	cmp	r2, r3
 80018de:	da14      	bge.n	800190a <StartTask04+0x156>
				arr[id] = delay;
 80018e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e2:	b2d9      	uxtb	r1, r3
 80018e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e8:	4413      	add	r3, r2
 80018ea:	460a      	mov	r2, r1
 80018ec:	701a      	strb	r2, [r3, #0]
				id = (id+1)%div;
 80018ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f0:	3301      	adds	r3, #1
 80018f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f4:	fb93 f2f2 	sdiv	r2, r3, r2
 80018f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018fa:	fb01 f202 	mul.w	r2, r1, r2
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
				countultra++;
 8001902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001904:	3301      	adds	r3, #1
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
 8001908:	e069      	b.n	80019de <StartTask04+0x22a>
			}
			else{
				arr[id] = delay;
 800190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
				id = (id+1)%div;
 8001918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191a:	3301      	adds	r3, #1
 800191c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001924:	fb01 f202 	mul.w	r2, r1, r2
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c

				delay = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40

				for(int i=0; i<div; i++){
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	; 0x34
 8001934:	e00a      	b.n	800194c <StartTask04+0x198>
					delay += arr[i];
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001942:	4413      	add	r3, r2
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
				for(int i=0; i<div; i++){
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	3301      	adds	r3, #1
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
 800194c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <StartTask04+0x182>
				}

				delay = delay/div;
 8001954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	fb92 f3f3 	sdiv	r3, r2, r3
 800195c:	643b      	str	r3, [r7, #64]	; 0x40

				if(mainfloat == 1 && delay <= 120){
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <StartTask04+0x254>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d12e      	bne.n	80019c4 <StartTask04+0x210>
 8001966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001968:	2b78      	cmp	r3, #120	; 0x78
 800196a:	dc2b      	bgt.n	80019c4 <StartTask04+0x210>
					sprintf(pData, "%d", delay);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001972:	4926      	ldr	r1, [pc, #152]	; (8001a0c <StartTask04+0x258>)
 8001974:	4618      	mov	r0, r3
 8001976:	f005 ff89 	bl	800788c <siprintf>

				HAL_UART_Transmit(&huart1, &pData, 7, HAL_MAX_DELAY);
 800197a:	f107 010c 	add.w	r1, r7, #12
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	2207      	movs	r2, #7
 8001984:	4822      	ldr	r0, [pc, #136]	; (8001a10 <StartTask04+0x25c>)
 8001986:	f002 f9fe 	bl	8003d86 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, "\r\n", 2, HAL_MAX_DELAY);
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	2202      	movs	r2, #2
 8001990:	4920      	ldr	r1, [pc, #128]	; (8001a14 <StartTask04+0x260>)
 8001992:	481f      	ldr	r0, [pc, #124]	; (8001a10 <StartTask04+0x25c>)
 8001994:	f002 f9f7 	bl	8003d86 <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart2, "Ultra: ", 7, HAL_MAX_DELAY);
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	2207      	movs	r2, #7
 800199e:	491e      	ldr	r1, [pc, #120]	; (8001a18 <StartTask04+0x264>)
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <StartTask04+0x268>)
 80019a2:	f002 f9f0 	bl	8003d86 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, &pData, 7,HAL_MAX_DELAY);
 80019a6:	f107 010c 	add.w	r1, r7, #12
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	2207      	movs	r2, #7
 80019b0:	481a      	ldr	r0, [pc, #104]	; (8001a1c <StartTask04+0x268>)
 80019b2:	f002 f9e8 	bl	8003d86 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80019b6:	230a      	movs	r3, #10
 80019b8:	2202      	movs	r2, #2
 80019ba:	4916      	ldr	r1, [pc, #88]	; (8001a14 <StartTask04+0x260>)
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <StartTask04+0x268>)
 80019be:	f002 f9e2 	bl	8003d86 <HAL_UART_Transmit>
				if(mainfloat == 1 && delay <= 120){
 80019c2:	e00c      	b.n	80019de <StartTask04+0x22a>

				}else {
					HAL_UART_Transmit(&huart2, "noooo: ", 7, HAL_MAX_DELAY);
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	2207      	movs	r2, #7
 80019ca:	4915      	ldr	r1, [pc, #84]	; (8001a20 <StartTask04+0x26c>)
 80019cc:	4813      	ldr	r0, [pc, #76]	; (8001a1c <StartTask04+0x268>)
 80019ce:	f002 f9da 	bl	8003d86 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 80019d2:	230a      	movs	r3, #10
 80019d4:	2202      	movs	r2, #2
 80019d6:	490f      	ldr	r1, [pc, #60]	; (8001a14 <StartTask04+0x260>)
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <StartTask04+0x268>)
 80019da:	f002 f9d4 	bl	8003d86 <HAL_UART_Transmit>





	osDelay(10);
 80019de:	200a      	movs	r0, #10
 80019e0:	f003 fa9e 	bl	8004f20 <osDelay>
  {
 80019e4:	e72a      	b.n	800183c <StartTask04+0x88>
 80019e6:	bf00      	nop
 80019e8:	2000021c 	.word	0x2000021c
 80019ec:	20000090 	.word	0x20000090
 80019f0:	40010000 	.word	0x40010000
 80019f4:	080081b8 	.word	0x080081b8
 80019f8:	000f4241 	.word	0x000f4241
 80019fc:	40020400 	.word	0x40020400
 8001a00:	000f4240 	.word	0x000f4240
 8001a04:	080081d4 	.word	0x080081d4
 8001a08:	20000210 	.word	0x20000210
 8001a0c:	080081c0 	.word	0x080081c0
 8001a10:	20000120 	.word	0x20000120
 8001a14:	0800819c 	.word	0x0800819c
 8001a18:	080081c4 	.word	0x080081c4
 8001a1c:	20000164 	.word	0x20000164
 8001a20:	080081cc 	.word	0x080081cc

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_MspInit+0x54>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a11      	ldr	r2, [pc, #68]	; (8001a84 <HAL_MspInit+0x54>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_MspInit+0x54>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_MspInit+0x54>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_MspInit+0x54>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_MspInit+0x54>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	210f      	movs	r1, #15
 8001a72:	f06f 0001 	mvn.w	r0, #1
 8001a76:	f000 fb62 	bl	800213e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a09      	ldr	r2, [pc, #36]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_TIM_PWM_MspInit+0x40>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <HAL_TIM_Base_MspInit+0x3c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10d      	bne.n	8001afa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_TIM_Base_MspInit+0x40>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_TIM_Base_MspInit+0x40>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <HAL_TIM_Base_MspInit+0x40>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40023800 	.word	0x40023800

08001b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <HAL_TIM_MspPostInit+0x68>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d11e      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_TIM_MspPostInit+0x6c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_TIM_MspPostInit+0x6c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_MspPostInit+0x6c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_TIM_MspPostInit+0x70>)
 8001b6c:	f000 fbb0 	bl	80022d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b70:	bf00      	nop
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a53      	ldr	r2, [pc, #332]	; (8001cf0 <HAL_UART_MspInit+0x16c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d135      	bne.n	8001c12 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b48      	ldr	r3, [pc, #288]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bec:	2303      	movs	r3, #3
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bf0:	2307      	movs	r3, #7
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	483f      	ldr	r0, [pc, #252]	; (8001cf8 <HAL_UART_MspInit+0x174>)
 8001bfc:	f000 fb68 	bl	80022d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2105      	movs	r1, #5
 8001c04:	2025      	movs	r0, #37	; 0x25
 8001c06:	f000 fa9a 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c0a:	2025      	movs	r0, #37	; 0x25
 8001c0c:	f000 fab3 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c10:	e06a      	b.n	8001ce8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_UART_MspInit+0x178>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d12c      	bne.n	8001c76 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a2c      	ldr	r2, [pc, #176]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c54:	230c      	movs	r3, #12
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c64:	2307      	movs	r3, #7
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4822      	ldr	r0, [pc, #136]	; (8001cf8 <HAL_UART_MspInit+0x174>)
 8001c70:	f000 fb2e 	bl	80022d0 <HAL_GPIO_Init>
}
 8001c74:	e038      	b.n	8001ce8 <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_UART_MspInit+0x17c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d133      	bne.n	8001ce8 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c8a:	f043 0320 	orr.w	r3, r3, #32
 8001c8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c90:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a13      	ldr	r2, [pc, #76]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_UART_MspInit+0x170>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb8:	23c0      	movs	r3, #192	; 0xc0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <HAL_UART_MspInit+0x180>)
 8001cd4:	f000 fafc 	bl	80022d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2105      	movs	r1, #5
 8001cdc:	2047      	movs	r0, #71	; 0x47
 8001cde:	f000 fa2e 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ce2:	2047      	movs	r0, #71	; 0x47
 8001ce4:	f000 fa47 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 8001ce8:	bf00      	nop
 8001cea:	3738      	adds	r7, #56	; 0x38
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40011000 	.word	0x40011000
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40004400 	.word	0x40004400
 8001d00:	40011400 	.word	0x40011400
 8001d04:	40020800 	.word	0x40020800

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f8e2 	bl	8001f00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d3c:	f004 fcfe 	bl	800673c <xTaskGetSchedulerState>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001d46:	f005 fae7 	bl	8007318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <USART1_IRQHandler+0x10>)
 8001d56:	f002 f8a9 	bl	8003eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000120 	.word	0x20000120

08001d64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <USART6_IRQHandler+0x10>)
 8001d6a:	f002 f89f 	bl	8003eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200001a8 	.word	0x200001a8

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f005 fd30 	bl	800780c <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20020000 	.word	0x20020000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	20000220 	.word	0x20000220
 8001de0:	20004b88 	.word	0x20004b88

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	; (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ffd7 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f005 fcef 	bl	8007818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff f8d3 	bl	8000fe4 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e4c:	080082e0 	.word	0x080082e0
  ldr r2, =_sbss
 8001e50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e54:	20004b88 	.word	0x20004b88

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f94f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	200f      	movs	r0, #15
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fdce 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f967 	bl	8002192 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f92f 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000224 	.word	0x20000224

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000224 	.word	0x20000224

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feb6 	bl	8001f28 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e052      	b.n	8002282 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0216 	bic.w	r2, r2, #22
 80021ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <HAL_DMA_Abort+0x62>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0208 	bic.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222c:	e013      	b.n	8002256 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7ff fe7b 	bl	8001f28 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d90c      	bls.n	8002256 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e015      	b.n	8002282 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e4      	bne.n	800222e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	223f      	movs	r2, #63	; 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00c      	b.n	80022c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e159      	b.n	80025a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8148 	bne.w	800259a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d005      	beq.n	8002322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	2b02      	cmp	r3, #2
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a2 	beq.w	800259a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a56      	ldr	r2, [pc, #344]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002472:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x202>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_GPIO_Init+0x2f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x1fe>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_GPIO_Init+0x2f8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x1fa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a46      	ldr	r2, [pc, #280]	; (80025cc <HAL_GPIO_Init+0x2fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x1f6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <HAL_GPIO_Init+0x300>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x1f2>
 80024be:	2304      	movs	r3, #4
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f aea2 	bls.w	80022ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e267      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00c      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b85      	ldr	r3, [pc, #532]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d112      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b82      	ldr	r3, [pc, #520]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b7e      	ldr	r3, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e242      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b70      	ldr	r3, [pc, #448]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6f      	ldr	r2, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6d      	ldr	r3, [pc, #436]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6c      	ldr	r2, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a68      	ldr	r2, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fc18 	bl	8001f28 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff fc14 	bl	8001f28 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e207      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5b      	ldr	r3, [pc, #364]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fc04 	bl	8001f28 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fc00 	bl	8001f28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1f3      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b51      	ldr	r3, [pc, #324]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c7      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4937      	ldr	r1, [pc, #220]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_OscConfig+0x244>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fbb9 	bl	8001f28 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff fbb5 	bl	8001f28 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a8      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4925      	ldr	r1, [pc, #148]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x244>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fb98 	bl	8001f28 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fc:	f7ff fb94 	bl	8001f28 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e187      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCC_OscConfig+0x248>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff fb78 	bl	8001f28 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fb74 	bl	8001f28 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e167      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
 800285a:	e01b      	b.n	8002894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_OscConfig+0x248>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb61 	bl	8001f28 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e00e      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fb5d 	bl	8001f28 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d907      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e150      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 800287c:	40023800 	.word	0x40023800
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ea      	bne.n	800286a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8097 	beq.w	80029d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a7c      	ldr	r2, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a73      	ldr	r2, [pc, #460]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff fb1d 	bl	8001f28 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7ff fb19 	bl	8001f28 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e10c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x2ea>
 8002918:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a63      	ldr	r2, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5b      	ldr	r2, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002948:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a54      	ldr	r2, [pc, #336]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fade 	bl	8001f28 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff fada 	bl	8001f28 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0cb      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ee      	beq.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7ff fac8 	bl	8001f28 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7ff fac4 	bl	8001f28 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0b5      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a38      	ldr	r2, [pc, #224]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a1 	beq.w	8002b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d05c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d141      	bne.n	8002a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fa98 	bl	8001f28 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff fa94 	bl	8001f28 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e087      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	085b      	lsrs	r3, r3, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	491b      	ldr	r1, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa6d 	bl	8001f28 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7ff fa69 	bl	8001f28 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e05c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x416>
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fa56 	bl	8001f28 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff fa52 	bl	8001f28 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e045      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e038      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x4ec>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d121      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff f984 	bl	8001f28 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff f980 	bl	8001f28 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8e4 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	08008284 	.word	0x08008284
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b094      	sub	sp, #80	; 0x50
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
 8002d04:	2300      	movs	r3, #0
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d08:	2300      	movs	r3, #0
 8002d0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d00d      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f200 80e1 	bhi.w	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2a:	e0db      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d30:	e0db      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d36:	e0d8      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4621      	mov	r1, r4
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	6139      	str	r1, [r7, #16]
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4651      	mov	r1, sl
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4651      	mov	r1, sl
 8002dac:	ebb2 0801 	subs.w	r8, r2, r1
 8002db0:	4659      	mov	r1, fp
 8002db2:	eb63 0901 	sbc.w	r9, r3, r1
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dca:	4690      	mov	r8, r2
 8002dcc:	4699      	mov	r9, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	eb18 0303 	adds.w	r3, r8, r3
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	eb49 0303 	adc.w	r3, r9, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dea:	4629      	mov	r1, r5
 8002dec:	024b      	lsls	r3, r1, #9
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df4:	4621      	mov	r1, r4
 8002df6:	024a      	lsls	r2, r1, #9
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e08:	f7fd fe58 	bl	8000abc <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e14:	e058      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4611      	mov	r1, r2
 8002e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e30:	4642      	mov	r2, r8
 8002e32:	464b      	mov	r3, r9
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	0159      	lsls	r1, r3, #5
 8002e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e42:	0150      	lsls	r0, r2, #5
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e4e:	4649      	mov	r1, r9
 8002e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e68:	ebb2 040a 	subs.w	r4, r2, sl
 8002e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	00eb      	lsls	r3, r5, #3
 8002e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7e:	00e2      	lsls	r2, r4, #3
 8002e80:	4614      	mov	r4, r2
 8002e82:	461d      	mov	r5, r3
 8002e84:	4643      	mov	r3, r8
 8002e86:	18e3      	adds	r3, r4, r3
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb45 0303 	adc.w	r3, r5, r3
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	028b      	lsls	r3, r1, #10
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	028a      	lsls	r2, r1, #10
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	61fa      	str	r2, [r7, #28]
 8002eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebc:	f7fd fdfe 	bl	8000abc <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3750      	adds	r7, #80	; 0x50
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	007a1200 	.word	0x007a1200

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000000 	.word	0x20000000

08002f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f20:	f7ff fff0 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	08008294 	.word	0x08008294

08002f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f48:	f7ff ffdc 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0b5b      	lsrs	r3, r3, #13
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	08008294 	.word	0x08008294

08002f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e041      	b.n	8003002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fd9a 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 fb12 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e03c      	b.n	800309e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_TIM_Base_Start+0xa0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d018      	beq.n	8003068 <HAL_TIM_Base_Start+0x5c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303e:	d013      	beq.n	8003068 <HAL_TIM_Base_Start+0x5c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a1a      	ldr	r2, [pc, #104]	; (80030b0 <HAL_TIM_Base_Start+0xa4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d00e      	beq.n	8003068 <HAL_TIM_Base_Start+0x5c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_TIM_Base_Start+0xa8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d009      	beq.n	8003068 <HAL_TIM_Base_Start+0x5c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_TIM_Base_Start+0xac>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_TIM_Base_Start+0x5c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a16      	ldr	r2, [pc, #88]	; (80030bc <HAL_TIM_Base_Start+0xb0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d111      	bne.n	800308c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d010      	beq.n	800309c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308a:	e007      	b.n	800309c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014000 	.word	0x40014000

080030c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e041      	b.n	8003156 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe fcce 	bl	8001a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f000 fa68 	bl	80035d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PWM_Start+0x24>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e022      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d109      	bne.n	800319e <HAL_TIM_PWM_Start+0x3e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e015      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x58>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e008      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e068      	b.n	80032a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x82>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	e013      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_PWM_Start+0x92>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	e00b      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0xa2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	e003      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	6839      	ldr	r1, [r7, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fc84 	bl	8003b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_TIM_PWM_Start+0x14c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d107      	bne.n	8003232 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_TIM_PWM_Start+0x14c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d013      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIM_PWM_Start+0x150>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_TIM_PWM_Start+0x154>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIM_PWM_Start+0x158>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIM_PWM_Start+0x15c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d010      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	e007      	b.n	80032a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40014000 	.word	0x40014000

080032c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0ae      	b.n	800343c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	f200 809f 	bhi.w	800342c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	0800342d 	.word	0x0800342d
 80032fc:	0800342d 	.word	0x0800342d
 8003300:	0800342d 	.word	0x0800342d
 8003304:	08003369 	.word	0x08003369
 8003308:	0800342d 	.word	0x0800342d
 800330c:	0800342d 	.word	0x0800342d
 8003310:	0800342d 	.word	0x0800342d
 8003314:	080033ab 	.word	0x080033ab
 8003318:	0800342d 	.word	0x0800342d
 800331c:	0800342d 	.word	0x0800342d
 8003320:	0800342d 	.word	0x0800342d
 8003324:	080033eb 	.word	0x080033eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f9d0 	bl	80036d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0208 	orr.w	r2, r2, #8
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	619a      	str	r2, [r3, #24]
      break;
 8003366:	e064      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa16 	bl	80037a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6999      	ldr	r1, [r3, #24]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	021a      	lsls	r2, r3, #8
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]
      break;
 80033a8:	e043      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fa61 	bl	8003878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0208 	orr.w	r2, r2, #8
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0204 	bic.w	r2, r2, #4
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	61da      	str	r2, [r3, #28]
      break;
 80033e8:	e023      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 faab 	bl	800394c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69d9      	ldr	r1, [r3, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	61da      	str	r2, [r3, #28]
      break;
 800342a:	e002      	b.n	8003432 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
      break;
 8003430:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIM_ConfigClockSource+0x1c>
 800345c:	2302      	movs	r3, #2
 800345e:	e0b4      	b.n	80035ca <HAL_TIM_ConfigClockSource+0x186>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800347e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003498:	d03e      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0xd4>
 800349a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800349e:	f200 8087 	bhi.w	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a6:	f000 8086 	beq.w	80035b6 <HAL_TIM_ConfigClockSource+0x172>
 80034aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ae:	d87f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b0:	2b70      	cmp	r3, #112	; 0x70
 80034b2:	d01a      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0xa6>
 80034b4:	2b70      	cmp	r3, #112	; 0x70
 80034b6:	d87b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034b8:	2b60      	cmp	r3, #96	; 0x60
 80034ba:	d050      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x11a>
 80034bc:	2b60      	cmp	r3, #96	; 0x60
 80034be:	d877      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d03c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xfa>
 80034c4:	2b50      	cmp	r3, #80	; 0x50
 80034c6:	d873      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d058      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x13a>
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d86f      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d064      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d86b      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d060      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d867      	bhi.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d05c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d05a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x15a>
 80034e8:	e062      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f000 faf1 	bl	8003ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800350c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04f      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f000 fada 	bl	8003ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e03c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f000 fa4e 	bl	80039ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	; 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 faa7 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 800355c:	e02c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	461a      	mov	r2, r3
 800356c:	f000 fa6d 	bl	8003a4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	; 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fa97 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 800357c:	e01c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	461a      	mov	r2, r3
 800358c:	f000 fa2e 	bl	80039ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa87 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 800359c:	e00c      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 fa7e 	bl	8003aaa <TIM_ITRx_SetConfig>
      break;
 80035ae:	e003      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e000      	b.n	80035b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <TIM_Base_SetConfig+0xe4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d00b      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <TIM_Base_SetConfig+0xe8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a30      	ldr	r2, [pc, #192]	; (80036c0 <TIM_Base_SetConfig+0xec>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_Base_SetConfig+0x38>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <TIM_Base_SetConfig+0xf0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d108      	bne.n	800361e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a25      	ldr	r2, [pc, #148]	; (80036b8 <TIM_Base_SetConfig+0xe4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362c:	d017      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <TIM_Base_SetConfig+0xe8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <TIM_Base_SetConfig+0xec>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00f      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <TIM_Base_SetConfig+0xf0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00b      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <TIM_Base_SetConfig+0xf4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d007      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <TIM_Base_SetConfig+0xf8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d003      	beq.n	800365e <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <TIM_Base_SetConfig+0xfc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d108      	bne.n	8003670 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a08      	ldr	r2, [pc, #32]	; (80036b8 <TIM_Base_SetConfig+0xe4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d103      	bne.n	80036a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	615a      	str	r2, [r3, #20]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40014400 	.word	0x40014400
 80036d0:	40014800 	.word	0x40014800

080036d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f023 0302 	bic.w	r3, r3, #2
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1c      	ldr	r2, [pc, #112]	; (800379c <TIM_OC1_SetConfig+0xc8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d10c      	bne.n	800374a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f023 0308 	bic.w	r3, r3, #8
 8003736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a13      	ldr	r2, [pc, #76]	; (800379c <TIM_OC1_SetConfig+0xc8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40010000 	.word	0x40010000

080037a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f023 0210 	bic.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0320 	bic.w	r3, r3, #32
 80037ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a1e      	ldr	r2, [pc, #120]	; (8003874 <TIM_OC2_SetConfig+0xd4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10d      	bne.n	800381c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <TIM_OC2_SetConfig+0xd4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d113      	bne.n	800384c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000

08003878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <TIM_OC3_SetConfig+0xd0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10d      	bne.n	80038f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <TIM_OC3_SetConfig+0xd0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d113      	bne.n	8003922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40010000 	.word	0x40010000

0800394c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <TIM_OC4_SetConfig+0x9c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40010000 	.word	0x40010000

080039ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f023 0201 	bic.w	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f023 030a 	bic.w	r3, r3, #10
 8003a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f023 0210 	bic.w	r2, r3, #16
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	621a      	str	r2, [r3, #32]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f043 0307 	orr.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	609a      	str	r2, [r3, #8]
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2201      	movs	r2, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1a      	ldr	r2, [r3, #32]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	fa01 f303 	lsl.w	r3, r1, r3
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e050      	b.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d018      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d013      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00e      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d004      	beq.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10c      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000

08003c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e03d      	b.n	8003ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03f      	b.n	8003d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd ff36 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fd71 	bl	8004818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08a      	sub	sp, #40	; 0x28
 8003d8a:	af02      	add	r7, sp, #8
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d17c      	bne.n	8003ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_UART_Transmit+0x2c>
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e075      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Transmit+0x3e>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e06e      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2221      	movs	r2, #33	; 0x21
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dda:	f7fe f8a5 	bl	8001f28 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e18:	e02a      	b.n	8003e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 faef 	bl	8004408 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e036      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e007      	b.n	8003e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1cf      	bne.n	8003e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2140      	movs	r1, #64	; 0x40
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fabf 	bl	8004408 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e006      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b0ba      	sub	sp, #232	; 0xe8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_UART_IRQHandler+0x66>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fbc9 	bl	80046a2 <UART_Receive_IT>
      return;
 8003f10:	e256      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80de 	beq.w	80040d8 <HAL_UART_IRQHandler+0x22c>
 8003f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80d1 	beq.w	80040d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xae>
 8003f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xd2>
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0202 	orr.w	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xf6>
 8003f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f043 0204 	orr.w	r2, r3, #4
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x126>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f043 0208 	orr.w	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 81ed 	beq.w	80043b6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_UART_IRQHandler+0x14e>
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fb54 	bl	80046a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_UART_IRQHandler+0x17a>
 800401e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04f      	beq.n	80040c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa5c 	bl	80044e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b40      	cmp	r3, #64	; 0x40
 8004038:	d141      	bne.n	80040be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3314      	adds	r3, #20
 8004062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800406a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800407e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1d9      	bne.n	800403a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	2b00      	cmp	r3, #0
 800408c:	d013      	beq.n	80040b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	4a7d      	ldr	r2, [pc, #500]	; (8004288 <HAL_UART_IRQHandler+0x3dc>)
 8004094:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe f8f5 	bl	800228a <HAL_DMA_Abort_IT>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b0:	4610      	mov	r0, r2
 80040b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	e00e      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f990 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e00a      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f98c 	bl	80043dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e006      	b.n	80040d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f988 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040d2:	e170      	b.n	80043b6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	bf00      	nop
    return;
 80040d6:	e16e      	b.n	80043b6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	2b01      	cmp	r3, #1
 80040de:	f040 814a 	bne.w	8004376 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0310 	and.w	r3, r3, #16
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8143 	beq.w	8004376 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 813c 	beq.w	8004376 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	f040 80b4 	bne.w	800428c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004130:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8140 	beq.w	80043ba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800413e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004142:	429a      	cmp	r2, r3
 8004144:	f080 8139 	bcs.w	80043ba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800414e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800415a:	f000 8088 	beq.w	800426e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800418a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800418e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004196:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1d9      	bne.n	800415e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3314      	adds	r3, #20
 80041ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e1      	bne.n	80041aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800420a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800420c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004210:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e3      	bne.n	80041e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	330c      	adds	r3, #12
 8004232:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800423c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004250:	65ba      	str	r2, [r7, #88]	; 0x58
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004256:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e3      	bne.n	800422c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd ff9e 	bl	80021aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004276:	b29b      	uxth	r3, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	b29b      	uxth	r3, r3
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f8b6 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004284:	e099      	b.n	80043ba <HAL_UART_IRQHandler+0x50e>
 8004286:	bf00      	nop
 8004288:	080045ab 	.word	0x080045ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004294:	b29b      	uxth	r3, r3
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 808b 	beq.w	80043be <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8086 	beq.w	80043be <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	330c      	adds	r3, #12
 80042b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	e853 3f00 	ldrex	r3, [r3]
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042d6:	647a      	str	r2, [r7, #68]	; 0x44
 80042d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e3      	bne.n	80042b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	623b      	str	r3, [r7, #32]
   return(result);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800430e:	633a      	str	r2, [r7, #48]	; 0x30
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	617b      	str	r3, [r7, #20]
   return(result);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e3      	bne.n	8004330 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004368:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800436c:	4619      	mov	r1, r3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f83e 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004374:	e023      	b.n	80043be <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <HAL_UART_IRQHandler+0x4ea>
 8004382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f91f 	bl	80045d2 <UART_Transmit_IT>
    return;
 8004394:	e014      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <HAL_UART_IRQHandler+0x514>
 80043a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f95f 	bl	8004672 <UART_EndTransmit_IT>
    return;
 80043b4:	e004      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
    return;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
      return;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_UART_IRQHandler+0x514>
      return;
 80043be:	bf00      	nop
  }
}
 80043c0:	37e8      	adds	r7, #232	; 0xe8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop

080043c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b090      	sub	sp, #64	; 0x40
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004418:	e050      	b.n	80044bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d04c      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x30>
 8004428:	f7fd fd7e 	bl	8001f28 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004434:	429a      	cmp	r2, r3
 8004436:	d241      	bcs.n	80044bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004458:	637a      	str	r2, [r7, #52]	; 0x34
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800445e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	613b      	str	r3, [r7, #16]
   return(result);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	63bb      	str	r3, [r7, #56]	; 0x38
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800448c:	623a      	str	r2, [r7, #32]
 800448e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	69f9      	ldr	r1, [r7, #28]
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	61bb      	str	r3, [r7, #24]
   return(result);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e5      	bne.n	800446c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e00f      	b.n	80044dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	bf0c      	ite	eq
 80044cc:	2301      	moveq	r3, #1
 80044ce:	2300      	movne	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d09f      	beq.n	800441a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3740      	adds	r7, #64	; 0x40
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b095      	sub	sp, #84	; 0x54
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800450c:	643a      	str	r2, [r7, #64]	; 0x40
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004512:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	64bb      	str	r3, [r7, #72]	; 0x48
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d119      	bne.n	8004590 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60bb      	str	r3, [r7, #8]
   return(result);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	647b      	str	r3, [r7, #68]	; 0x44
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800457c:	61ba      	str	r2, [r7, #24]
 800457e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6979      	ldr	r1, [r7, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	613b      	str	r3, [r7, #16]
   return(result);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800459e:	bf00      	nop
 80045a0:	3754      	adds	r7, #84	; 0x54
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7ff ff09 	bl	80043dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b21      	cmp	r3, #33	; 0x21
 80045e4:	d13e      	bne.n	8004664 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ee:	d114      	bne.n	800461a <UART_Transmit_IT+0x48>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d110      	bne.n	800461a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	621a      	str	r2, [r3, #32]
 8004618:	e008      	b.n	800462c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	1c59      	adds	r1, r3, #1
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6211      	str	r1, [r2, #32]
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29b      	uxth	r3, r3
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	4619      	mov	r1, r3
 800463a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10f      	bne.n	8004660 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800464e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004688:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fc fb94 	bl	8000dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b08c      	sub	sp, #48	; 0x30
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b22      	cmp	r3, #34	; 0x22
 80046b4:	f040 80ab 	bne.w	800480e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d117      	bne.n	80046f2 <UART_Receive_IT+0x50>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d113      	bne.n	80046f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	1c9a      	adds	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
 80046f0:	e026      	b.n	8004740 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d007      	beq.n	8004716 <UART_Receive_IT+0x74>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <UART_Receive_IT+0x82>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e008      	b.n	8004736 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4619      	mov	r1, r3
 800474e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004750:	2b00      	cmp	r3, #0
 8004752:	d15a      	bne.n	800480a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0220 	bic.w	r2, r2, #32
 8004762:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004772:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	d135      	bne.n	8004800 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	613b      	str	r3, [r7, #16]
   return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f023 0310 	bic.w	r3, r3, #16
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	330c      	adds	r3, #12
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	623a      	str	r2, [r7, #32]
 80047bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b10      	cmp	r3, #16
 80047da:	d10a      	bne.n	80047f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fdf9 	bl	80043f0 <HAL_UARTEx_RxEventCallback>
 80047fe:	e002      	b.n	8004806 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fde1 	bl	80043c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	e002      	b.n	8004810 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3730      	adds	r7, #48	; 0x30
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b0c0      	sub	sp, #256	; 0x100
 800481e:	af00      	add	r7, sp, #0
 8004820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	68d9      	ldr	r1, [r3, #12]
 8004836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	ea40 0301 	orr.w	r3, r0, r1
 8004840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	431a      	orrs	r2, r3
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	431a      	orrs	r2, r3
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004870:	f021 010c 	bic.w	r1, r1, #12
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800487e:	430b      	orrs	r3, r1
 8004880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	6999      	ldr	r1, [r3, #24]
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	ea40 0301 	orr.w	r3, r0, r1
 800489e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4b8f      	ldr	r3, [pc, #572]	; (8004ae4 <UART_SetConfig+0x2cc>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d005      	beq.n	80048b8 <UART_SetConfig+0xa0>
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4b8d      	ldr	r3, [pc, #564]	; (8004ae8 <UART_SetConfig+0x2d0>)
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d104      	bne.n	80048c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fe fb44 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 80048bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048c0:	e003      	b.n	80048ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048c2:	f7fe fb2b 	bl	8002f1c <HAL_RCC_GetPCLK1Freq>
 80048c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d4:	f040 810c 	bne.w	8004af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	1891      	adds	r1, r2, r2
 80048f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80048f2:	415b      	adcs	r3, r3
 80048f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048fa:	4621      	mov	r1, r4
 80048fc:	eb12 0801 	adds.w	r8, r2, r1
 8004900:	4629      	mov	r1, r5
 8004902:	eb43 0901 	adc.w	r9, r3, r1
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491a:	4690      	mov	r8, r2
 800491c:	4699      	mov	r9, r3
 800491e:	4623      	mov	r3, r4
 8004920:	eb18 0303 	adds.w	r3, r8, r3
 8004924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004928:	462b      	mov	r3, r5
 800492a:	eb49 0303 	adc.w	r3, r9, r3
 800492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800493e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004946:	460b      	mov	r3, r1
 8004948:	18db      	adds	r3, r3, r3
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
 800494c:	4613      	mov	r3, r2
 800494e:	eb42 0303 	adc.w	r3, r2, r3
 8004952:	657b      	str	r3, [r7, #84]	; 0x54
 8004954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800495c:	f7fc f8ae 	bl	8000abc <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <UART_SetConfig+0x2d4>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	011c      	lsls	r4, r3, #4
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800497c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	64b9      	str	r1, [r7, #72]	; 0x48
 8004988:	415b      	adcs	r3, r3
 800498a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800498c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004990:	4641      	mov	r1, r8
 8004992:	eb12 0a01 	adds.w	sl, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb43 0b01 	adc.w	fp, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b0:	4692      	mov	sl, r2
 80049b2:	469b      	mov	fp, r3
 80049b4:	4643      	mov	r3, r8
 80049b6:	eb1a 0303 	adds.w	r3, sl, r3
 80049ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049be:	464b      	mov	r3, r9
 80049c0:	eb4b 0303 	adc.w	r3, fp, r3
 80049c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049dc:	460b      	mov	r3, r1
 80049de:	18db      	adds	r3, r3, r3
 80049e0:	643b      	str	r3, [r7, #64]	; 0x40
 80049e2:	4613      	mov	r3, r2
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049f2:	f7fc f863 	bl	8000abc <__aeabi_uldivmod>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <UART_SetConfig+0x2d4>)
 80049fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2264      	movs	r2, #100	; 0x64
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	1acb      	subs	r3, r1, r3
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <UART_SetConfig+0x2d4>)
 8004a14:	fba3 2302 	umull	r2, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a20:	441c      	add	r4, r3
 8004a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a44:	4641      	mov	r1, r8
 8004a46:	1851      	adds	r1, r2, r1
 8004a48:	6339      	str	r1, [r7, #48]	; 0x30
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	414b      	adcs	r3, r1
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a5c:	4659      	mov	r1, fp
 8004a5e:	00cb      	lsls	r3, r1, #3
 8004a60:	4651      	mov	r1, sl
 8004a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a66:	4651      	mov	r1, sl
 8004a68:	00ca      	lsls	r2, r1, #3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4642      	mov	r2, r8
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a78:	464b      	mov	r3, r9
 8004a7a:	460a      	mov	r2, r1
 8004a7c:	eb42 0303 	adc.w	r3, r2, r3
 8004a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a98:	460b      	mov	r3, r1
 8004a9a:	18db      	adds	r3, r3, r3
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	eb42 0303 	adc.w	r3, r2, r3
 8004aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004aae:	f7fc f805 	bl	8000abc <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <UART_SetConfig+0x2d4>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	2164      	movs	r1, #100	; 0x64
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	3332      	adds	r3, #50	; 0x32
 8004aca:	4a08      	ldr	r2, [pc, #32]	; (8004aec <UART_SetConfig+0x2d4>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f003 0207 	and.w	r2, r3, #7
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4422      	add	r2, r4
 8004ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae0:	e105      	b.n	8004cee <UART_SetConfig+0x4d6>
 8004ae2:	bf00      	nop
 8004ae4:	40011000 	.word	0x40011000
 8004ae8:	40011400 	.word	0x40011400
 8004aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b02:	4642      	mov	r2, r8
 8004b04:	464b      	mov	r3, r9
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	6239      	str	r1, [r7, #32]
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b12:	4641      	mov	r1, r8
 8004b14:	1854      	adds	r4, r2, r1
 8004b16:	4649      	mov	r1, r9
 8004b18:	eb43 0501 	adc.w	r5, r3, r1
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	00eb      	lsls	r3, r5, #3
 8004b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2a:	00e2      	lsls	r2, r4, #3
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	461d      	mov	r5, r3
 8004b30:	4643      	mov	r3, r8
 8004b32:	18e3      	adds	r3, r4, r3
 8004b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b38:	464b      	mov	r3, r9
 8004b3a:	eb45 0303 	adc.w	r3, r5, r3
 8004b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b5e:	4629      	mov	r1, r5
 8004b60:	008b      	lsls	r3, r1, #2
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b68:	4621      	mov	r1, r4
 8004b6a:	008a      	lsls	r2, r1, #2
 8004b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b70:	f7fb ffa4 	bl	8000abc <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4b60      	ldr	r3, [pc, #384]	; (8004cfc <UART_SetConfig+0x4e4>)
 8004b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	011c      	lsls	r4, r3, #4
 8004b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	1891      	adds	r1, r2, r2
 8004b9a:	61b9      	str	r1, [r7, #24]
 8004b9c:	415b      	adcs	r3, r3
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	1851      	adds	r1, r2, r1
 8004ba8:	6139      	str	r1, [r7, #16]
 8004baa:	4649      	mov	r1, r9
 8004bac:	414b      	adcs	r3, r1
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bbc:	4659      	mov	r1, fp
 8004bbe:	00cb      	lsls	r3, r1, #3
 8004bc0:	4651      	mov	r1, sl
 8004bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bc6:	4651      	mov	r1, sl
 8004bc8:	00ca      	lsls	r2, r1, #3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bd8:	464b      	mov	r3, r9
 8004bda:	460a      	mov	r2, r1
 8004bdc:	eb42 0303 	adc.w	r3, r2, r3
 8004be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	008b      	lsls	r3, r1, #2
 8004c00:	4641      	mov	r1, r8
 8004c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c06:	4641      	mov	r1, r8
 8004c08:	008a      	lsls	r2, r1, #2
 8004c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c0e:	f7fb ff55 	bl	8000abc <__aeabi_uldivmod>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <UART_SetConfig+0x4e4>)
 8004c18:	fba3 1302 	umull	r1, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	2164      	movs	r1, #100	; 0x64
 8004c20:	fb01 f303 	mul.w	r3, r1, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	3332      	adds	r3, #50	; 0x32
 8004c2a:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <UART_SetConfig+0x4e4>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	095b      	lsrs	r3, r3, #5
 8004c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c36:	441c      	add	r4, r3
 8004c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c40:	677a      	str	r2, [r7, #116]	; 0x74
 8004c42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c56:	4641      	mov	r1, r8
 8004c58:	1851      	adds	r1, r2, r1
 8004c5a:	6039      	str	r1, [r7, #0]
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	414b      	adcs	r3, r1
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c6e:	4659      	mov	r1, fp
 8004c70:	00cb      	lsls	r3, r1, #3
 8004c72:	4651      	mov	r1, sl
 8004c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c78:	4651      	mov	r1, sl
 8004c7a:	00ca      	lsls	r2, r1, #3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4603      	mov	r3, r0
 8004c82:	4642      	mov	r2, r8
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c88:	464b      	mov	r3, r9
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	eb42 0303 	adc.w	r3, r2, r3
 8004c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004caa:	4649      	mov	r1, r9
 8004cac:	008b      	lsls	r3, r1, #2
 8004cae:	4641      	mov	r1, r8
 8004cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	008a      	lsls	r2, r1, #2
 8004cb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cbc:	f7fb fefe 	bl	8000abc <__aeabi_uldivmod>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <UART_SetConfig+0x4e4>)
 8004cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	2164      	movs	r1, #100	; 0x64
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	3332      	adds	r3, #50	; 0x32
 8004cd8:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <UART_SetConfig+0x4e4>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 020f 	and.w	r2, r3, #15
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4422      	add	r2, r4
 8004cec:	609a      	str	r2, [r3, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfa:	bf00      	nop
 8004cfc:	51eb851f 	.word	0x51eb851f

08004d00 <__NVIC_SetPriority>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	6039      	str	r1, [r7, #0]
 8004d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	db0a      	blt.n	8004d2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	490c      	ldr	r1, [pc, #48]	; (8004d4c <__NVIC_SetPriority+0x4c>)
 8004d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1e:	0112      	lsls	r2, r2, #4
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	440b      	add	r3, r1
 8004d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d28:	e00a      	b.n	8004d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	4908      	ldr	r1, [pc, #32]	; (8004d50 <__NVIC_SetPriority+0x50>)
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	3b04      	subs	r3, #4
 8004d38:	0112      	lsls	r2, r2, #4
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	761a      	strb	r2, [r3, #24]
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	e000e100 	.word	0xe000e100
 8004d50:	e000ed00 	.word	0xe000ed00

08004d54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	f06f 0004 	mvn.w	r0, #4
 8004d5e:	f7ff ffcf 	bl	8004d00 <__NVIC_SetPriority>
#endif
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d6e:	f3ef 8305 	mrs	r3, IPSR
 8004d72:	603b      	str	r3, [r7, #0]
  return(result);
 8004d74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d7a:	f06f 0305 	mvn.w	r3, #5
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e00c      	b.n	8004d9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <osKernelInitialize+0x44>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <osKernelInitialize+0x44>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
 8004d94:	e002      	b.n	8004d9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d9c:	687b      	ldr	r3, [r7, #4]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000228 	.word	0x20000228

08004db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	603b      	str	r3, [r7, #0]
  return(result);
 8004dbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <osKernelStart+0x1a>
    stat = osErrorISR;
 8004dc2:	f06f 0305 	mvn.w	r3, #5
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	e010      	b.n	8004dec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dca:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <osKernelStart+0x48>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d109      	bne.n	8004de6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dd2:	f7ff ffbf 	bl	8004d54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004dd6:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <osKernelStart+0x48>)
 8004dd8:	2202      	movs	r2, #2
 8004dda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ddc:	f001 f866 	bl	8005eac <vTaskStartScheduler>
      stat = osOK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	e002      	b.n	8004dec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004de6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dec:	687b      	ldr	r3, [r7, #4]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000228 	.word	0x20000228

08004dfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	; 0x38
 8004e00:	af04      	add	r7, sp, #16
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e0c:	f3ef 8305 	mrs	r3, IPSR
 8004e10:	617b      	str	r3, [r7, #20]
  return(result);
 8004e12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d17e      	bne.n	8004f16 <osThreadNew+0x11a>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d07b      	beq.n	8004f16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e22:	2318      	movs	r3, #24
 8004e24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d045      	beq.n	8004ec2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <osThreadNew+0x48>
        name = attr->name;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <osThreadNew+0x6e>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b38      	cmp	r3, #56	; 0x38
 8004e5c:	d805      	bhi.n	8004e6a <osThreadNew+0x6e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <osThreadNew+0x72>
        return (NULL);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e054      	b.n	8004f18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	089b      	lsrs	r3, r3, #2
 8004e7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <osThreadNew+0xa8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b5b      	cmp	r3, #91	; 0x5b
 8004e8c:	d90a      	bls.n	8004ea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <osThreadNew+0xa8>
        mem = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e010      	b.n	8004ec6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10c      	bne.n	8004ec6 <osThreadNew+0xca>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d108      	bne.n	8004ec6 <osThreadNew+0xca>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <osThreadNew+0xca>
          mem = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e001      	b.n	8004ec6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d110      	bne.n	8004eee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ed4:	9202      	str	r2, [sp, #8]
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	6a3a      	ldr	r2, [r7, #32]
 8004ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fe0c 	bl	8005b00 <xTaskCreateStatic>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	613b      	str	r3, [r7, #16]
 8004eec:	e013      	b.n	8004f16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d110      	bne.n	8004f16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	f107 0310 	add.w	r3, r7, #16
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fe57 	bl	8005bba <xTaskCreate>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <osThreadNew+0x11a>
            hTask = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f16:	693b      	ldr	r3, [r7, #16]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	; 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f28:	f3ef 8305 	mrs	r3, IPSR
 8004f2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <osDelay+0x1c>
    stat = osErrorISR;
 8004f34:	f06f 0305 	mvn.w	r3, #5
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	e007      	b.n	8004f4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ff7c 	bl	8005e44 <vTaskDelay>
    }
  }

  return (stat);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a06      	ldr	r2, [pc, #24]	; (8004f88 <vApplicationGetIdleTaskMemory+0x30>)
 8004f6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	2000022c 	.word	0x2000022c
 8004f88:	20000288 	.word	0x20000288

08004f8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a07      	ldr	r2, [pc, #28]	; (8004fb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4a06      	ldr	r2, [pc, #24]	; (8004fbc <vApplicationGetTimerTaskMemory+0x30>)
 8004fa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20000488 	.word	0x20000488
 8004fbc:	200004e4 	.word	0x200004e4

08004fc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f103 0208 	add.w	r2, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0208 	add.w	r2, r3, #8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005062:	b480      	push	{r7}
 8005064:	b085      	sub	sp, #20
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d103      	bne.n	8005082 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e00c      	b.n	800509c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3308      	adds	r3, #8
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e002      	b.n	8005090 <vListInsert+0x2e>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	429a      	cmp	r2, r3
 800509a:	d2f6      	bcs.n	800508a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6892      	ldr	r2, [r2, #8]
 80050ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d103      	bne.n	8005108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1e5a      	subs	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005152:	f002 f84f 	bl	80071f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	68f9      	ldr	r1, [r7, #12]
 8005160:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	441a      	add	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	3b01      	subs	r3, #1
 8005184:	68f9      	ldr	r1, [r7, #12]
 8005186:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	441a      	add	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d114      	bne.n	80051d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01a      	beq.n	80051e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3310      	adds	r3, #16
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 f903 	bl	80063c0 <xTaskRemoveFromEventList>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d012      	beq.n	80051e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <xQueueGenericReset+0xcc>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	e009      	b.n	80051e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3310      	adds	r3, #16
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff fef2 	bl	8004fc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff feed 	bl	8004fc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051e6:	f002 f835 	bl	8007254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051ea:	2301      	movs	r3, #1
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10a      	bne.n	800523e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
}
 800523a:	bf00      	nop
 800523c:	e7fe      	b.n	800523c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <xQueueGenericCreateStatic+0x52>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <xQueueGenericCreateStatic+0x56>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericCreateStatic+0x58>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	623b      	str	r3, [r7, #32]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <xQueueGenericCreateStatic+0x7e>
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <xQueueGenericCreateStatic+0x82>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericCreateStatic+0x84>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	61fb      	str	r3, [r7, #28]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005296:	2350      	movs	r3, #80	; 0x50
 8005298:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d00a      	beq.n	80052b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00d      	beq.n	80052de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f805 	bl	80052e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3730      	adds	r7, #48	; 0x30
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e002      	b.n	800530a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005316:	2101      	movs	r1, #1
 8005318:	69b8      	ldr	r0, [r7, #24]
 800531a:	f7ff ff05 	bl	8005128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08e      	sub	sp, #56	; 0x38
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueGenericSend+0x32>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <xQueueGenericSend+0x40>
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueGenericSend+0x44>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <xQueueGenericSend+0x46>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <xQueueGenericSend+0x60>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d103      	bne.n	800539e <xQueueGenericSend+0x6e>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <xQueueGenericSend+0x72>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGenericSend+0x74>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericSend+0x8e>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053be:	f001 f9bd 	bl	800673c <xTaskGetSchedulerState>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xQueueGenericSend+0x9e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueGenericSend+0xa2>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericSend+0xa4>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericSend+0xbe>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61fb      	str	r3, [r7, #28]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ee:	f001 ff01 	bl	80071f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <xQueueGenericSend+0xd4>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d129      	bne.n	8005458 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540a:	f000 fa0b 	bl	8005824 <prvCopyDataToQueue>
 800540e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	4618      	mov	r0, r3
 800541e:	f000 ffcf 	bl	80063c0 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005428:	4b3f      	ldr	r3, [pc, #252]	; (8005528 <xQueueGenericSend+0x1f8>)
 800542a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	e00a      	b.n	8005450 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <xQueueGenericSend+0x1f8>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005450:	f001 ff00 	bl	8007254 <vPortExitCritical>
				return pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	e063      	b.n	8005520 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800545e:	f001 fef9 	bl	8007254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005462:	2300      	movs	r3, #0
 8005464:	e05c      	b.n	8005520 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f809 	bl	8006488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547a:	f001 feeb 	bl	8007254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800547e:	f000 fd7b 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005482:	f001 feb7 	bl	80071f4 <vPortEnterCritical>
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548c:	b25b      	sxtb	r3, r3
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d103      	bne.n	800549c <xQueueGenericSend+0x16c>
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d103      	bne.n	80054b2 <xQueueGenericSend+0x182>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b2:	f001 fecf 	bl	8007254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fff8 	bl	80064b4 <xTaskCheckForTimeOut>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d124      	bne.n	8005514 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054cc:	f000 faa2 	bl	8005a14 <prvIsQueueFull>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	3310      	adds	r3, #16
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 ff1e 	bl	8006320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f000 fa2d 	bl	8005944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ea:	f000 fd53 	bl	8005f94 <xTaskResumeAll>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af7c 	bne.w	80053ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <xQueueGenericSend+0x1f8>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e772      	b.n	80053ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550a:	f000 fa1b 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550e:	f000 fd41 	bl	8005f94 <xTaskResumeAll>
 8005512:	e76c      	b.n	80053ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005516:	f000 fa15 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800551a:	f000 fd3b 	bl	8005f94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800551e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005520:	4618      	mov	r0, r3
 8005522:	3738      	adds	r7, #56	; 0x38
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b090      	sub	sp, #64	; 0x40
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <xQueueGenericSendFromISR+0x3c>
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <xQueueGenericSendFromISR+0x40>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <xQueueGenericSendFromISR+0x42>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d103      	bne.n	8005596 <xQueueGenericSendFromISR+0x6a>
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	2b01      	cmp	r3, #1
 8005594:	d101      	bne.n	800559a <xQueueGenericSendFromISR+0x6e>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueGenericSendFromISR+0x70>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	623b      	str	r3, [r7, #32]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b6:	f001 feff 	bl	80073b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ba:	f3ef 8211 	mrs	r2, BASEPRI
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fa      	str	r2, [r7, #28]
 80055d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <xQueueGenericSendFromISR+0xbc>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d12f      	bne.n	8005648 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055fe:	f000 f911 	bl	8005824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005602:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d112      	bne.n	8005632 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d016      	beq.n	8005642 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005616:	3324      	adds	r3, #36	; 0x24
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fed1 	bl	80063c0 <xTaskRemoveFromEventList>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e007      	b.n	8005642 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005632:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005636:	3301      	adds	r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	b25a      	sxtb	r2, r3
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005642:	2301      	movs	r3, #1
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005646:	e001      	b.n	800564c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005648:	2300      	movs	r3, #0
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005656:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800565a:	4618      	mov	r0, r3
 800565c:	3740      	adds	r7, #64	; 0x40
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	; 0x30
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10a      	bne.n	8005694 <xQueueReceive+0x30>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	623b      	str	r3, [r7, #32]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <xQueueReceive+0x3e>
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <xQueueReceive+0x42>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <xQueueReceive+0x44>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10a      	bne.n	80056c2 <xQueueReceive+0x5e>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61fb      	str	r3, [r7, #28]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056c2:	f001 f83b 	bl	800673c <xTaskGetSchedulerState>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <xQueueReceive+0x6e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <xQueueReceive+0x72>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <xQueueReceive+0x74>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <xQueueReceive+0x8e>
	__asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	e7fe      	b.n	80056f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056f2:	f001 fd7f 	bl	80071f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01f      	beq.n	8005742 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005706:	f000 f8f7 	bl	80058f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1e5a      	subs	r2, r3, #1
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00f      	beq.n	800573a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	3310      	adds	r3, #16
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fe4e 	bl	80063c0 <xTaskRemoveFromEventList>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800572a:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <xQueueReceive+0x1bc>)
 800572c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800573a:	f001 fd8b 	bl	8007254 <vPortExitCritical>
				return pdPASS;
 800573e:	2301      	movs	r3, #1
 8005740:	e069      	b.n	8005816 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005748:	f001 fd84 	bl	8007254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800574c:	2300      	movs	r3, #0
 800574e:	e062      	b.n	8005816 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005756:	f107 0310 	add.w	r3, r7, #16
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fe94 	bl	8006488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005764:	f001 fd76 	bl	8007254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005768:	f000 fc06 	bl	8005f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800576c:	f001 fd42 	bl	80071f4 <vPortEnterCritical>
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005776:	b25b      	sxtb	r3, r3
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <xQueueReceive+0x122>
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <xQueueReceive+0x138>
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800579c:	f001 fd5a 	bl	8007254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a0:	1d3a      	adds	r2, r7, #4
 80057a2:	f107 0310 	add.w	r3, r7, #16
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 fe83 	bl	80064b4 <xTaskCheckForTimeOut>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d123      	bne.n	80057fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b6:	f000 f917 	bl	80059e8 <prvIsQueueEmpty>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d017      	beq.n	80057f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	3324      	adds	r3, #36	; 0x24
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fda9 	bl	8006320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d0:	f000 f8b8 	bl	8005944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057d4:	f000 fbde 	bl	8005f94 <xTaskResumeAll>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d189      	bne.n	80056f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057de:	4b10      	ldr	r3, [pc, #64]	; (8005820 <xQueueReceive+0x1bc>)
 80057e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	e780      	b.n	80056f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f2:	f000 f8a7 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f6:	f000 fbcd 	bl	8005f94 <xTaskResumeAll>
 80057fa:	e77a      	b.n	80056f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fe:	f000 f8a1 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005802:	f000 fbc7 	bl	8005f94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005808:	f000 f8ee 	bl	80059e8 <prvIsQueueEmpty>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	f43f af6f 	beq.w	80056f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005816:	4618      	mov	r0, r3
 8005818:	3730      	adds	r7, #48	; 0x30
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	e000ed04 	.word	0xe000ed04

08005824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d14d      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ff92 	bl	8006778 <xTaskPriorityDisinherit>
 8005854:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	e043      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d119      	bne.n	8005898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6858      	ldr	r0, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	461a      	mov	r2, r3
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	f001 fff6 	bl	8007860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d32b      	bcc.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e026      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68d8      	ldr	r0, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	461a      	mov	r2, r3
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	f001 ffdc 	bl	8007860 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	425b      	negs	r3, r3
 80058b2:	441a      	add	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d207      	bcs.n	80058d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	425b      	negs	r3, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d105      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058ee:	697b      	ldr	r3, [r7, #20]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	441a      	add	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d303      	bcc.n	800592c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	461a      	mov	r2, r3
 8005936:	6838      	ldr	r0, [r7, #0]
 8005938:	f001 ff92 	bl	8007860 <memcpy>
	}
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800594c:	f001 fc52 	bl	80071f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005958:	e011      	b.n	800597e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d012      	beq.n	8005988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fd2a 	bl	80063c0 <xTaskRemoveFromEventList>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005972:	f000 fe01 	bl	8006578 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	3b01      	subs	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dce9      	bgt.n	800595a <prvUnlockQueue+0x16>
 8005986:	e000      	b.n	800598a <prvUnlockQueue+0x46>
					break;
 8005988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005992:	f001 fc5f 	bl	8007254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005996:	f001 fc2d 	bl	80071f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a2:	e011      	b.n	80059c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fd05 	bl	80063c0 <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059bc:	f000 fddc 	bl	8006578 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dce9      	bgt.n	80059a4 <prvUnlockQueue+0x60>
 80059d0:	e000      	b.n	80059d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059dc:	f001 fc3a 	bl	8007254 <vPortExitCritical>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f0:	f001 fc00 	bl	80071f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e001      	b.n	8005a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a06:	f001 fc25 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a1c:	f001 fbea 	bl	80071f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d102      	bne.n	8005a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e001      	b.n	8005a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a36:	f001 fc0d 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e014      	b.n	8005a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a54:	4a0f      	ldr	r2, [pc, #60]	; (8005a94 <vQueueAddToRegistry+0x50>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a60:	490c      	ldr	r1, [pc, #48]	; (8005a94 <vQueueAddToRegistry+0x50>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <vQueueAddToRegistry+0x50>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a76:	e006      	b.n	8005a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d9e7      	bls.n	8005a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200008e4 	.word	0x200008e4

08005a98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa8:	f001 fba4 	bl	80071f4 <vPortEnterCritical>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d103      	bne.n	8005ac2 <vQueueWaitForMessageRestricted+0x2a>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <vQueueWaitForMessageRestricted+0x40>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 fbbc 	bl	8007254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	3324      	adds	r3, #36	; 0x24
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fc3b 	bl	8006368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	f7ff ff26 	bl	8005944 <prvUnlockQueue>
	}
 8005af8:	bf00      	nop
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b08e      	sub	sp, #56	; 0x38
 8005b04:	af04      	add	r7, sp, #16
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	623b      	str	r3, [r7, #32]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	61fb      	str	r3, [r7, #28]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b46:	235c      	movs	r3, #92	; 0x5c
 8005b48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b4e:	d00a      	beq.n	8005b66 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61bb      	str	r3, [r7, #24]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01e      	beq.n	8005bac <xTaskCreateStatic+0xac>
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b86:	2300      	movs	r3, #0
 8005b88:	9303      	str	r3, [sp, #12]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	f107 0314 	add.w	r3, r7, #20
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f850 	bl	8005c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba6:	f000 f8dd 	bl	8005d64 <prvAddNewTaskToReadyList>
 8005baa:	e001      	b.n	8005bb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb0:	697b      	ldr	r3, [r7, #20]
	}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3728      	adds	r7, #40	; 0x28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b08c      	sub	sp, #48	; 0x30
 8005bbe:	af04      	add	r7, sp, #16
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fc32 	bl	8007438 <pvPortMalloc>
 8005bd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00e      	beq.n	8005bfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bdc:	205c      	movs	r0, #92	; 0x5c
 8005bde:	f001 fc2b 	bl	8007438 <pvPortMalloc>
 8005be2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf0:	e005      	b.n	8005bfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f001 fcec 	bl	80075d0 <vPortFree>
 8005bf8:	e001      	b.n	8005bfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d017      	beq.n	8005c34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9303      	str	r3, [sp, #12]
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	9302      	str	r3, [sp, #8]
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	9301      	str	r3, [sp, #4]
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f80e 	bl	8005c44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c28:	69f8      	ldr	r0, [r7, #28]
 8005c2a:	f000 f89b 	bl	8005d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e002      	b.n	8005c3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c34:	f04f 33ff 	mov.w	r3, #4294967295
 8005c38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	21a5      	movs	r1, #165	; 0xa5
 8005c5e:	f001 fe0d 	bl	800787c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00a      	beq.n	8005c9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	617b      	str	r3, [r7, #20]
}
 8005c98:	bf00      	nop
 8005c9a:	e7fe      	b.n	8005c9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01f      	beq.n	8005ce2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e012      	b.n	8005cce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3334      	adds	r3, #52	; 0x34
 8005cb8:	460a      	mov	r2, r1
 8005cba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d9e9      	bls.n	8005ca8 <prvInitialiseNewTask+0x64>
 8005cd4:	e000      	b.n	8005cd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005cd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ce0:	e003      	b.n	8005cea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	2b37      	cmp	r3, #55	; 0x37
 8005cee:	d901      	bls.n	8005cf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cf0:	2337      	movs	r3, #55	; 0x37
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	2200      	movs	r2, #0
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f978 	bl	8005000 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	3318      	adds	r3, #24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f973 	bl	8005000 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f001 f928 	bl	8006f98 <pxPortInitialiseStack>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d5a:	bf00      	nop
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d6c:	f001 fa42 	bl	80071f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a2c      	ldr	r2, [pc, #176]	; (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d82:	4a2a      	ldr	r2, [pc, #168]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d110      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d90:	f000 fc16 	bl	80065c0 <prvInitialiseTaskLists>
 8005d94:	e00d      	b.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <prvAddNewTaskToReadyList+0xcc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d9e:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d802      	bhi.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dac:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005db2:	4b20      	ldr	r3, [pc, #128]	; (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a1e      	ldr	r2, [pc, #120]	; (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005dba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	; (8005e38 <prvAddNewTaskToReadyList+0xd4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d903      	bls.n	8005dd8 <prvAddNewTaskToReadyList+0x74>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <prvAddNewTaskToReadyList+0xd4>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4a15      	ldr	r2, [pc, #84]	; (8005e3c <prvAddNewTaskToReadyList+0xd8>)
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7ff f913 	bl	800501a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005df4:	f001 fa2e 	bl	8007254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <prvAddNewTaskToReadyList+0xcc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e00:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d207      	bcs.n	8005e1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <prvAddNewTaskToReadyList+0xdc>)
 8005e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000df8 	.word	0x20000df8
 8005e2c:	20000924 	.word	0x20000924
 8005e30:	20000e04 	.word	0x20000e04
 8005e34:	20000e14 	.word	0x20000e14
 8005e38:	20000e00 	.word	0x20000e00
 8005e3c:	20000928 	.word	0x20000928
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d017      	beq.n	8005e86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <vTaskDelay+0x60>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <vTaskDelay+0x30>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60bb      	str	r3, [r7, #8]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e74:	f000 f880 	bl	8005f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fcea 	bl	8006854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e80:	f000 f888 	bl	8005f94 <xTaskResumeAll>
 8005e84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d107      	bne.n	8005e9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <vTaskDelay+0x64>)
 8005e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000e20 	.word	0x20000e20
 8005ea8:	e000ed04 	.word	0xe000ed04

08005eac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	; 0x28
 8005eb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005eba:	463a      	mov	r2, r7
 8005ebc:	1d39      	adds	r1, r7, #4
 8005ebe:	f107 0308 	add.w	r3, r7, #8
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff f848 	bl	8004f58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	9202      	str	r2, [sp, #8]
 8005ed0:	9301      	str	r3, [sp, #4]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	460a      	mov	r2, r1
 8005eda:	4921      	ldr	r1, [pc, #132]	; (8005f60 <vTaskStartScheduler+0xb4>)
 8005edc:	4821      	ldr	r0, [pc, #132]	; (8005f64 <vTaskStartScheduler+0xb8>)
 8005ede:	f7ff fe0f 	bl	8005b00 <xTaskCreateStatic>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <vTaskStartScheduler+0xbc>)
 8005ee6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ee8:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <vTaskStartScheduler+0xbc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e001      	b.n	8005efa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d102      	bne.n	8005f06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f00:	f000 fcfc 	bl	80068fc <xTimerCreateTimerTask>
 8005f04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d116      	bne.n	8005f3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	613b      	str	r3, [r7, #16]
}
 8005f1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <vTaskStartScheduler+0xc0>)
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <vTaskStartScheduler+0xc4>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <vTaskStartScheduler+0xc8>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f34:	f001 f8bc 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f38:	e00e      	b.n	8005f58 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d10a      	bne.n	8005f58 <vTaskStartScheduler+0xac>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60fb      	str	r3, [r7, #12]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vTaskStartScheduler+0xaa>
}
 8005f58:	bf00      	nop
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	080081dc 	.word	0x080081dc
 8005f64:	08006591 	.word	0x08006591
 8005f68:	20000e1c 	.word	0x20000e1c
 8005f6c:	20000e18 	.word	0x20000e18
 8005f70:	20000e04 	.word	0x20000e04
 8005f74:	20000dfc 	.word	0x20000dfc

08005f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <vTaskSuspendAll+0x18>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	4a03      	ldr	r2, [pc, #12]	; (8005f90 <vTaskSuspendAll+0x18>)
 8005f84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20000e20 	.word	0x20000e20

08005f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fa2:	4b42      	ldr	r3, [pc, #264]	; (80060ac <xTaskResumeAll+0x118>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10a      	bne.n	8005fc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fc0:	f001 f918 	bl	80071f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fc4:	4b39      	ldr	r3, [pc, #228]	; (80060ac <xTaskResumeAll+0x118>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	4a38      	ldr	r2, [pc, #224]	; (80060ac <xTaskResumeAll+0x118>)
 8005fcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fce:	4b37      	ldr	r3, [pc, #220]	; (80060ac <xTaskResumeAll+0x118>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d162      	bne.n	800609c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fd6:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <xTaskResumeAll+0x11c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d05e      	beq.n	800609c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fde:	e02f      	b.n	8006040 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe0:	4b34      	ldr	r3, [pc, #208]	; (80060b4 <xTaskResumeAll+0x120>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3318      	adds	r3, #24
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff f871 	bl	80050d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f86c 	bl	80050d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006000:	4b2d      	ldr	r3, [pc, #180]	; (80060b8 <xTaskResumeAll+0x124>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d903      	bls.n	8006010 <xTaskResumeAll+0x7c>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	4a2a      	ldr	r2, [pc, #168]	; (80060b8 <xTaskResumeAll+0x124>)
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4a27      	ldr	r2, [pc, #156]	; (80060bc <xTaskResumeAll+0x128>)
 800601e:	441a      	add	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f7fe fff7 	bl	800501a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006030:	4b23      	ldr	r3, [pc, #140]	; (80060c0 <xTaskResumeAll+0x12c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800603a:	4b22      	ldr	r3, [pc, #136]	; (80060c4 <xTaskResumeAll+0x130>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006040:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <xTaskResumeAll+0x120>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1cb      	bne.n	8005fe0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800604e:	f000 fb55 	bl	80066fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006052:	4b1d      	ldr	r3, [pc, #116]	; (80060c8 <xTaskResumeAll+0x134>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d010      	beq.n	8006080 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800605e:	f000 f847 	bl	80060f0 <xTaskIncrementTick>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006068:	4b16      	ldr	r3, [pc, #88]	; (80060c4 <xTaskResumeAll+0x130>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3b01      	subs	r3, #1
 8006072:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f1      	bne.n	800605e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <xTaskResumeAll+0x134>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <xTaskResumeAll+0x130>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d009      	beq.n	800609c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006088:	2301      	movs	r3, #1
 800608a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800608c:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <xTaskResumeAll+0x138>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800609c:	f001 f8da 	bl	8007254 <vPortExitCritical>

	return xAlreadyYielded;
 80060a0:	68bb      	ldr	r3, [r7, #8]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000e20 	.word	0x20000e20
 80060b0:	20000df8 	.word	0x20000df8
 80060b4:	20000db8 	.word	0x20000db8
 80060b8:	20000e00 	.word	0x20000e00
 80060bc:	20000928 	.word	0x20000928
 80060c0:	20000924 	.word	0x20000924
 80060c4:	20000e0c 	.word	0x20000e0c
 80060c8:	20000e08 	.word	0x20000e08
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <xTaskGetTickCount+0x1c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060dc:	687b      	ldr	r3, [r7, #4]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20000dfc 	.word	0x20000dfc

080060f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fa:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <xTaskIncrementTick+0x148>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 808f 	bne.w	8006222 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006104:	4b4d      	ldr	r3, [pc, #308]	; (800623c <xTaskIncrementTick+0x14c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800610c:	4a4b      	ldr	r2, [pc, #300]	; (800623c <xTaskIncrementTick+0x14c>)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d120      	bne.n	800615a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006118:	4b49      	ldr	r3, [pc, #292]	; (8006240 <xTaskIncrementTick+0x150>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <xTaskIncrementTick+0x48>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	603b      	str	r3, [r7, #0]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xTaskIncrementTick+0x46>
 8006138:	4b41      	ldr	r3, [pc, #260]	; (8006240 <xTaskIncrementTick+0x150>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	4b41      	ldr	r3, [pc, #260]	; (8006244 <xTaskIncrementTick+0x154>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a3f      	ldr	r2, [pc, #252]	; (8006240 <xTaskIncrementTick+0x150>)
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	4a3f      	ldr	r2, [pc, #252]	; (8006244 <xTaskIncrementTick+0x154>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <xTaskIncrementTick+0x158>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	4a3d      	ldr	r2, [pc, #244]	; (8006248 <xTaskIncrementTick+0x158>)
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	f000 fad1 	bl	80066fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800615a:	4b3c      	ldr	r3, [pc, #240]	; (800624c <xTaskIncrementTick+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d349      	bcc.n	80061f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006164:	4b36      	ldr	r3, [pc, #216]	; (8006240 <xTaskIncrementTick+0x150>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616e:	4b37      	ldr	r3, [pc, #220]	; (800624c <xTaskIncrementTick+0x15c>)
 8006170:	f04f 32ff 	mov.w	r2, #4294967295
 8006174:	601a      	str	r2, [r3, #0]
					break;
 8006176:	e03f      	b.n	80061f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006178:	4b31      	ldr	r3, [pc, #196]	; (8006240 <xTaskIncrementTick+0x150>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	429a      	cmp	r2, r3
 800618e:	d203      	bcs.n	8006198 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006190:	4a2e      	ldr	r2, [pc, #184]	; (800624c <xTaskIncrementTick+0x15c>)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006196:	e02f      	b.n	80061f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	3304      	adds	r3, #4
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe ff99 	bl	80050d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	3318      	adds	r3, #24
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe ff90 	bl	80050d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4b25      	ldr	r3, [pc, #148]	; (8006250 <xTaskIncrementTick+0x160>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <xTaskIncrementTick+0xd8>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a22      	ldr	r2, [pc, #136]	; (8006250 <xTaskIncrementTick+0x160>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a1f      	ldr	r2, [pc, #124]	; (8006254 <xTaskIncrementTick+0x164>)
 80061d6:	441a      	add	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7fe ff1b 	bl	800501a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <xTaskIncrementTick+0x168>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d3b8      	bcc.n	8006164 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f6:	e7b5      	b.n	8006164 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061f8:	4b17      	ldr	r3, [pc, #92]	; (8006258 <xTaskIncrementTick+0x168>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4915      	ldr	r1, [pc, #84]	; (8006254 <xTaskIncrementTick+0x164>)
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d901      	bls.n	8006214 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006214:	4b11      	ldr	r3, [pc, #68]	; (800625c <xTaskIncrementTick+0x16c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e004      	b.n	800622c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006222:	4b0f      	ldr	r3, [pc, #60]	; (8006260 <xTaskIncrementTick+0x170>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <xTaskIncrementTick+0x170>)
 800622a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800622c:	697b      	ldr	r3, [r7, #20]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000e20 	.word	0x20000e20
 800623c:	20000dfc 	.word	0x20000dfc
 8006240:	20000db0 	.word	0x20000db0
 8006244:	20000db4 	.word	0x20000db4
 8006248:	20000e10 	.word	0x20000e10
 800624c:	20000e18 	.word	0x20000e18
 8006250:	20000e00 	.word	0x20000e00
 8006254:	20000928 	.word	0x20000928
 8006258:	20000924 	.word	0x20000924
 800625c:	20000e0c 	.word	0x20000e0c
 8006260:	20000e08 	.word	0x20000e08

08006264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800626a:	4b28      	ldr	r3, [pc, #160]	; (800630c <vTaskSwitchContext+0xa8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006272:	4b27      	ldr	r3, [pc, #156]	; (8006310 <vTaskSwitchContext+0xac>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006278:	e041      	b.n	80062fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800627a:	4b25      	ldr	r3, [pc, #148]	; (8006310 <vTaskSwitchContext+0xac>)
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006280:	4b24      	ldr	r3, [pc, #144]	; (8006314 <vTaskSwitchContext+0xb0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e010      	b.n	80062aa <vTaskSwitchContext+0x46>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
}
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <vTaskSwitchContext+0x3e>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	491b      	ldr	r1, [pc, #108]	; (8006318 <vTaskSwitchContext+0xb4>)
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d0e4      	beq.n	8006288 <vTaskSwitchContext+0x24>
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <vTaskSwitchContext+0xb4>)
 80062ca:	4413      	add	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	3308      	adds	r3, #8
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d104      	bne.n	80062ee <vTaskSwitchContext+0x8a>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	605a      	str	r2, [r3, #4]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	4a09      	ldr	r2, [pc, #36]	; (800631c <vTaskSwitchContext+0xb8>)
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4a06      	ldr	r2, [pc, #24]	; (8006314 <vTaskSwitchContext+0xb0>)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6013      	str	r3, [r2, #0]
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000e20 	.word	0x20000e20
 8006310:	20000e0c 	.word	0x20000e0c
 8006314:	20000e00 	.word	0x20000e00
 8006318:	20000928 	.word	0x20000928
 800631c:	20000924 	.word	0x20000924

08006320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <vTaskPlaceOnEventList+0x44>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3318      	adds	r3, #24
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fe fe87 	bl	8005062 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006354:	2101      	movs	r1, #1
 8006356:	6838      	ldr	r0, [r7, #0]
 8006358:	f000 fa7c 	bl	8006854 <prvAddCurrentTaskToDelayedList>
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000924 	.word	0x20000924

08006368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10a      	bne.n	8006390 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	617b      	str	r3, [r7, #20]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3318      	adds	r3, #24
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7fe fe3e 	bl	800501a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	68b8      	ldr	r0, [r7, #8]
 80063ae:	f000 fa51 	bl	8006854 <prvAddCurrentTaskToDelayedList>
	}
 80063b2:	bf00      	nop
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000924 	.word	0x20000924

080063c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60fb      	str	r3, [r7, #12]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	3318      	adds	r3, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fe6f 	bl	80050d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f6:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <xTaskRemoveFromEventList+0xb0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11d      	bne.n	800643a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe66 	bl	80050d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4b19      	ldr	r3, [pc, #100]	; (8006474 <xTaskRemoveFromEventList+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d903      	bls.n	800641c <xTaskRemoveFromEventList+0x5c>
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4a16      	ldr	r2, [pc, #88]	; (8006474 <xTaskRemoveFromEventList+0xb4>)
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4a13      	ldr	r2, [pc, #76]	; (8006478 <xTaskRemoveFromEventList+0xb8>)
 800642a:	441a      	add	r2, r3
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fdf1 	bl	800501a <vListInsertEnd>
 8006438:	e005      	b.n	8006446 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3318      	adds	r3, #24
 800643e:	4619      	mov	r1, r3
 8006440:	480e      	ldr	r0, [pc, #56]	; (800647c <xTaskRemoveFromEventList+0xbc>)
 8006442:	f7fe fdea 	bl	800501a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <xTaskRemoveFromEventList+0xc0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	429a      	cmp	r2, r3
 8006452:	d905      	bls.n	8006460 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006458:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <xTaskRemoveFromEventList+0xc4>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e001      	b.n	8006464 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006464:	697b      	ldr	r3, [r7, #20]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000e20 	.word	0x20000e20
 8006474:	20000e00 	.word	0x20000e00
 8006478:	20000928 	.word	0x20000928
 800647c:	20000db8 	.word	0x20000db8
 8006480:	20000924 	.word	0x20000924
 8006484:	20000e0c 	.word	0x20000e0c

08006488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006490:	4b06      	ldr	r3, [pc, #24]	; (80064ac <vTaskInternalSetTimeOutState+0x24>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <vTaskInternalSetTimeOutState+0x28>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	605a      	str	r2, [r3, #4]
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	20000e10 	.word	0x20000e10
 80064b0:	20000dfc 	.word	0x20000dfc

080064b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613b      	str	r3, [r7, #16]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064f6:	f000 fe7d 	bl	80071f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064fa:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <xTaskCheckForTimeOut+0xbc>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d102      	bne.n	800651a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006514:	2300      	movs	r3, #0
 8006516:	61fb      	str	r3, [r7, #28]
 8006518:	e023      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <xTaskCheckForTimeOut+0xc0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d007      	beq.n	8006536 <xTaskCheckForTimeOut+0x82>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006530:	2301      	movs	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	e015      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	429a      	cmp	r2, r3
 800653e:	d20b      	bcs.n	8006558 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff ff9b 	bl	8006488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
 8006556:	e004      	b.n	8006562 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006562:	f000 fe77 	bl	8007254 <vPortExitCritical>

	return xReturn;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000dfc 	.word	0x20000dfc
 8006574:	20000e10 	.word	0x20000e10

08006578 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800657c:	4b03      	ldr	r3, [pc, #12]	; (800658c <vTaskMissedYield+0x14>)
 800657e:	2201      	movs	r2, #1
 8006580:	601a      	str	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	20000e0c 	.word	0x20000e0c

08006590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006598:	f000 f852 	bl	8006640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvIdleTask+0x28>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d9f9      	bls.n	8006598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <prvIdleTask+0x2c>)
 80065a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065b4:	e7f0      	b.n	8006598 <prvIdleTask+0x8>
 80065b6:	bf00      	nop
 80065b8:	20000928 	.word	0x20000928
 80065bc:	e000ed04 	.word	0xe000ed04

080065c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	e00c      	b.n	80065e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a12      	ldr	r2, [pc, #72]	; (8006620 <prvInitialiseTaskLists+0x60>)
 80065d8:	4413      	add	r3, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fcf0 	bl	8004fc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3301      	adds	r3, #1
 80065e4:	607b      	str	r3, [r7, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b37      	cmp	r3, #55	; 0x37
 80065ea:	d9ef      	bls.n	80065cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065ec:	480d      	ldr	r0, [pc, #52]	; (8006624 <prvInitialiseTaskLists+0x64>)
 80065ee:	f7fe fce7 	bl	8004fc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065f2:	480d      	ldr	r0, [pc, #52]	; (8006628 <prvInitialiseTaskLists+0x68>)
 80065f4:	f7fe fce4 	bl	8004fc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065f8:	480c      	ldr	r0, [pc, #48]	; (800662c <prvInitialiseTaskLists+0x6c>)
 80065fa:	f7fe fce1 	bl	8004fc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065fe:	480c      	ldr	r0, [pc, #48]	; (8006630 <prvInitialiseTaskLists+0x70>)
 8006600:	f7fe fcde 	bl	8004fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <prvInitialiseTaskLists+0x74>)
 8006606:	f7fe fcdb 	bl	8004fc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800660a:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <prvInitialiseTaskLists+0x78>)
 800660c:	4a05      	ldr	r2, [pc, #20]	; (8006624 <prvInitialiseTaskLists+0x64>)
 800660e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <prvInitialiseTaskLists+0x7c>)
 8006612:	4a05      	ldr	r2, [pc, #20]	; (8006628 <prvInitialiseTaskLists+0x68>)
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000928 	.word	0x20000928
 8006624:	20000d88 	.word	0x20000d88
 8006628:	20000d9c 	.word	0x20000d9c
 800662c:	20000db8 	.word	0x20000db8
 8006630:	20000dcc 	.word	0x20000dcc
 8006634:	20000de4 	.word	0x20000de4
 8006638:	20000db0 	.word	0x20000db0
 800663c:	20000db4 	.word	0x20000db4

08006640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006646:	e019      	b.n	800667c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006648:	f000 fdd4 	bl	80071f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <prvCheckTasksWaitingTermination+0x50>)
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fd3b 	bl	80050d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3b01      	subs	r3, #1
 8006664:	4a0b      	ldr	r2, [pc, #44]	; (8006694 <prvCheckTasksWaitingTermination+0x54>)
 8006666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3b01      	subs	r3, #1
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 8006670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006672:	f000 fdef 	bl	8007254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f810 	bl	800669c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <prvCheckTasksWaitingTermination+0x58>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e1      	bne.n	8006648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000dcc 	.word	0x20000dcc
 8006694:	20000df8 	.word	0x20000df8
 8006698:	20000de0 	.word	0x20000de0

0800669c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d108      	bne.n	80066c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 ff8c 	bl	80075d0 <vPortFree>
				vPortFree( pxTCB );
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 ff89 	bl	80075d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066be:	e018      	b.n	80066f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d103      	bne.n	80066d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 ff80 	bl	80075d0 <vPortFree>
	}
 80066d0:	e00f      	b.n	80066f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d00a      	beq.n	80066f2 <prvDeleteTCB+0x56>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <prvDeleteTCB+0x54>
	}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006702:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <prvResetNextTaskUnblockTime+0x38>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <prvResetNextTaskUnblockTime+0x3c>)
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006714:	e008      	b.n	8006728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <prvResetNextTaskUnblockTime+0x38>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4a04      	ldr	r2, [pc, #16]	; (8006738 <prvResetNextTaskUnblockTime+0x3c>)
 8006726:	6013      	str	r3, [r2, #0]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20000db0 	.word	0x20000db0
 8006738:	20000e18 	.word	0x20000e18

0800673c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <xTaskGetSchedulerState+0x34>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800674a:	2301      	movs	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	e008      	b.n	8006762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006750:	4b08      	ldr	r3, [pc, #32]	; (8006774 <xTaskGetSchedulerState+0x38>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006758:	2302      	movs	r3, #2
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e001      	b.n	8006762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006762:	687b      	ldr	r3, [r7, #4]
	}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000e04 	.word	0x20000e04
 8006774:	20000e20 	.word	0x20000e20

08006778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d056      	beq.n	800683c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <xTaskPriorityDisinherit+0xd0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d00a      	beq.n	80067ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	60bb      	str	r3, [r7, #8]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	1e5a      	subs	r2, r3, #1
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	429a      	cmp	r2, r3
 80067e0:	d02c      	beq.n	800683c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d128      	bne.n	800683c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fc70 	bl	80050d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b0f      	ldr	r3, [pc, #60]	; (800684c <xTaskPriorityDisinherit+0xd4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d903      	bls.n	800681c <xTaskPriorityDisinherit+0xa4>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a0c      	ldr	r2, [pc, #48]	; (800684c <xTaskPriorityDisinherit+0xd4>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4a09      	ldr	r2, [pc, #36]	; (8006850 <xTaskPriorityDisinherit+0xd8>)
 800682a:	441a      	add	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7fe fbf1 	bl	800501a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006838:	2301      	movs	r3, #1
 800683a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800683c:	697b      	ldr	r3, [r7, #20]
	}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000924 	.word	0x20000924
 800684c:	20000e00 	.word	0x20000e00
 8006850:	20000928 	.word	0x20000928

08006854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800685e:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006864:	4b20      	ldr	r3, [pc, #128]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fc32 	bl	80050d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d10a      	bne.n	800688e <prvAddCurrentTaskToDelayedList+0x3a>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800687e:	4b1a      	ldr	r3, [pc, #104]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4819      	ldr	r0, [pc, #100]	; (80068ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006888:	f7fe fbc7 	bl	800501a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800688c:	e026      	b.n	80068dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4413      	add	r3, r2
 8006894:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006896:	4b14      	ldr	r3, [pc, #80]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d209      	bcs.n	80068ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3304      	adds	r3, #4
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f7fe fbd5 	bl	8005062 <vListInsert>
}
 80068b8:	e010      	b.n	80068dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ba:	4b0e      	ldr	r3, [pc, #56]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3304      	adds	r3, #4
 80068c4:	4619      	mov	r1, r3
 80068c6:	4610      	mov	r0, r2
 80068c8:	f7fe fbcb 	bl	8005062 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d202      	bcs.n	80068dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068d6:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000dfc 	.word	0x20000dfc
 80068e8:	20000924 	.word	0x20000924
 80068ec:	20000de4 	.word	0x20000de4
 80068f0:	20000db4 	.word	0x20000db4
 80068f4:	20000db0 	.word	0x20000db0
 80068f8:	20000e18 	.word	0x20000e18

080068fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006906:	f000 fb07 	bl	8006f18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <xTimerCreateTimerTask+0x80>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d021      	beq.n	8006956 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800691a:	1d3a      	adds	r2, r7, #4
 800691c:	f107 0108 	add.w	r1, r7, #8
 8006920:	f107 030c 	add.w	r3, r7, #12
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe fb31 	bl	8004f8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	9202      	str	r2, [sp, #8]
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	2302      	movs	r3, #2
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	460a      	mov	r2, r1
 800693c:	4910      	ldr	r1, [pc, #64]	; (8006980 <xTimerCreateTimerTask+0x84>)
 800693e:	4811      	ldr	r0, [pc, #68]	; (8006984 <xTimerCreateTimerTask+0x88>)
 8006940:	f7ff f8de 	bl	8005b00 <xTaskCreateStatic>
 8006944:	4603      	mov	r3, r0
 8006946:	4a10      	ldr	r2, [pc, #64]	; (8006988 <xTimerCreateTimerTask+0x8c>)
 8006948:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800694a:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <xTimerCreateTimerTask+0x8c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006952:	2301      	movs	r3, #1
 8006954:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	613b      	str	r3, [r7, #16]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006972:	697b      	ldr	r3, [r7, #20]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000e54 	.word	0x20000e54
 8006980:	080081e4 	.word	0x080081e4
 8006984:	08006ac1 	.word	0x08006ac1
 8006988:	20000e58 	.word	0x20000e58

0800698c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	; 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800699a:	2300      	movs	r3, #0
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <xTimerGenericCommand+0x2e>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	623b      	str	r3, [r7, #32]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <xTimerGenericCommand+0x98>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d02a      	beq.n	8006a18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	dc18      	bgt.n	8006a06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069d4:	f7ff feb2 	bl	800673c <xTaskGetSchedulerState>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d109      	bne.n	80069f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <xTimerGenericCommand+0x98>)
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f107 0110 	add.w	r1, r7, #16
 80069e6:	2300      	movs	r3, #0
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	f7fe fca1 	bl	8005330 <xQueueGenericSend>
 80069ee:	6278      	str	r0, [r7, #36]	; 0x24
 80069f0:	e012      	b.n	8006a18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <xTimerGenericCommand+0x98>)
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f107 0110 	add.w	r1, r7, #16
 80069fa:	2300      	movs	r3, #0
 80069fc:	2200      	movs	r2, #0
 80069fe:	f7fe fc97 	bl	8005330 <xQueueGenericSend>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24
 8006a04:	e008      	b.n	8006a18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <xTimerGenericCommand+0x98>)
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f107 0110 	add.w	r1, r7, #16
 8006a0e:	2300      	movs	r3, #0
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	f7fe fd8b 	bl	800552c <xQueueGenericSendFromISR>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3728      	adds	r7, #40	; 0x28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000e54 	.word	0x20000e54

08006a28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b22      	ldr	r3, [pc, #136]	; (8006abc <prvProcessExpiredTimer+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fb47 	bl	80050d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d022      	beq.n	8006a9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	699a      	ldr	r2, [r3, #24]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	18d1      	adds	r1, r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f000 f8d1 	bl	8006c08 <prvInsertTimerInActiveList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01f      	beq.n	8006aac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2300      	movs	r3, #0
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	6978      	ldr	r0, [r7, #20]
 8006a78:	f7ff ff88 	bl	800698c <xTimerGenericCommand>
 8006a7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d113      	bne.n	8006aac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	6978      	ldr	r0, [r7, #20]
 8006ab2:	4798      	blx	r3
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000e4c 	.word	0x20000e4c

08006ac0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ac8:	f107 0308 	add.w	r3, r7, #8
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 f857 	bl	8006b80 <prvGetNextExpireTime>
 8006ad2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f803 	bl	8006ae4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ade:	f000 f8d5 	bl	8006c8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ae2:	e7f1      	b.n	8006ac8 <prvTimerTask+0x8>

08006ae4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006aee:	f7ff fa43 	bl	8005f78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006af2:	f107 0308 	add.w	r3, r7, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f866 	bl	8006bc8 <prvSampleTimeNow>
 8006afc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d130      	bne.n	8006b66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d806      	bhi.n	8006b20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b12:	f7ff fa3f 	bl	8005f94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff85 	bl	8006a28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b1e:	e024      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b26:	4b13      	ldr	r3, [pc, #76]	; (8006b74 <prvProcessTimerOrBlockTask+0x90>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <prvProcessTimerOrBlockTask+0x50>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <prvProcessTimerOrBlockTask+0x52>
 8006b34:	2300      	movs	r3, #0
 8006b36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b38:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <prvProcessTimerOrBlockTask+0x94>)
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fe ffa7 	bl	8005a98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b4a:	f7ff fa23 	bl	8005f94 <xTaskResumeAll>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b54:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <prvProcessTimerOrBlockTask+0x98>)
 8006b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	f3bf 8f6f 	isb	sy
}
 8006b64:	e001      	b.n	8006b6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b66:	f7ff fa15 	bl	8005f94 <xTaskResumeAll>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000e50 	.word	0x20000e50
 8006b78:	20000e54 	.word	0x20000e54
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b88:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <prvGetNextExpireTime+0x44>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <prvGetNextExpireTime+0x16>
 8006b92:	2201      	movs	r2, #1
 8006b94:	e000      	b.n	8006b98 <prvGetNextExpireTime+0x18>
 8006b96:	2200      	movs	r2, #0
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <prvGetNextExpireTime+0x44>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e001      	b.n	8006bb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000e4c 	.word	0x20000e4c

08006bc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006bd0:	f7ff fa7e 	bl	80060d0 <xTaskGetTickCount>
 8006bd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <prvSampleTimeNow+0x3c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d205      	bcs.n	8006bec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006be0:	f000 f936 	bl	8006e50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <prvSampleTimeNow+0x3c>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000e5c 	.word	0x20000e5c

08006c08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d812      	bhi.n	8006c54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad2      	subs	r2, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e01b      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c42:	4b10      	ldr	r3, [pc, #64]	; (8006c84 <prvInsertTimerInActiveList+0x7c>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe fa08 	bl	8005062 <vListInsert>
 8006c52:	e012      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d206      	bcs.n	8006c6a <prvInsertTimerInActiveList+0x62>
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	e007      	b.n	8006c7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <prvInsertTimerInActiveList+0x80>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe f9f4 	bl	8005062 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c7a:	697b      	ldr	r3, [r7, #20]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000e50 	.word	0x20000e50
 8006c88:	20000e4c 	.word	0x20000e4c

08006c8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08e      	sub	sp, #56	; 0x38
 8006c90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c92:	e0ca      	b.n	8006e2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da18      	bge.n	8006ccc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c9a:	1d3b      	adds	r3, r7, #4
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61fb      	str	r3, [r7, #28]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc2:	6850      	ldr	r0, [r2, #4]
 8006cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc6:	6892      	ldr	r2, [r2, #8]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f2c0 80aa 	blt.w	8006e28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe f9f5 	bl	80050d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cea:	463b      	mov	r3, r7
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff ff6b 	bl	8006bc8 <prvSampleTimeNow>
 8006cf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b09      	cmp	r3, #9
 8006cf8:	f200 8097 	bhi.w	8006e2a <prvProcessReceivedCommands+0x19e>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <prvProcessReceivedCommands+0x78>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d2d 	.word	0x08006d2d
 8006d10:	08006da1 	.word	0x08006da1
 8006d14:	08006db5 	.word	0x08006db5
 8006d18:	08006dff 	.word	0x08006dff
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d2d 	.word	0x08006d2d
 8006d24:	08006da1 	.word	0x08006da1
 8006d28:	08006db5 	.word	0x08006db5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d32:	f043 0301 	orr.w	r3, r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	18d1      	adds	r1, r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d4c:	f7ff ff5c 	bl	8006c08 <prvInsertTimerInActiveList>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d069      	beq.n	8006e2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d05e      	beq.n	8006e2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	441a      	add	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d7e:	f7ff fe05 	bl	800698c <xTimerGenericCommand>
 8006d82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d14f      	bne.n	8006e2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61bb      	str	r3, [r7, #24]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da6:	f023 0301 	bic.w	r3, r3, #1
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006db2:	e03a      	b.n	8006e2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	617b      	str	r3, [r7, #20]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	18d1      	adds	r1, r2, r3
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df8:	f7ff ff06 	bl	8006c08 <prvInsertTimerInActiveList>
					break;
 8006dfc:	e015      	b.n	8006e2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0e:	f000 fbdf 	bl	80075d0 <vPortFree>
 8006e12:	e00a      	b.n	8006e2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e26:	e000      	b.n	8006e2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006e28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e2a:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <prvProcessReceivedCommands+0x1c0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	1d39      	adds	r1, r7, #4
 8006e30:	2200      	movs	r2, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fc16 	bl	8005664 <xQueueReceive>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f47f af2a 	bne.w	8006c94 <prvProcessReceivedCommands+0x8>
	}
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	3730      	adds	r7, #48	; 0x30
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000e54 	.word	0x20000e54

08006e50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e56:	e048      	b.n	8006eea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e58:	4b2d      	ldr	r3, [pc, #180]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e62:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe f92f 	bl	80050d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d02e      	beq.n	8006eea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d90e      	bls.n	8006ebc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eaa:	4b19      	ldr	r3, [pc, #100]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7fe f8d4 	bl	8005062 <vListInsert>
 8006eba:	e016      	b.n	8006eea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7ff fd60 	bl	800698c <xTimerGenericCommand>
 8006ecc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	603b      	str	r3, [r7, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1b1      	bne.n	8006e58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <prvSwitchTimerLists+0xc4>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <prvSwitchTimerLists+0xc0>)
 8006f00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f02:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvSwitchTimerLists+0xc4>)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e4c 	.word	0x20000e4c
 8006f14:	20000e50 	.word	0x20000e50

08006f18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f1e:	f000 f969 	bl	80071f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d120      	bne.n	8006f6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f2a:	4814      	ldr	r0, [pc, #80]	; (8006f7c <prvCheckForValidListAndQueue+0x64>)
 8006f2c:	f7fe f848 	bl	8004fc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f30:	4813      	ldr	r0, [pc, #76]	; (8006f80 <prvCheckForValidListAndQueue+0x68>)
 8006f32:	f7fe f845 	bl	8004fc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f36:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <prvCheckForValidListAndQueue+0x6c>)
 8006f38:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <prvCheckForValidListAndQueue+0x64>)
 8006f3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f3c:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <prvCheckForValidListAndQueue+0x70>)
 8006f3e:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <prvCheckForValidListAndQueue+0x68>)
 8006f40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <prvCheckForValidListAndQueue+0x74>)
 8006f48:	4a11      	ldr	r2, [pc, #68]	; (8006f90 <prvCheckForValidListAndQueue+0x78>)
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	200a      	movs	r0, #10
 8006f4e:	f7fe f953 	bl	80051f8 <xQueueGenericCreateStatic>
 8006f52:	4603      	mov	r3, r0
 8006f54:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <prvCheckForValidListAndQueue+0x60>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	490b      	ldr	r1, [pc, #44]	; (8006f94 <prvCheckForValidListAndQueue+0x7c>)
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fd6c 	bl	8005a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f6c:	f000 f972 	bl	8007254 <vPortExitCritical>
}
 8006f70:	bf00      	nop
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000e54 	.word	0x20000e54
 8006f7c:	20000e24 	.word	0x20000e24
 8006f80:	20000e38 	.word	0x20000e38
 8006f84:	20000e4c 	.word	0x20000e4c
 8006f88:	20000e50 	.word	0x20000e50
 8006f8c:	20000f00 	.word	0x20000f00
 8006f90:	20000e60 	.word	0x20000e60
 8006f94:	080081ec 	.word	0x080081ec

08006f98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3b04      	subs	r3, #4
 8006fa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc8:	4a0c      	ldr	r2, [pc, #48]	; (8006ffc <pxPortInitialiseStack+0x64>)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3b14      	subs	r3, #20
 8006fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	3b04      	subs	r3, #4
 8006fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f06f 0202 	mvn.w	r2, #2
 8006fe6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3b20      	subs	r3, #32
 8006fec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fee:	68fb      	ldr	r3, [r7, #12]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	08007001 	.word	0x08007001

08007000 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <prvTaskExitError+0x54>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007012:	d00a      	beq.n	800702a <prvTaskExitError+0x2a>
	__asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	60fb      	str	r3, [r7, #12]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <prvTaskExitError+0x28>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60bb      	str	r3, [r7, #8]
}
 800703c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800703e:	bf00      	nop
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0fc      	beq.n	8007040 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007046:	bf00      	nop
 8007048:	bf00      	nop
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	2000000c 	.word	0x2000000c
	...

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b6:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <xPortStartScheduler+0x120>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <xPortStartScheduler+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10a      	bne.n	80070d6 <xPortStartScheduler+0x26>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070d6:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <xPortStartScheduler+0x120>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10a      	bne.n	80070f6 <xPortStartScheduler+0x46>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xPortStartScheduler+0x12c>)
 80070f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <xPortStartScheduler+0x130>)
 800711c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <xPortStartScheduler+0x134>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007124:	e009      	b.n	800713a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <xPortStartScheduler+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	4a2d      	ldr	r2, [pc, #180]	; (80071e4 <xPortStartScheduler+0x134>)
 800712e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d0ef      	beq.n	8007126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <xPortStartScheduler+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1c3 0307 	rsb	r3, r3, #7
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00a      	beq.n	8007168 <xPortStartScheduler+0xb8>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <xPortStartScheduler+0x134>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <xPortStartScheduler+0x134>)
 8007170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007172:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xPortStartScheduler+0x134>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717a:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <xPortStartScheduler+0x134>)
 800717c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007186:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <xPortStartScheduler+0x138>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <xPortStartScheduler+0x138>)
 800718c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <xPortStartScheduler+0x138>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <xPortStartScheduler+0x138>)
 8007198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800719e:	f000 f8dd 	bl	800735c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <xPortStartScheduler+0x13c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071a8:	f000 f8fc 	bl	80073a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <xPortStartScheduler+0x140>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <xPortStartScheduler+0x140>)
 80071b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071b8:	f7ff ff66 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071bc:	f7ff f852 	bl	8006264 <vTaskSwitchContext>
	prvTaskExitError();
 80071c0:	f7ff ff1e 	bl	8007000 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed00 	.word	0xe000ed00
 80071d4:	410fc271 	.word	0x410fc271
 80071d8:	410fc270 	.word	0x410fc270
 80071dc:	e000e400 	.word	0xe000e400
 80071e0:	20000f50 	.word	0x20000f50
 80071e4:	20000f54 	.word	0x20000f54
 80071e8:	e000ed20 	.word	0xe000ed20
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	e000ef34 	.word	0xe000ef34

080071f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <vPortEnterCritical+0x58>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <vPortEnterCritical+0x58>)
 8007216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <vPortEnterCritical+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10f      	bne.n	8007240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <vPortEnterCritical+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <vPortEnterCritical+0x4c>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <vPortEnterCritical+0x4a>
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000000c 	.word	0x2000000c
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <vPortExitCritical+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <vPortExitCritical+0x24>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	607b      	str	r3, [r7, #4]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <vPortExitCritical+0x50>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <vPortExitCritical+0x50>)
 8007280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <vPortExitCritical+0x42>
 800728a:	2300      	movs	r3, #0
 800728c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f383 8811 	msr	BASEPRI, r3
}
 8007294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	2000000c 	.word	0x2000000c
	...

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7fe ffc0 	bl	8006264 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007332:	f7fe fedd 	bl	80060f0 <xTaskIncrementTick>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <xPortSysTickHandler+0x40>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <vPortSetupTimerInterrupt+0x38>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <vPortSetupTimerInterrupt+0x40>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vPortSetupTimerInterrupt+0x44>)
 800737a:	3b01      	subs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e010 	.word	0xe000e010
 8007394:	e000e018 	.word	0xe000e018
 8007398:	20000000 	.word	0x20000000
 800739c:	10624dd3 	.word	0x10624dd3
 80073a0:	e000e014 	.word	0xe000e014

080073a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b4 <vPortEnableVFP+0x10>
 80073a8:	6801      	ldr	r1, [r0, #0]
 80073aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ae:	6001      	str	r1, [r0, #0]
 80073b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073b2:	bf00      	nop
 80073b4:	e000ed88 	.word	0xe000ed88

080073b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073be:	f3ef 8305 	mrs	r3, IPSR
 80073c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b0f      	cmp	r3, #15
 80073c8:	d914      	bls.n	80073f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ca:	4a17      	ldr	r2, [pc, #92]	; (8007428 <vPortValidateInterruptPriority+0x70>)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073d4:	4b15      	ldr	r3, [pc, #84]	; (800742c <vPortValidateInterruptPriority+0x74>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	7afa      	ldrb	r2, [r7, #11]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d20a      	bcs.n	80073f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073f4:	4b0e      	ldr	r3, [pc, #56]	; (8007430 <vPortValidateInterruptPriority+0x78>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073fc:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <vPortValidateInterruptPriority+0x7c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d90a      	bls.n	800741a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	603b      	str	r3, [r7, #0]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <vPortValidateInterruptPriority+0x60>
	}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	e000e3f0 	.word	0xe000e3f0
 800742c:	20000f50 	.word	0x20000f50
 8007430:	e000ed0c 	.word	0xe000ed0c
 8007434:	20000f54 	.word	0x20000f54

08007438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007444:	f7fe fd98 	bl	8005f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007448:	4b5b      	ldr	r3, [pc, #364]	; (80075b8 <pvPortMalloc+0x180>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007450:	f000 f920 	bl	8007694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007454:	4b59      	ldr	r3, [pc, #356]	; (80075bc <pvPortMalloc+0x184>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4013      	ands	r3, r2
 800745c:	2b00      	cmp	r3, #0
 800745e:	f040 8093 	bne.w	8007588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01d      	beq.n	80074a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007468:	2208      	movs	r2, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4413      	add	r3, r2
 800746e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	2b00      	cmp	r3, #0
 8007478:	d014      	beq.n	80074a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f023 0307 	bic.w	r3, r3, #7
 8007480:	3308      	adds	r3, #8
 8007482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <pvPortMalloc+0x6c>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	617b      	str	r3, [r7, #20]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d06e      	beq.n	8007588 <pvPortMalloc+0x150>
 80074aa:	4b45      	ldr	r3, [pc, #276]	; (80075c0 <pvPortMalloc+0x188>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d869      	bhi.n	8007588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074b4:	4b43      	ldr	r3, [pc, #268]	; (80075c4 <pvPortMalloc+0x18c>)
 80074b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074b8:	4b42      	ldr	r3, [pc, #264]	; (80075c4 <pvPortMalloc+0x18c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074be:	e004      	b.n	80074ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d903      	bls.n	80074dc <pvPortMalloc+0xa4>
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f1      	bne.n	80074c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <pvPortMalloc+0x180>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d050      	beq.n	8007588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2208      	movs	r2, #8
 80074ec:	4413      	add	r3, r2
 80074ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	2308      	movs	r3, #8
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	429a      	cmp	r2, r3
 8007506:	d91f      	bls.n	8007548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <pvPortMalloc+0xf8>
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	613b      	str	r3, [r7, #16]
}
 800752c:	bf00      	nop
 800752e:	e7fe      	b.n	800752e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	1ad2      	subs	r2, r2, r3
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007542:	69b8      	ldr	r0, [r7, #24]
 8007544:	f000 f908 	bl	8007758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007548:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <pvPortMalloc+0x188>)
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a1b      	ldr	r2, [pc, #108]	; (80075c0 <pvPortMalloc+0x188>)
 8007554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <pvPortMalloc+0x188>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <pvPortMalloc+0x190>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	429a      	cmp	r2, r3
 8007560:	d203      	bcs.n	800756a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <pvPortMalloc+0x188>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <pvPortMalloc+0x190>)
 8007568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	4b13      	ldr	r3, [pc, #76]	; (80075bc <pvPortMalloc+0x184>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	431a      	orrs	r2, r3
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800757e:	4b13      	ldr	r3, [pc, #76]	; (80075cc <pvPortMalloc+0x194>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	4a11      	ldr	r2, [pc, #68]	; (80075cc <pvPortMalloc+0x194>)
 8007586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007588:	f7fe fd04 	bl	8005f94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <pvPortMalloc+0x174>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60fb      	str	r3, [r7, #12]
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <pvPortMalloc+0x172>
	return pvReturn;
 80075ac:	69fb      	ldr	r3, [r7, #28]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3728      	adds	r7, #40	; 0x28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20004b60 	.word	0x20004b60
 80075bc:	20004b74 	.word	0x20004b74
 80075c0:	20004b64 	.word	0x20004b64
 80075c4:	20004b58 	.word	0x20004b58
 80075c8:	20004b68 	.word	0x20004b68
 80075cc:	20004b6c 	.word	0x20004b6c

080075d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d04d      	beq.n	800767e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075e2:	2308      	movs	r3, #8
 80075e4:	425b      	negs	r3, r3
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	4b24      	ldr	r3, [pc, #144]	; (8007688 <vPortFree+0xb8>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10a      	bne.n	8007614 <vPortFree+0x44>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60fb      	str	r3, [r7, #12]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00a      	beq.n	8007632 <vPortFree+0x62>
	__asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	60bb      	str	r3, [r7, #8]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <vPortFree+0xb8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4013      	ands	r3, r2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01e      	beq.n	800767e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11a      	bne.n	800767e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <vPortFree+0xb8>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	43db      	mvns	r3, r3
 8007652:	401a      	ands	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007658:	f7fe fc8e 	bl	8005f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <vPortFree+0xbc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4413      	add	r3, r2
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <vPortFree+0xbc>)
 8007668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f000 f874 	bl	8007758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <vPortFree+0xc0>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a06      	ldr	r2, [pc, #24]	; (8007690 <vPortFree+0xc0>)
 8007678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800767a:	f7fe fc8b 	bl	8005f94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800767e:	bf00      	nop
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20004b74 	.word	0x20004b74
 800768c:	20004b64 	.word	0x20004b64
 8007690:	20004b70 	.word	0x20004b70

08007694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800769a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800769e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076a0:	4b27      	ldr	r3, [pc, #156]	; (8007740 <prvHeapInit+0xac>)
 80076a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00c      	beq.n	80076c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3307      	adds	r3, #7
 80076b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0307 	bic.w	r3, r3, #7
 80076ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <prvHeapInit+0xac>)
 80076c4:	4413      	add	r3, r2
 80076c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076cc:	4a1d      	ldr	r2, [pc, #116]	; (8007744 <prvHeapInit+0xb0>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076d2:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <prvHeapInit+0xb0>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076e0:	2208      	movs	r2, #8
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0307 	bic.w	r3, r3, #7
 80076ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a15      	ldr	r2, [pc, #84]	; (8007748 <prvHeapInit+0xb4>)
 80076f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076f6:	4b14      	ldr	r3, [pc, #80]	; (8007748 <prvHeapInit+0xb4>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2200      	movs	r2, #0
 80076fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <prvHeapInit+0xb4>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <prvHeapInit+0xb4>)
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <prvHeapInit+0xb8>)
 8007722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4a09      	ldr	r2, [pc, #36]	; (8007750 <prvHeapInit+0xbc>)
 800772a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800772c:	4b09      	ldr	r3, [pc, #36]	; (8007754 <prvHeapInit+0xc0>)
 800772e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	20000f58 	.word	0x20000f58
 8007744:	20004b58 	.word	0x20004b58
 8007748:	20004b60 	.word	0x20004b60
 800774c:	20004b68 	.word	0x20004b68
 8007750:	20004b64 	.word	0x20004b64
 8007754:	20004b74 	.word	0x20004b74

08007758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007760:	4b28      	ldr	r3, [pc, #160]	; (8007804 <prvInsertBlockIntoFreeList+0xac>)
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e002      	b.n	800776c <prvInsertBlockIntoFreeList+0x14>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	429a      	cmp	r2, r3
 8007774:	d8f7      	bhi.n	8007766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d108      	bne.n	800779a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	441a      	add	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d118      	bne.n	80077e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b15      	ldr	r3, [pc, #84]	; (8007808 <prvInsertBlockIntoFreeList+0xb0>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d00d      	beq.n	80077d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	441a      	add	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e008      	b.n	80077e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80077d6:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <prvInsertBlockIntoFreeList+0xb0>)
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e003      	b.n	80077e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d002      	beq.n	80077f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20004b58 	.word	0x20004b58
 8007808:	20004b60 	.word	0x20004b60

0800780c <__errno>:
 800780c:	4b01      	ldr	r3, [pc, #4]	; (8007814 <__errno+0x8>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000010 	.word	0x20000010

08007818 <__libc_init_array>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4d0d      	ldr	r5, [pc, #52]	; (8007850 <__libc_init_array+0x38>)
 800781c:	4c0d      	ldr	r4, [pc, #52]	; (8007854 <__libc_init_array+0x3c>)
 800781e:	1b64      	subs	r4, r4, r5
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	2600      	movs	r6, #0
 8007824:	42a6      	cmp	r6, r4
 8007826:	d109      	bne.n	800783c <__libc_init_array+0x24>
 8007828:	4d0b      	ldr	r5, [pc, #44]	; (8007858 <__libc_init_array+0x40>)
 800782a:	4c0c      	ldr	r4, [pc, #48]	; (800785c <__libc_init_array+0x44>)
 800782c:	f000 fc8e 	bl	800814c <_init>
 8007830:	1b64      	subs	r4, r4, r5
 8007832:	10a4      	asrs	r4, r4, #2
 8007834:	2600      	movs	r6, #0
 8007836:	42a6      	cmp	r6, r4
 8007838:	d105      	bne.n	8007846 <__libc_init_array+0x2e>
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007840:	4798      	blx	r3
 8007842:	3601      	adds	r6, #1
 8007844:	e7ee      	b.n	8007824 <__libc_init_array+0xc>
 8007846:	f855 3b04 	ldr.w	r3, [r5], #4
 800784a:	4798      	blx	r3
 800784c:	3601      	adds	r6, #1
 800784e:	e7f2      	b.n	8007836 <__libc_init_array+0x1e>
 8007850:	080082d8 	.word	0x080082d8
 8007854:	080082d8 	.word	0x080082d8
 8007858:	080082d8 	.word	0x080082d8
 800785c:	080082dc 	.word	0x080082dc

08007860 <memcpy>:
 8007860:	440a      	add	r2, r1
 8007862:	4291      	cmp	r1, r2
 8007864:	f100 33ff 	add.w	r3, r0, #4294967295
 8007868:	d100      	bne.n	800786c <memcpy+0xc>
 800786a:	4770      	bx	lr
 800786c:	b510      	push	{r4, lr}
 800786e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007876:	4291      	cmp	r1, r2
 8007878:	d1f9      	bne.n	800786e <memcpy+0xe>
 800787a:	bd10      	pop	{r4, pc}

0800787c <memset>:
 800787c:	4402      	add	r2, r0
 800787e:	4603      	mov	r3, r0
 8007880:	4293      	cmp	r3, r2
 8007882:	d100      	bne.n	8007886 <memset+0xa>
 8007884:	4770      	bx	lr
 8007886:	f803 1b01 	strb.w	r1, [r3], #1
 800788a:	e7f9      	b.n	8007880 <memset+0x4>

0800788c <siprintf>:
 800788c:	b40e      	push	{r1, r2, r3}
 800788e:	b500      	push	{lr}
 8007890:	b09c      	sub	sp, #112	; 0x70
 8007892:	ab1d      	add	r3, sp, #116	; 0x74
 8007894:	9002      	str	r0, [sp, #8]
 8007896:	9006      	str	r0, [sp, #24]
 8007898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <siprintf+0x38>)
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <siprintf+0x3c>)
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	f000 f868 	bl	8007984 <_svfiprintf_r>
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	b01c      	add	sp, #112	; 0x70
 80078bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c0:	b003      	add	sp, #12
 80078c2:	4770      	bx	lr
 80078c4:	20000010 	.word	0x20000010
 80078c8:	ffff0208 	.word	0xffff0208

080078cc <__ssputs_r>:
 80078cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	688e      	ldr	r6, [r1, #8]
 80078d2:	429e      	cmp	r6, r3
 80078d4:	4682      	mov	sl, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4690      	mov	r8, r2
 80078da:	461f      	mov	r7, r3
 80078dc:	d838      	bhi.n	8007950 <__ssputs_r+0x84>
 80078de:	898a      	ldrh	r2, [r1, #12]
 80078e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078e4:	d032      	beq.n	800794c <__ssputs_r+0x80>
 80078e6:	6825      	ldr	r5, [r4, #0]
 80078e8:	6909      	ldr	r1, [r1, #16]
 80078ea:	eba5 0901 	sub.w	r9, r5, r1
 80078ee:	6965      	ldr	r5, [r4, #20]
 80078f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f8:	3301      	adds	r3, #1
 80078fa:	444b      	add	r3, r9
 80078fc:	106d      	asrs	r5, r5, #1
 80078fe:	429d      	cmp	r5, r3
 8007900:	bf38      	it	cc
 8007902:	461d      	movcc	r5, r3
 8007904:	0553      	lsls	r3, r2, #21
 8007906:	d531      	bpl.n	800796c <__ssputs_r+0xa0>
 8007908:	4629      	mov	r1, r5
 800790a:	f000 fb55 	bl	8007fb8 <_malloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	b950      	cbnz	r0, 8007928 <__ssputs_r+0x5c>
 8007912:	230c      	movs	r3, #12
 8007914:	f8ca 3000 	str.w	r3, [sl]
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007928:	6921      	ldr	r1, [r4, #16]
 800792a:	464a      	mov	r2, r9
 800792c:	f7ff ff98 	bl	8007860 <memcpy>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	6126      	str	r6, [r4, #16]
 800793e:	6165      	str	r5, [r4, #20]
 8007940:	444e      	add	r6, r9
 8007942:	eba5 0509 	sub.w	r5, r5, r9
 8007946:	6026      	str	r6, [r4, #0]
 8007948:	60a5      	str	r5, [r4, #8]
 800794a:	463e      	mov	r6, r7
 800794c:	42be      	cmp	r6, r7
 800794e:	d900      	bls.n	8007952 <__ssputs_r+0x86>
 8007950:	463e      	mov	r6, r7
 8007952:	6820      	ldr	r0, [r4, #0]
 8007954:	4632      	mov	r2, r6
 8007956:	4641      	mov	r1, r8
 8007958:	f000 faa8 	bl	8007eac <memmove>
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	1b9b      	subs	r3, r3, r6
 8007960:	60a3      	str	r3, [r4, #8]
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	4433      	add	r3, r6
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e7db      	b.n	8007924 <__ssputs_r+0x58>
 800796c:	462a      	mov	r2, r5
 800796e:	f000 fb97 	bl	80080a0 <_realloc_r>
 8007972:	4606      	mov	r6, r0
 8007974:	2800      	cmp	r0, #0
 8007976:	d1e1      	bne.n	800793c <__ssputs_r+0x70>
 8007978:	6921      	ldr	r1, [r4, #16]
 800797a:	4650      	mov	r0, sl
 800797c:	f000 fab0 	bl	8007ee0 <_free_r>
 8007980:	e7c7      	b.n	8007912 <__ssputs_r+0x46>
	...

08007984 <_svfiprintf_r>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	4698      	mov	r8, r3
 800798a:	898b      	ldrh	r3, [r1, #12]
 800798c:	061b      	lsls	r3, r3, #24
 800798e:	b09d      	sub	sp, #116	; 0x74
 8007990:	4607      	mov	r7, r0
 8007992:	460d      	mov	r5, r1
 8007994:	4614      	mov	r4, r2
 8007996:	d50e      	bpl.n	80079b6 <_svfiprintf_r+0x32>
 8007998:	690b      	ldr	r3, [r1, #16]
 800799a:	b963      	cbnz	r3, 80079b6 <_svfiprintf_r+0x32>
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	f000 fb0b 	bl	8007fb8 <_malloc_r>
 80079a2:	6028      	str	r0, [r5, #0]
 80079a4:	6128      	str	r0, [r5, #16]
 80079a6:	b920      	cbnz	r0, 80079b2 <_svfiprintf_r+0x2e>
 80079a8:	230c      	movs	r3, #12
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e0d1      	b.n	8007b56 <_svfiprintf_r+0x1d2>
 80079b2:	2340      	movs	r3, #64	; 0x40
 80079b4:	616b      	str	r3, [r5, #20]
 80079b6:	2300      	movs	r3, #0
 80079b8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ba:	2320      	movs	r3, #32
 80079bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079c4:	2330      	movs	r3, #48	; 0x30
 80079c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b70 <_svfiprintf_r+0x1ec>
 80079ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ce:	f04f 0901 	mov.w	r9, #1
 80079d2:	4623      	mov	r3, r4
 80079d4:	469a      	mov	sl, r3
 80079d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079da:	b10a      	cbz	r2, 80079e0 <_svfiprintf_r+0x5c>
 80079dc:	2a25      	cmp	r2, #37	; 0x25
 80079de:	d1f9      	bne.n	80079d4 <_svfiprintf_r+0x50>
 80079e0:	ebba 0b04 	subs.w	fp, sl, r4
 80079e4:	d00b      	beq.n	80079fe <_svfiprintf_r+0x7a>
 80079e6:	465b      	mov	r3, fp
 80079e8:	4622      	mov	r2, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	4638      	mov	r0, r7
 80079ee:	f7ff ff6d 	bl	80078cc <__ssputs_r>
 80079f2:	3001      	adds	r0, #1
 80079f4:	f000 80aa 	beq.w	8007b4c <_svfiprintf_r+0x1c8>
 80079f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079fa:	445a      	add	r2, fp
 80079fc:	9209      	str	r2, [sp, #36]	; 0x24
 80079fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 80a2 	beq.w	8007b4c <_svfiprintf_r+0x1c8>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a12:	f10a 0a01 	add.w	sl, sl, #1
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8007a20:	4654      	mov	r4, sl
 8007a22:	2205      	movs	r2, #5
 8007a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a28:	4851      	ldr	r0, [pc, #324]	; (8007b70 <_svfiprintf_r+0x1ec>)
 8007a2a:	f7f8 fbd9 	bl	80001e0 <memchr>
 8007a2e:	9a04      	ldr	r2, [sp, #16]
 8007a30:	b9d8      	cbnz	r0, 8007a6a <_svfiprintf_r+0xe6>
 8007a32:	06d0      	lsls	r0, r2, #27
 8007a34:	bf44      	itt	mi
 8007a36:	2320      	movmi	r3, #32
 8007a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3c:	0711      	lsls	r1, r2, #28
 8007a3e:	bf44      	itt	mi
 8007a40:	232b      	movmi	r3, #43	; 0x2b
 8007a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a46:	f89a 3000 	ldrb.w	r3, [sl]
 8007a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a4c:	d015      	beq.n	8007a7a <_svfiprintf_r+0xf6>
 8007a4e:	9a07      	ldr	r2, [sp, #28]
 8007a50:	4654      	mov	r4, sl
 8007a52:	2000      	movs	r0, #0
 8007a54:	f04f 0c0a 	mov.w	ip, #10
 8007a58:	4621      	mov	r1, r4
 8007a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a5e:	3b30      	subs	r3, #48	; 0x30
 8007a60:	2b09      	cmp	r3, #9
 8007a62:	d94e      	bls.n	8007b02 <_svfiprintf_r+0x17e>
 8007a64:	b1b0      	cbz	r0, 8007a94 <_svfiprintf_r+0x110>
 8007a66:	9207      	str	r2, [sp, #28]
 8007a68:	e014      	b.n	8007a94 <_svfiprintf_r+0x110>
 8007a6a:	eba0 0308 	sub.w	r3, r0, r8
 8007a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a72:	4313      	orrs	r3, r2
 8007a74:	9304      	str	r3, [sp, #16]
 8007a76:	46a2      	mov	sl, r4
 8007a78:	e7d2      	b.n	8007a20 <_svfiprintf_r+0x9c>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	9103      	str	r1, [sp, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bfbb      	ittet	lt
 8007a86:	425b      	neglt	r3, r3
 8007a88:	f042 0202 	orrlt.w	r2, r2, #2
 8007a8c:	9307      	strge	r3, [sp, #28]
 8007a8e:	9307      	strlt	r3, [sp, #28]
 8007a90:	bfb8      	it	lt
 8007a92:	9204      	strlt	r2, [sp, #16]
 8007a94:	7823      	ldrb	r3, [r4, #0]
 8007a96:	2b2e      	cmp	r3, #46	; 0x2e
 8007a98:	d10c      	bne.n	8007ab4 <_svfiprintf_r+0x130>
 8007a9a:	7863      	ldrb	r3, [r4, #1]
 8007a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a9e:	d135      	bne.n	8007b0c <_svfiprintf_r+0x188>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9203      	str	r2, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bfb8      	it	lt
 8007aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab0:	3402      	adds	r4, #2
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b80 <_svfiprintf_r+0x1fc>
 8007ab8:	7821      	ldrb	r1, [r4, #0]
 8007aba:	2203      	movs	r2, #3
 8007abc:	4650      	mov	r0, sl
 8007abe:	f7f8 fb8f 	bl	80001e0 <memchr>
 8007ac2:	b140      	cbz	r0, 8007ad6 <_svfiprintf_r+0x152>
 8007ac4:	2340      	movs	r3, #64	; 0x40
 8007ac6:	eba0 000a 	sub.w	r0, r0, sl
 8007aca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	4303      	orrs	r3, r0
 8007ad2:	3401      	adds	r4, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ada:	4826      	ldr	r0, [pc, #152]	; (8007b74 <_svfiprintf_r+0x1f0>)
 8007adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	f7f8 fb7d 	bl	80001e0 <memchr>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d038      	beq.n	8007b5c <_svfiprintf_r+0x1d8>
 8007aea:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <_svfiprintf_r+0x1f4>)
 8007aec:	bb1b      	cbnz	r3, 8007b36 <_svfiprintf_r+0x1b2>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	3308      	adds	r3, #8
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afc:	4433      	add	r3, r6
 8007afe:	9309      	str	r3, [sp, #36]	; 0x24
 8007b00:	e767      	b.n	80079d2 <_svfiprintf_r+0x4e>
 8007b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b06:	460c      	mov	r4, r1
 8007b08:	2001      	movs	r0, #1
 8007b0a:	e7a5      	b.n	8007a58 <_svfiprintf_r+0xd4>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	3401      	adds	r4, #1
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	4619      	mov	r1, r3
 8007b14:	f04f 0c0a 	mov.w	ip, #10
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1e:	3a30      	subs	r2, #48	; 0x30
 8007b20:	2a09      	cmp	r2, #9
 8007b22:	d903      	bls.n	8007b2c <_svfiprintf_r+0x1a8>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0c5      	beq.n	8007ab4 <_svfiprintf_r+0x130>
 8007b28:	9105      	str	r1, [sp, #20]
 8007b2a:	e7c3      	b.n	8007ab4 <_svfiprintf_r+0x130>
 8007b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b30:	4604      	mov	r4, r0
 8007b32:	2301      	movs	r3, #1
 8007b34:	e7f0      	b.n	8007b18 <_svfiprintf_r+0x194>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <_svfiprintf_r+0x1f8>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4638      	mov	r0, r7
 8007b42:	f3af 8000 	nop.w
 8007b46:	1c42      	adds	r2, r0, #1
 8007b48:	4606      	mov	r6, r0
 8007b4a:	d1d6      	bne.n	8007afa <_svfiprintf_r+0x176>
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	065b      	lsls	r3, r3, #25
 8007b50:	f53f af2c 	bmi.w	80079ac <_svfiprintf_r+0x28>
 8007b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b56:	b01d      	add	sp, #116	; 0x74
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	462a      	mov	r2, r5
 8007b62:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <_svfiprintf_r+0x1f8>)
 8007b64:	a904      	add	r1, sp, #16
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f87a 	bl	8007c60 <_printf_i>
 8007b6c:	e7eb      	b.n	8007b46 <_svfiprintf_r+0x1c2>
 8007b6e:	bf00      	nop
 8007b70:	0800829c 	.word	0x0800829c
 8007b74:	080082a6 	.word	0x080082a6
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	080078cd 	.word	0x080078cd
 8007b80:	080082a2 	.word	0x080082a2

08007b84 <_printf_common>:
 8007b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b88:	4616      	mov	r6, r2
 8007b8a:	4699      	mov	r9, r3
 8007b8c:	688a      	ldr	r2, [r1, #8]
 8007b8e:	690b      	ldr	r3, [r1, #16]
 8007b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bfb8      	it	lt
 8007b98:	4613      	movlt	r3, r2
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b10a      	cbz	r2, 8007baa <_printf_common+0x26>
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	6033      	str	r3, [r6, #0]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	0699      	lsls	r1, r3, #26
 8007bae:	bf42      	ittt	mi
 8007bb0:	6833      	ldrmi	r3, [r6, #0]
 8007bb2:	3302      	addmi	r3, #2
 8007bb4:	6033      	strmi	r3, [r6, #0]
 8007bb6:	6825      	ldr	r5, [r4, #0]
 8007bb8:	f015 0506 	ands.w	r5, r5, #6
 8007bbc:	d106      	bne.n	8007bcc <_printf_common+0x48>
 8007bbe:	f104 0a19 	add.w	sl, r4, #25
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	6832      	ldr	r2, [r6, #0]
 8007bc6:	1a9b      	subs	r3, r3, r2
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dc26      	bgt.n	8007c1a <_printf_common+0x96>
 8007bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bd0:	1e13      	subs	r3, r2, #0
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	bf18      	it	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	0692      	lsls	r2, r2, #26
 8007bda:	d42b      	bmi.n	8007c34 <_printf_common+0xb0>
 8007bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007be0:	4649      	mov	r1, r9
 8007be2:	4638      	mov	r0, r7
 8007be4:	47c0      	blx	r8
 8007be6:	3001      	adds	r0, #1
 8007be8:	d01e      	beq.n	8007c28 <_printf_common+0xa4>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	68e5      	ldr	r5, [r4, #12]
 8007bee:	6832      	ldr	r2, [r6, #0]
 8007bf0:	f003 0306 	and.w	r3, r3, #6
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	bf08      	it	eq
 8007bf8:	1aad      	subeq	r5, r5, r2
 8007bfa:	68a3      	ldr	r3, [r4, #8]
 8007bfc:	6922      	ldr	r2, [r4, #16]
 8007bfe:	bf0c      	ite	eq
 8007c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c04:	2500      	movne	r5, #0
 8007c06:	4293      	cmp	r3, r2
 8007c08:	bfc4      	itt	gt
 8007c0a:	1a9b      	subgt	r3, r3, r2
 8007c0c:	18ed      	addgt	r5, r5, r3
 8007c0e:	2600      	movs	r6, #0
 8007c10:	341a      	adds	r4, #26
 8007c12:	42b5      	cmp	r5, r6
 8007c14:	d11a      	bne.n	8007c4c <_printf_common+0xc8>
 8007c16:	2000      	movs	r0, #0
 8007c18:	e008      	b.n	8007c2c <_printf_common+0xa8>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4638      	mov	r0, r7
 8007c22:	47c0      	blx	r8
 8007c24:	3001      	adds	r0, #1
 8007c26:	d103      	bne.n	8007c30 <_printf_common+0xac>
 8007c28:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c30:	3501      	adds	r5, #1
 8007c32:	e7c6      	b.n	8007bc2 <_printf_common+0x3e>
 8007c34:	18e1      	adds	r1, r4, r3
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	2030      	movs	r0, #48	; 0x30
 8007c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c3e:	4422      	add	r2, r4
 8007c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c48:	3302      	adds	r3, #2
 8007c4a:	e7c7      	b.n	8007bdc <_printf_common+0x58>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4622      	mov	r2, r4
 8007c50:	4649      	mov	r1, r9
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0e6      	beq.n	8007c28 <_printf_common+0xa4>
 8007c5a:	3601      	adds	r6, #1
 8007c5c:	e7d9      	b.n	8007c12 <_printf_common+0x8e>
	...

08007c60 <_printf_i>:
 8007c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	7e0f      	ldrb	r7, [r1, #24]
 8007c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c68:	2f78      	cmp	r7, #120	; 0x78
 8007c6a:	4691      	mov	r9, r2
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	469a      	mov	sl, r3
 8007c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c76:	d807      	bhi.n	8007c88 <_printf_i+0x28>
 8007c78:	2f62      	cmp	r7, #98	; 0x62
 8007c7a:	d80a      	bhi.n	8007c92 <_printf_i+0x32>
 8007c7c:	2f00      	cmp	r7, #0
 8007c7e:	f000 80d8 	beq.w	8007e32 <_printf_i+0x1d2>
 8007c82:	2f58      	cmp	r7, #88	; 0x58
 8007c84:	f000 80a3 	beq.w	8007dce <_printf_i+0x16e>
 8007c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c90:	e03a      	b.n	8007d08 <_printf_i+0xa8>
 8007c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c96:	2b15      	cmp	r3, #21
 8007c98:	d8f6      	bhi.n	8007c88 <_printf_i+0x28>
 8007c9a:	a101      	add	r1, pc, #4	; (adr r1, 8007ca0 <_printf_i+0x40>)
 8007c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007c89 	.word	0x08007c89
 8007cac:	08007c89 	.word	0x08007c89
 8007cb0:	08007c89 	.word	0x08007c89
 8007cb4:	08007c89 	.word	0x08007c89
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007c89 	.word	0x08007c89
 8007cc0:	08007c89 	.word	0x08007c89
 8007cc4:	08007c89 	.word	0x08007c89
 8007cc8:	08007c89 	.word	0x08007c89
 8007ccc:	08007e19 	.word	0x08007e19
 8007cd0:	08007d3d 	.word	0x08007d3d
 8007cd4:	08007dfb 	.word	0x08007dfb
 8007cd8:	08007c89 	.word	0x08007c89
 8007cdc:	08007c89 	.word	0x08007c89
 8007ce0:	08007e3b 	.word	0x08007e3b
 8007ce4:	08007c89 	.word	0x08007c89
 8007ce8:	08007d3d 	.word	0x08007d3d
 8007cec:	08007c89 	.word	0x08007c89
 8007cf0:	08007c89 	.word	0x08007c89
 8007cf4:	08007e03 	.word	0x08007e03
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	1d1a      	adds	r2, r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e0a3      	b.n	8007e54 <_printf_i+0x1f4>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	6829      	ldr	r1, [r5, #0]
 8007d10:	0606      	lsls	r6, r0, #24
 8007d12:	f101 0304 	add.w	r3, r1, #4
 8007d16:	d50a      	bpl.n	8007d2e <_printf_i+0xce>
 8007d18:	680e      	ldr	r6, [r1, #0]
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	2e00      	cmp	r6, #0
 8007d1e:	da03      	bge.n	8007d28 <_printf_i+0xc8>
 8007d20:	232d      	movs	r3, #45	; 0x2d
 8007d22:	4276      	negs	r6, r6
 8007d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d28:	485e      	ldr	r0, [pc, #376]	; (8007ea4 <_printf_i+0x244>)
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	e019      	b.n	8007d62 <_printf_i+0x102>
 8007d2e:	680e      	ldr	r6, [r1, #0]
 8007d30:	602b      	str	r3, [r5, #0]
 8007d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d36:	bf18      	it	ne
 8007d38:	b236      	sxthne	r6, r6
 8007d3a:	e7ef      	b.n	8007d1c <_printf_i+0xbc>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	6029      	str	r1, [r5, #0]
 8007d44:	0601      	lsls	r1, r0, #24
 8007d46:	d501      	bpl.n	8007d4c <_printf_i+0xec>
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <_printf_i+0xf2>
 8007d4c:	0646      	lsls	r6, r0, #25
 8007d4e:	d5fb      	bpl.n	8007d48 <_printf_i+0xe8>
 8007d50:	881e      	ldrh	r6, [r3, #0]
 8007d52:	4854      	ldr	r0, [pc, #336]	; (8007ea4 <_printf_i+0x244>)
 8007d54:	2f6f      	cmp	r7, #111	; 0x6f
 8007d56:	bf0c      	ite	eq
 8007d58:	2308      	moveq	r3, #8
 8007d5a:	230a      	movne	r3, #10
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d62:	6865      	ldr	r5, [r4, #4]
 8007d64:	60a5      	str	r5, [r4, #8]
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	bfa2      	ittt	ge
 8007d6a:	6821      	ldrge	r1, [r4, #0]
 8007d6c:	f021 0104 	bicge.w	r1, r1, #4
 8007d70:	6021      	strge	r1, [r4, #0]
 8007d72:	b90e      	cbnz	r6, 8007d78 <_printf_i+0x118>
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	d04d      	beq.n	8007e14 <_printf_i+0x1b4>
 8007d78:	4615      	mov	r5, r2
 8007d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d82:	5dc7      	ldrb	r7, [r0, r7]
 8007d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d88:	4637      	mov	r7, r6
 8007d8a:	42bb      	cmp	r3, r7
 8007d8c:	460e      	mov	r6, r1
 8007d8e:	d9f4      	bls.n	8007d7a <_printf_i+0x11a>
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d10b      	bne.n	8007dac <_printf_i+0x14c>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	07de      	lsls	r6, r3, #31
 8007d98:	d508      	bpl.n	8007dac <_printf_i+0x14c>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	6861      	ldr	r1, [r4, #4]
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	bfde      	ittt	le
 8007da2:	2330      	movle	r3, #48	; 0x30
 8007da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007da8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dac:	1b52      	subs	r2, r2, r5
 8007dae:	6122      	str	r2, [r4, #16]
 8007db0:	f8cd a000 	str.w	sl, [sp]
 8007db4:	464b      	mov	r3, r9
 8007db6:	aa03      	add	r2, sp, #12
 8007db8:	4621      	mov	r1, r4
 8007dba:	4640      	mov	r0, r8
 8007dbc:	f7ff fee2 	bl	8007b84 <_printf_common>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d14c      	bne.n	8007e5e <_printf_i+0x1fe>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	b004      	add	sp, #16
 8007dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dce:	4835      	ldr	r0, [pc, #212]	; (8007ea4 <_printf_i+0x244>)
 8007dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dd4:	6829      	ldr	r1, [r5, #0]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ddc:	6029      	str	r1, [r5, #0]
 8007dde:	061d      	lsls	r5, r3, #24
 8007de0:	d514      	bpl.n	8007e0c <_printf_i+0x1ac>
 8007de2:	07df      	lsls	r7, r3, #31
 8007de4:	bf44      	itt	mi
 8007de6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dea:	6023      	strmi	r3, [r4, #0]
 8007dec:	b91e      	cbnz	r6, 8007df6 <_printf_i+0x196>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	f023 0320 	bic.w	r3, r3, #32
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	2310      	movs	r3, #16
 8007df8:	e7b0      	b.n	8007d5c <_printf_i+0xfc>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	f043 0320 	orr.w	r3, r3, #32
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	2378      	movs	r3, #120	; 0x78
 8007e04:	4828      	ldr	r0, [pc, #160]	; (8007ea8 <_printf_i+0x248>)
 8007e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e0a:	e7e3      	b.n	8007dd4 <_printf_i+0x174>
 8007e0c:	0659      	lsls	r1, r3, #25
 8007e0e:	bf48      	it	mi
 8007e10:	b2b6      	uxthmi	r6, r6
 8007e12:	e7e6      	b.n	8007de2 <_printf_i+0x182>
 8007e14:	4615      	mov	r5, r2
 8007e16:	e7bb      	b.n	8007d90 <_printf_i+0x130>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	6826      	ldr	r6, [r4, #0]
 8007e1c:	6961      	ldr	r1, [r4, #20]
 8007e1e:	1d18      	adds	r0, r3, #4
 8007e20:	6028      	str	r0, [r5, #0]
 8007e22:	0635      	lsls	r5, r6, #24
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0x1cc>
 8007e28:	6019      	str	r1, [r3, #0]
 8007e2a:	e002      	b.n	8007e32 <_printf_i+0x1d2>
 8007e2c:	0670      	lsls	r0, r6, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0x1c8>
 8007e30:	8019      	strh	r1, [r3, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	6123      	str	r3, [r4, #16]
 8007e36:	4615      	mov	r5, r2
 8007e38:	e7ba      	b.n	8007db0 <_printf_i+0x150>
 8007e3a:	682b      	ldr	r3, [r5, #0]
 8007e3c:	1d1a      	adds	r2, r3, #4
 8007e3e:	602a      	str	r2, [r5, #0]
 8007e40:	681d      	ldr	r5, [r3, #0]
 8007e42:	6862      	ldr	r2, [r4, #4]
 8007e44:	2100      	movs	r1, #0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f7f8 f9ca 	bl	80001e0 <memchr>
 8007e4c:	b108      	cbz	r0, 8007e52 <_printf_i+0x1f2>
 8007e4e:	1b40      	subs	r0, r0, r5
 8007e50:	6060      	str	r0, [r4, #4]
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	6123      	str	r3, [r4, #16]
 8007e56:	2300      	movs	r3, #0
 8007e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5c:	e7a8      	b.n	8007db0 <_printf_i+0x150>
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	462a      	mov	r2, r5
 8007e62:	4649      	mov	r1, r9
 8007e64:	4640      	mov	r0, r8
 8007e66:	47d0      	blx	sl
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d0ab      	beq.n	8007dc4 <_printf_i+0x164>
 8007e6c:	6823      	ldr	r3, [r4, #0]
 8007e6e:	079b      	lsls	r3, r3, #30
 8007e70:	d413      	bmi.n	8007e9a <_printf_i+0x23a>
 8007e72:	68e0      	ldr	r0, [r4, #12]
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	4298      	cmp	r0, r3
 8007e78:	bfb8      	it	lt
 8007e7a:	4618      	movlt	r0, r3
 8007e7c:	e7a4      	b.n	8007dc8 <_printf_i+0x168>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4632      	mov	r2, r6
 8007e82:	4649      	mov	r1, r9
 8007e84:	4640      	mov	r0, r8
 8007e86:	47d0      	blx	sl
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d09b      	beq.n	8007dc4 <_printf_i+0x164>
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	9903      	ldr	r1, [sp, #12]
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dcf2      	bgt.n	8007e7e <_printf_i+0x21e>
 8007e98:	e7eb      	b.n	8007e72 <_printf_i+0x212>
 8007e9a:	2500      	movs	r5, #0
 8007e9c:	f104 0619 	add.w	r6, r4, #25
 8007ea0:	e7f5      	b.n	8007e8e <_printf_i+0x22e>
 8007ea2:	bf00      	nop
 8007ea4:	080082ad 	.word	0x080082ad
 8007ea8:	080082be 	.word	0x080082be

08007eac <memmove>:
 8007eac:	4288      	cmp	r0, r1
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	eb01 0402 	add.w	r4, r1, r2
 8007eb4:	d902      	bls.n	8007ebc <memmove+0x10>
 8007eb6:	4284      	cmp	r4, r0
 8007eb8:	4623      	mov	r3, r4
 8007eba:	d807      	bhi.n	8007ecc <memmove+0x20>
 8007ebc:	1e43      	subs	r3, r0, #1
 8007ebe:	42a1      	cmp	r1, r4
 8007ec0:	d008      	beq.n	8007ed4 <memmove+0x28>
 8007ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007eca:	e7f8      	b.n	8007ebe <memmove+0x12>
 8007ecc:	4402      	add	r2, r0
 8007ece:	4601      	mov	r1, r0
 8007ed0:	428a      	cmp	r2, r1
 8007ed2:	d100      	bne.n	8007ed6 <memmove+0x2a>
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ede:	e7f7      	b.n	8007ed0 <memmove+0x24>

08007ee0 <_free_r>:
 8007ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ee2:	2900      	cmp	r1, #0
 8007ee4:	d044      	beq.n	8007f70 <_free_r+0x90>
 8007ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eea:	9001      	str	r0, [sp, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f1a1 0404 	sub.w	r4, r1, #4
 8007ef2:	bfb8      	it	lt
 8007ef4:	18e4      	addlt	r4, r4, r3
 8007ef6:	f000 f913 	bl	8008120 <__malloc_lock>
 8007efa:	4a1e      	ldr	r2, [pc, #120]	; (8007f74 <_free_r+0x94>)
 8007efc:	9801      	ldr	r0, [sp, #4]
 8007efe:	6813      	ldr	r3, [r2, #0]
 8007f00:	b933      	cbnz	r3, 8007f10 <_free_r+0x30>
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	6014      	str	r4, [r2, #0]
 8007f06:	b003      	add	sp, #12
 8007f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f0c:	f000 b90e 	b.w	800812c <__malloc_unlock>
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d908      	bls.n	8007f26 <_free_r+0x46>
 8007f14:	6825      	ldr	r5, [r4, #0]
 8007f16:	1961      	adds	r1, r4, r5
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf01      	itttt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	1949      	addeq	r1, r1, r5
 8007f22:	6021      	streq	r1, [r4, #0]
 8007f24:	e7ed      	b.n	8007f02 <_free_r+0x22>
 8007f26:	461a      	mov	r2, r3
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	b10b      	cbz	r3, 8007f30 <_free_r+0x50>
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d9fa      	bls.n	8007f26 <_free_r+0x46>
 8007f30:	6811      	ldr	r1, [r2, #0]
 8007f32:	1855      	adds	r5, r2, r1
 8007f34:	42a5      	cmp	r5, r4
 8007f36:	d10b      	bne.n	8007f50 <_free_r+0x70>
 8007f38:	6824      	ldr	r4, [r4, #0]
 8007f3a:	4421      	add	r1, r4
 8007f3c:	1854      	adds	r4, r2, r1
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	6011      	str	r1, [r2, #0]
 8007f42:	d1e0      	bne.n	8007f06 <_free_r+0x26>
 8007f44:	681c      	ldr	r4, [r3, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	6053      	str	r3, [r2, #4]
 8007f4a:	4421      	add	r1, r4
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	e7da      	b.n	8007f06 <_free_r+0x26>
 8007f50:	d902      	bls.n	8007f58 <_free_r+0x78>
 8007f52:	230c      	movs	r3, #12
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	e7d6      	b.n	8007f06 <_free_r+0x26>
 8007f58:	6825      	ldr	r5, [r4, #0]
 8007f5a:	1961      	adds	r1, r4, r5
 8007f5c:	428b      	cmp	r3, r1
 8007f5e:	bf04      	itt	eq
 8007f60:	6819      	ldreq	r1, [r3, #0]
 8007f62:	685b      	ldreq	r3, [r3, #4]
 8007f64:	6063      	str	r3, [r4, #4]
 8007f66:	bf04      	itt	eq
 8007f68:	1949      	addeq	r1, r1, r5
 8007f6a:	6021      	streq	r1, [r4, #0]
 8007f6c:	6054      	str	r4, [r2, #4]
 8007f6e:	e7ca      	b.n	8007f06 <_free_r+0x26>
 8007f70:	b003      	add	sp, #12
 8007f72:	bd30      	pop	{r4, r5, pc}
 8007f74:	20004b78 	.word	0x20004b78

08007f78 <sbrk_aligned>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	4e0e      	ldr	r6, [pc, #56]	; (8007fb4 <sbrk_aligned+0x3c>)
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	6831      	ldr	r1, [r6, #0]
 8007f80:	4605      	mov	r5, r0
 8007f82:	b911      	cbnz	r1, 8007f8a <sbrk_aligned+0x12>
 8007f84:	f000 f8bc 	bl	8008100 <_sbrk_r>
 8007f88:	6030      	str	r0, [r6, #0]
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f000 f8b7 	bl	8008100 <_sbrk_r>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	d00a      	beq.n	8007fac <sbrk_aligned+0x34>
 8007f96:	1cc4      	adds	r4, r0, #3
 8007f98:	f024 0403 	bic.w	r4, r4, #3
 8007f9c:	42a0      	cmp	r0, r4
 8007f9e:	d007      	beq.n	8007fb0 <sbrk_aligned+0x38>
 8007fa0:	1a21      	subs	r1, r4, r0
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f8ac 	bl	8008100 <_sbrk_r>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d101      	bne.n	8007fb0 <sbrk_aligned+0x38>
 8007fac:	f04f 34ff 	mov.w	r4, #4294967295
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	bd70      	pop	{r4, r5, r6, pc}
 8007fb4:	20004b7c 	.word	0x20004b7c

08007fb8 <_malloc_r>:
 8007fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbc:	1ccd      	adds	r5, r1, #3
 8007fbe:	f025 0503 	bic.w	r5, r5, #3
 8007fc2:	3508      	adds	r5, #8
 8007fc4:	2d0c      	cmp	r5, #12
 8007fc6:	bf38      	it	cc
 8007fc8:	250c      	movcc	r5, #12
 8007fca:	2d00      	cmp	r5, #0
 8007fcc:	4607      	mov	r7, r0
 8007fce:	db01      	blt.n	8007fd4 <_malloc_r+0x1c>
 8007fd0:	42a9      	cmp	r1, r5
 8007fd2:	d905      	bls.n	8007fe0 <_malloc_r+0x28>
 8007fd4:	230c      	movs	r3, #12
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	2600      	movs	r6, #0
 8007fda:	4630      	mov	r0, r6
 8007fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe0:	4e2e      	ldr	r6, [pc, #184]	; (800809c <_malloc_r+0xe4>)
 8007fe2:	f000 f89d 	bl	8008120 <__malloc_lock>
 8007fe6:	6833      	ldr	r3, [r6, #0]
 8007fe8:	461c      	mov	r4, r3
 8007fea:	bb34      	cbnz	r4, 800803a <_malloc_r+0x82>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f7ff ffc2 	bl	8007f78 <sbrk_aligned>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	d14d      	bne.n	8008096 <_malloc_r+0xde>
 8007ffa:	6834      	ldr	r4, [r6, #0]
 8007ffc:	4626      	mov	r6, r4
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	d140      	bne.n	8008084 <_malloc_r+0xcc>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	4631      	mov	r1, r6
 8008006:	4638      	mov	r0, r7
 8008008:	eb04 0803 	add.w	r8, r4, r3
 800800c:	f000 f878 	bl	8008100 <_sbrk_r>
 8008010:	4580      	cmp	r8, r0
 8008012:	d13a      	bne.n	800808a <_malloc_r+0xd2>
 8008014:	6821      	ldr	r1, [r4, #0]
 8008016:	3503      	adds	r5, #3
 8008018:	1a6d      	subs	r5, r5, r1
 800801a:	f025 0503 	bic.w	r5, r5, #3
 800801e:	3508      	adds	r5, #8
 8008020:	2d0c      	cmp	r5, #12
 8008022:	bf38      	it	cc
 8008024:	250c      	movcc	r5, #12
 8008026:	4629      	mov	r1, r5
 8008028:	4638      	mov	r0, r7
 800802a:	f7ff ffa5 	bl	8007f78 <sbrk_aligned>
 800802e:	3001      	adds	r0, #1
 8008030:	d02b      	beq.n	800808a <_malloc_r+0xd2>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	442b      	add	r3, r5
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	e00e      	b.n	8008058 <_malloc_r+0xa0>
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	1b52      	subs	r2, r2, r5
 800803e:	d41e      	bmi.n	800807e <_malloc_r+0xc6>
 8008040:	2a0b      	cmp	r2, #11
 8008042:	d916      	bls.n	8008072 <_malloc_r+0xba>
 8008044:	1961      	adds	r1, r4, r5
 8008046:	42a3      	cmp	r3, r4
 8008048:	6025      	str	r5, [r4, #0]
 800804a:	bf18      	it	ne
 800804c:	6059      	strne	r1, [r3, #4]
 800804e:	6863      	ldr	r3, [r4, #4]
 8008050:	bf08      	it	eq
 8008052:	6031      	streq	r1, [r6, #0]
 8008054:	5162      	str	r2, [r4, r5]
 8008056:	604b      	str	r3, [r1, #4]
 8008058:	4638      	mov	r0, r7
 800805a:	f104 060b 	add.w	r6, r4, #11
 800805e:	f000 f865 	bl	800812c <__malloc_unlock>
 8008062:	f026 0607 	bic.w	r6, r6, #7
 8008066:	1d23      	adds	r3, r4, #4
 8008068:	1af2      	subs	r2, r6, r3
 800806a:	d0b6      	beq.n	8007fda <_malloc_r+0x22>
 800806c:	1b9b      	subs	r3, r3, r6
 800806e:	50a3      	str	r3, [r4, r2]
 8008070:	e7b3      	b.n	8007fda <_malloc_r+0x22>
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	42a3      	cmp	r3, r4
 8008076:	bf0c      	ite	eq
 8008078:	6032      	streq	r2, [r6, #0]
 800807a:	605a      	strne	r2, [r3, #4]
 800807c:	e7ec      	b.n	8008058 <_malloc_r+0xa0>
 800807e:	4623      	mov	r3, r4
 8008080:	6864      	ldr	r4, [r4, #4]
 8008082:	e7b2      	b.n	8007fea <_malloc_r+0x32>
 8008084:	4634      	mov	r4, r6
 8008086:	6876      	ldr	r6, [r6, #4]
 8008088:	e7b9      	b.n	8007ffe <_malloc_r+0x46>
 800808a:	230c      	movs	r3, #12
 800808c:	603b      	str	r3, [r7, #0]
 800808e:	4638      	mov	r0, r7
 8008090:	f000 f84c 	bl	800812c <__malloc_unlock>
 8008094:	e7a1      	b.n	8007fda <_malloc_r+0x22>
 8008096:	6025      	str	r5, [r4, #0]
 8008098:	e7de      	b.n	8008058 <_malloc_r+0xa0>
 800809a:	bf00      	nop
 800809c:	20004b78 	.word	0x20004b78

080080a0 <_realloc_r>:
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	4680      	mov	r8, r0
 80080a6:	4614      	mov	r4, r2
 80080a8:	460e      	mov	r6, r1
 80080aa:	b921      	cbnz	r1, 80080b6 <_realloc_r+0x16>
 80080ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	4611      	mov	r1, r2
 80080b2:	f7ff bf81 	b.w	8007fb8 <_malloc_r>
 80080b6:	b92a      	cbnz	r2, 80080c4 <_realloc_r+0x24>
 80080b8:	f7ff ff12 	bl	8007ee0 <_free_r>
 80080bc:	4625      	mov	r5, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c4:	f000 f838 	bl	8008138 <_malloc_usable_size_r>
 80080c8:	4284      	cmp	r4, r0
 80080ca:	4607      	mov	r7, r0
 80080cc:	d802      	bhi.n	80080d4 <_realloc_r+0x34>
 80080ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080d2:	d812      	bhi.n	80080fa <_realloc_r+0x5a>
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff ff6e 	bl	8007fb8 <_malloc_r>
 80080dc:	4605      	mov	r5, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d0ed      	beq.n	80080be <_realloc_r+0x1e>
 80080e2:	42bc      	cmp	r4, r7
 80080e4:	4622      	mov	r2, r4
 80080e6:	4631      	mov	r1, r6
 80080e8:	bf28      	it	cs
 80080ea:	463a      	movcs	r2, r7
 80080ec:	f7ff fbb8 	bl	8007860 <memcpy>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4640      	mov	r0, r8
 80080f4:	f7ff fef4 	bl	8007ee0 <_free_r>
 80080f8:	e7e1      	b.n	80080be <_realloc_r+0x1e>
 80080fa:	4635      	mov	r5, r6
 80080fc:	e7df      	b.n	80080be <_realloc_r+0x1e>
	...

08008100 <_sbrk_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	; (800811c <_sbrk_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f9 fe34 	bl	8001d78 <_sbrk>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_sbrk_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_sbrk_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20004b80 	.word	0x20004b80

08008120 <__malloc_lock>:
 8008120:	4801      	ldr	r0, [pc, #4]	; (8008128 <__malloc_lock+0x8>)
 8008122:	f000 b811 	b.w	8008148 <__retarget_lock_acquire_recursive>
 8008126:	bf00      	nop
 8008128:	20004b84 	.word	0x20004b84

0800812c <__malloc_unlock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_unlock+0x8>)
 800812e:	f000 b80c 	b.w	800814a <__retarget_lock_release_recursive>
 8008132:	bf00      	nop
 8008134:	20004b84 	.word	0x20004b84

08008138 <_malloc_usable_size_r>:
 8008138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813c:	1f18      	subs	r0, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfbc      	itt	lt
 8008142:	580b      	ldrlt	r3, [r1, r0]
 8008144:	18c0      	addlt	r0, r0, r3
 8008146:	4770      	bx	lr

08008148 <__retarget_lock_acquire_recursive>:
 8008148:	4770      	bx	lr

0800814a <__retarget_lock_release_recursive>:
 800814a:	4770      	bx	lr

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
