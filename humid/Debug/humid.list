
humid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006830  08006830  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006838  08006838  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a64  20000074  080068b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad8  080068b4  00024ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a2e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e57  00000000  00000000  00036ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002f83  00000000  00000000  0003bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a80  00000000  00000000  0003ef4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097a2e  00000000  00000000  000549cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec3f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  000ec44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800670c 	.word	0x0800670c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800670c 	.word	0x0800670c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fc66 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f83c 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9ba 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f98e 	bl	80008b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000598:	f000 f93e 	bl	8000818 <MX_TIM3_Init>
  MX_TIM1_Init();
 800059c:	f000 f89c 	bl	80006d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <main+0x5c>)
 80005a2:	f001 fc4f 	bl	8001e44 <HAL_TIM_Base_Start>
  //uint8_t T[3],H[3],Check;
  //uint16_t Tsum;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a6:	f002 febd 	bl	8003324 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <main+0x60>)
 80005ac:	2100      	movs	r1, #0
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <main+0x64>)
 80005b0:	f002 ff02 	bl	80033b8 <osThreadNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <main+0x68>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <main+0x6c>)
 80005bc:	2100      	movs	r1, #0
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <main+0x70>)
 80005c0:	f002 fefa 	bl	80033b8 <osThreadNew>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <main+0x74>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80005ca:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <main+0x78>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <main+0x7c>)
 80005d0:	f002 fef2 	bl	80033b8 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <main+0x80>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005da:	f002 fec7 	bl	800336c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x5a>
 80005e0:	200000d8 	.word	0x200000d8
 80005e4:	08006778 	.word	0x08006778
 80005e8:	08000a19 	.word	0x08000a19
 80005ec:	20000164 	.word	0x20000164
 80005f0:	0800679c 	.word	0x0800679c
 80005f4:	08000a29 	.word	0x08000a29
 80005f8:	20000168 	.word	0x20000168
 80005fc:	080067c0 	.word	0x080067c0
 8000600:	08000b29 	.word	0x08000b29
 8000604:	2000016c 	.word	0x2000016c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fc10 	bl	8005e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b27      	ldr	r3, [pc, #156]	; (80006d0 <SystemClock_Config+0xc8>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <SystemClock_Config+0xc8>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <SystemClock_Config+0xc8>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <SystemClock_Config+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <SystemClock_Config+0xcc>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800067c:	2332      	movs	r3, #50	; 0x32
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fef1 	bl	8001474 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000698:	f000 fa5c 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2101      	movs	r1, #1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f953 	bl	8001964 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c4:	f000 fa46 	bl	8000b54 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	; 0x58
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f005 fb93 	bl	8005e3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b3e      	ldr	r3, [pc, #248]	; (8000810 <MX_TIM1_Init+0x138>)
 8000718:	4a3e      	ldr	r2, [pc, #248]	; (8000814 <MX_TIM1_Init+0x13c>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 49;
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <MX_TIM1_Init+0x138>)
 800071e:	2231      	movs	r2, #49	; 0x31
 8000720:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b3b      	ldr	r3, [pc, #236]	; (8000810 <MX_TIM1_Init+0x138>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000728:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_TIM1_Init+0x138>)
 800072a:	2263      	movs	r2, #99	; 0x63
 800072c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b38      	ldr	r3, [pc, #224]	; (8000810 <MX_TIM1_Init+0x138>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000734:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_TIM1_Init+0x138>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <MX_TIM1_Init+0x138>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000740:	4833      	ldr	r0, [pc, #204]	; (8000810 <MX_TIM1_Init+0x138>)
 8000742:	f001 fb2f 	bl	8001da4 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800074c:	f000 fa02 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075a:	4619      	mov	r1, r3
 800075c:	482c      	ldr	r0, [pc, #176]	; (8000810 <MX_TIM1_Init+0x138>)
 800075e:	f001 fd97 	bl	8002290 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000768:	f000 f9f4 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076c:	4828      	ldr	r0, [pc, #160]	; (8000810 <MX_TIM1_Init+0x138>)
 800076e:	f001 fbc3 	bl	8001ef8 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000778:	f000 f9ec 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000788:	4619      	mov	r1, r3
 800078a:	4821      	ldr	r0, [pc, #132]	; (8000810 <MX_TIM1_Init+0x138>)
 800078c:	f002 f914 	bl	80029b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000796:	f000 f9dd 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	; 0x60
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <MX_TIM1_Init+0x138>)
 80007c0:	f001 fca4 	bl	800210c <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80007ca:	f000 f9c3 	bl	8000b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_TIM1_Init+0x138>)
 80007f2:	f002 f94f 	bl	8002a94 <HAL_TIMEx_ConfigBreakDeadTime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80007fc:	f000 f9aa 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <MX_TIM1_Init+0x138>)
 8000802:	f000 fa11 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 8000806:	bf00      	nop
 8000808:	3758      	adds	r7, #88	; 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000090 	.word	0x20000090
 8000814:	40010000 	.word	0x40010000

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	463b      	mov	r3, r7
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM3_Init+0x94>)
 8000836:	4a1e      	ldr	r2, [pc, #120]	; (80008b0 <MX_TIM3_Init+0x98>)
 8000838:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_TIM3_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_TIM3_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM3_Init+0x94>)
 8000848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_TIM3_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_TIM3_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_TIM3_Init+0x94>)
 800085c:	f001 faa2 	bl	8001da4 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 f975 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0308 	add.w	r3, r7, #8
 8000874:	4619      	mov	r1, r3
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_TIM3_Init+0x94>)
 8000878:	f001 fd0a 	bl	8002290 <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 f967 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM3_Init+0x94>)
 8000894:	f002 f890 	bl	80029b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800089e:	f000 f959 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000d8 	.word	0x200000d8
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f002 f924 	bl	8002b38 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f92d 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000120 	.word	0x20000120
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b39      	ldr	r3, [pc, #228]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a38      	ldr	r2, [pc, #224]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x100>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x100>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a2a      	ldr	r2, [pc, #168]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x100>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_GPIO_Init+0x100>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	481e      	ldr	r0, [pc, #120]	; (8000a0c <MX_GPIO_Init+0x104>)
 8000994:	f000 fd54 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_GPIO_Init+0x108>)
 80009b0:	f000 fbaa 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b4:	2320      	movs	r3, #32
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4810      	ldr	r0, [pc, #64]	; (8000a0c <MX_GPIO_Init+0x104>)
 80009cc:	f000 fb9c 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009d0:	2320      	movs	r3, #32
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d8:	2302      	movs	r3, #2
 80009da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0x10c>)
 80009e4:	f000 fb90 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x10c>)
 80009fc:	f000 fb84 	bl	8001108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020400 	.word	0x40020400

08000a18 <StartDefaultTask>:
uint8_t T[3],H[3],Check;
  uint16_t Tsum;

/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

    osDelay(1);
  }*/
	for(;;)
		  {
		    osDelay(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f002 fd5b 	bl	80034dc <osDelay>
 8000a26:	e7fb      	b.n	8000a20 <StartDefaultTask+0x8>

08000a28 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */


	  	    //pwm for trig
	  	    int hit = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
	  	    int miss_count = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
	  	    uint8_t state = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	77fb      	strb	r3, [r7, #31]
	  	    int delay;
	  	    int echo=1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]

	  	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4830      	ldr	r0, [pc, #192]	; (8000b04 <StartTask02+0xdc>)
 8000a44:	f001 fab2 	bl	8001fac <HAL_TIM_PWM_Start>
	  	    TIM1->CCR1 = 20;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <StartTask02+0xe0>)
 8000a4a:	2214      	movs	r2, #20
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34


	  	    for (;;) {
	  	        uint8_t test = "TEST\r\n";
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <StartTask02+0xe4>)
 8000a50:	74fb      	strb	r3, [r7, #19]
	  	        //HAL_UART_Transmit(&huart1, &test, sizeof(test), HAL_MAX_DELAY);
	  	        delay = 1000001;
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <StartTask02+0xe8>)
 8000a54:	61bb      	str	r3, [r7, #24]
	  	        echo =  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	482e      	ldr	r0, [pc, #184]	; (8000b14 <StartTask02+0xec>)
 8000a5a:	f000 fcd9 	bl	8001410 <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	617b      	str	r3, [r7, #20]
	  	        // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, echo);

	  	        if (echo) {
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00c      	beq.n	8000a82 <StartTask02+0x5a>
	  	            delay = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
	  	            while ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000a6c:	e002      	b.n	8000a74 <StartTask02+0x4c>
	  	                delay++;
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	3301      	adds	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
	  	            while ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8000a74:	2140      	movs	r1, #64	; 0x40
 8000a76:	4827      	ldr	r0, [pc, #156]	; (8000b14 <StartTask02+0xec>)
 8000a78:	f000 fcca 	bl	8001410 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f5      	bne.n	8000a6e <StartTask02+0x46>
	  	            }
	  	        }

	  	        if (delay < 1000001) {
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <StartTask02+0xf0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	dce1      	bgt.n	8000a4e <StartTask02+0x26>

	  	            if (delay < 1000) {
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a90:	da05      	bge.n	8000a9e <StartTask02+0x76>
	  	                hit++;
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	3301      	adds	r3, #1
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
	  	                miss_count = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	e006      	b.n	8000aac <StartTask02+0x84>
	  	            }
	  	            else {
	  	                if (miss_count++ > 100) {
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	623a      	str	r2, [r7, #32]
 8000aa4:	2b64      	cmp	r3, #100	; 0x64
 8000aa6:	dd01      	ble.n	8000aac <StartTask02+0x84>
	  	                    hit = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
	  	                }
	  	             }

	  	            if (hit > 100) {
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	2b64      	cmp	r3, #100	; 0x64
 8000ab0:	dd05      	ble.n	8000abe <StartTask02+0x96>
	  	                if (state == 0) {
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d107      	bne.n	8000ac8 <StartTask02+0xa0>
	  	                    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);

	  	                    state = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	77fb      	strb	r3, [r7, #31]
 8000abc:	e004      	b.n	8000ac8 <StartTask02+0xa0>
	  	                }
	  	            } else {
	  	                if (state == 1) {
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d101      	bne.n	8000ac8 <StartTask02+0xa0>
	  	                    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);

	  	                    state = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	77fb      	strb	r3, [r7, #31]
	  	                }
	  	            }

	  	            uint8_t pData[7] = {' ',' ',' ',' ',' ',' ',' '};
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <StartTask02+0xf4>)
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad2:	6018      	str	r0, [r3, #0]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	8019      	strh	r1, [r3, #0]
 8000ad8:	3302      	adds	r3, #2
 8000ada:	0c0a      	lsrs	r2, r1, #16
 8000adc:	701a      	strb	r2, [r3, #0]
	  	            sprintf(pData, "%d\r\n", delay);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	490e      	ldr	r1, [pc, #56]	; (8000b20 <StartTask02+0xf8>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 f9b0 	bl	8005e4c <siprintf>
	  	            HAL_UART_Transmit(&huart2, &pData, 7, HAL_MAX_DELAY);
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	2207      	movs	r2, #7
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <StartTask02+0xfc>)
 8000af8:	f002 f86b 	bl	8002bd2 <HAL_UART_Transmit>
	  	            osDelay(10);
 8000afc:	200a      	movs	r0, #10
 8000afe:	f002 fced 	bl	80034dc <osDelay>
	  	    for (;;) {
 8000b02:	e7a4      	b.n	8000a4e <StartTask02+0x26>
 8000b04:	20000090 	.word	0x20000090
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	08006748 	.word	0x08006748
 8000b10:	000f4241 	.word	0x000f4241
 8000b14:	40020400 	.word	0x40020400
 8000b18:	000f4240 	.word	0x000f4240
 8000b1c:	08006758 	.word	0x08006758
 8000b20:	08006750 	.word	0x08006750
 8000b24:	20000120 	.word	0x20000120

08000b28 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	  for(;;)
	  {
		  uint8_t sensorState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000b30:	2120      	movs	r1, #32
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <StartTask03+0x24>)
 8000b34:	f000 fc6c 	bl	8001410 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	73fb      	strb	r3, [r7, #15]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,sensorState);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2120      	movs	r1, #32
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <StartTask03+0x28>)
 8000b44:	f000 fc7c 	bl	8001440 <HAL_GPIO_WritePin>
	  {
 8000b48:	e7f2      	b.n	8000b30 <StartTask03+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020000 	.word	0x40020000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f000 fa86 	bl	80010b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_TIM_Base_MspInit+0x64>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d10e      	bne.n	8000be8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a13      	ldr	r2, [pc, #76]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000be6:	e012      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_TIM_Base_MspInit+0x6c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d10d      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_TIM_Base_MspInit+0x68>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40000400 	.word	0x40000400

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11e      	bne.n	8000c88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <HAL_TIM_MspPostInit+0x70>)
 8000c84:	f000 fa40 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010000 	.word	0x40010000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_UART_MspInit+0x84>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d12b      	bne.n	8000d16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_UART_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d06:	2307      	movs	r3, #7
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <HAL_UART_MspInit+0x8c>)
 8000d12:	f000 f9f9 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	; 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020000 	.word	0x40020000

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8ce 	bl	8000efc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d60:	f003 ffca 	bl	8004cf8 <xTaskGetSchedulerState>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d001      	beq.n	8000d6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d6a:	f004 fdb5 	bl	80058d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f005 f812 	bl	8005dcc <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000170 	.word	0x20000170
 8000ddc:	20004ad8 	.word	0x20004ad8

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f004 ffd1 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fba5 	bl	8000584 <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e48:	08006840 	.word	0x08006840
  ldr r2, =_sbss
 8000e4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e50:	20004ad8 	.word	0x20004ad8

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f90d 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fe68 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f917 	bl	80010ee <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f8ed 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000174 	.word	0x20000174

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000174 	.word	0x20000174

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff47 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff5c 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffb0 	bl	800105c <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	e159      	b.n	80013d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001124:	2201      	movs	r2, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8148 	bne.w	80013d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d005      	beq.n	800115a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	2b02      	cmp	r3, #2
 8001158:	d130      	bne.n	80011bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 0201 	and.w	r2, r3, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d017      	beq.n	80011f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d123      	bne.n	800124c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	08da      	lsrs	r2, r3, #3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3208      	adds	r2, #8
 800120c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	220f      	movs	r2, #15
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	69b9      	ldr	r1, [r7, #24]
 8001248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0203 	and.w	r2, r3, #3
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a2 	beq.w	80013d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a56      	ldr	r2, [pc, #344]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b54      	ldr	r3, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012aa:	4a52      	ldr	r2, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x2ec>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a49      	ldr	r2, [pc, #292]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x202>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <HAL_GPIO_Init+0x2f4>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x1fe>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a47      	ldr	r2, [pc, #284]	; (8001400 <HAL_GPIO_Init+0x2f8>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a46      	ldr	r2, [pc, #280]	; (8001404 <HAL_GPIO_Init+0x2fc>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x1f6>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a45      	ldr	r2, [pc, #276]	; (8001408 <HAL_GPIO_Init+0x300>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x1f2>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e008      	b.n	800130c <HAL_GPIO_Init+0x204>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x204>
 80012fe:	2303      	movs	r3, #3
 8001300:	e004      	b.n	800130c <HAL_GPIO_Init+0x204>
 8001302:	2302      	movs	r3, #2
 8001304:	e002      	b.n	800130c <HAL_GPIO_Init+0x204>
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x204>
 800130a:	2300      	movs	r3, #0
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f002 0203 	and.w	r2, r2, #3
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4093      	lsls	r3, r2
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800131c:	4935      	ldr	r1, [pc, #212]	; (80013f4 <HAL_GPIO_Init+0x2ec>)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	089b      	lsrs	r3, r3, #2
 8001322:	3302      	adds	r3, #2
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <HAL_GPIO_Init+0x304>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a2f      	ldr	r2, [pc, #188]	; (800140c <HAL_GPIO_Init+0x304>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_GPIO_Init+0x304>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a24      	ldr	r2, [pc, #144]	; (800140c <HAL_GPIO_Init+0x304>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137e:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_GPIO_Init+0x304>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a2:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_GPIO_Init+0x304>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a8:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_GPIO_Init+0x304>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_GPIO_Init+0x304>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3301      	adds	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b0f      	cmp	r3, #15
 80013dc:	f67f aea2 	bls.w	8001124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020400 	.word	0x40020400
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40021000 	.word	0x40021000
 800140c:	40013c00 	.word	0x40013c00

08001410 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e001      	b.n	8001432 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e267      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4b85      	ldr	r3, [pc, #532]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b7e      	ldr	r3, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05b      	beq.n	800157c <HAL_RCC_OscConfig+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d157      	bne.n	800157c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e242      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x74>
 80014da:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a75      	ldr	r2, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6f      	ldr	r2, [pc, #444]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6d      	ldr	r3, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6c      	ldr	r2, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a68      	ldr	r2, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b66      	ldr	r3, [pc, #408]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a65      	ldr	r2, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fcfa 	bl	8000f24 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fcf6 	bl	8000f24 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e207      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b5b      	ldr	r3, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xc0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fce6 	bl	8000f24 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fce2 	bl	8000f24 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1f3      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b51      	ldr	r3, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xe8>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1c7      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x244>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc9b 	bl	8000f24 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc97 	bl	8000f24 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1a8      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4925      	ldr	r1, [pc, #148]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_OscConfig+0x244>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fc7a 	bl	8000f24 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fc76 	bl	8000f24 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e187      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d036      	beq.n	80016cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_RCC_OscConfig+0x248>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fc5a 	bl	8000f24 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fc56 	bl	8000f24 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e167      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x240>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x200>
 8001692:	e01b      	b.n	80016cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_OscConfig+0x248>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fc43 	bl	8000f24 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e00e      	b.n	80016c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc3f 	bl	8000f24 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d907      	bls.n	80016c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e150      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ea      	bne.n	80016a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 8097 	beq.w	8001808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a7c      	ldr	r2, [pc, #496]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001706:	2301      	movs	r3, #1
 8001708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d118      	bne.n	8001748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001722:	f7ff fbff 	bl	8000f24 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7ff fbfb 	bl	8000f24 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e10c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x474>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x2ea>
 8001750:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a63      	ldr	r2, [pc, #396]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	e01c      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x30c>
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6713      	str	r3, [r2, #112]	; 0x70
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a5b      	ldr	r2, [pc, #364]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x324>
 8001780:	4b58      	ldr	r3, [pc, #352]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	4a57      	ldr	r2, [pc, #348]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6713      	str	r3, [r2, #112]	; 0x70
 800178c:	4b55      	ldr	r3, [pc, #340]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a54      	ldr	r2, [pc, #336]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d015      	beq.n	80017cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a0:	f7ff fbc0 	bl	8000f24 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a8:	f7ff fbbc 	bl	8000f24 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e0cb      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017be:	4b49      	ldr	r3, [pc, #292]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0ee      	beq.n	80017a8 <HAL_RCC_OscConfig+0x334>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fbaa 	bl	8000f24 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fba6 	bl	8000f24 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0b5      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ee      	bne.n	80017d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80a1 	beq.w	8001954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d05c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b02      	cmp	r3, #2
 8001824:	d141      	bne.n	80018aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fb7a 	bl	8000f24 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fb76 	bl	8000f24 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e087      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	3b01      	subs	r3, #1
 800186c:	041b      	lsls	r3, r3, #16
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	491b      	ldr	r1, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff fb4f 	bl	8000f24 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff fb4b 	bl	8000f24 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e05c      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x416>
 80018a8:	e054      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_OscConfig+0x478>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb38 	bl	8000f24 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb34 	bl	8000f24 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e045      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_RCC_OscConfig+0x470>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x444>
 80018d6:	e03d      	b.n	8001954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e038      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x4ec>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d028      	beq.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d121      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11a      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	4293      	cmp	r3, r2
 800192a:	d111      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cc      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d90c      	bls.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0b8      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	4a52      	ldr	r2, [pc, #328]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	494d      	ldr	r1, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d044      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d119      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e07f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d003      	beq.n	8001a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e06f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e067      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4934      	ldr	r1, [pc, #208]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7ff fa66 	bl	8000f24 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff fa62 	bl	8000f24 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04f      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2b      	ldr	r3, [pc, #172]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d20c      	bcs.n	8001aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e032      	b.n	8001b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4916      	ldr	r1, [pc, #88]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d009      	beq.n	8001aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	490e      	ldr	r1, [pc, #56]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aea:	f000 f821 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	490a      	ldr	r1, [pc, #40]	; (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f9c6 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00
 8001b20:	40023800 	.word	0x40023800
 8001b24:	080067e4 	.word	0x080067e4
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b34:	b094      	sub	sp, #80	; 0x50
 8001b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b40:	2300      	movs	r3, #0
 8001b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b48:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d00d      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x40>
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	f200 80e1 	bhi.w	8001d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b62:	e0db      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b68:	e0db      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b73      	ldr	r3, [pc, #460]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6e:	e0d8      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b70:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b86:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	099b      	lsrs	r3, r3, #6
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	f04f 0000 	mov.w	r0, #0
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	0159      	lsls	r1, r3, #5
 8001bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb4:	0150      	lsls	r0, r2, #5
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4621      	mov	r1, r4
 8001bbc:	1a51      	subs	r1, r2, r1
 8001bbe:	6139      	str	r1, [r7, #16]
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd4:	4659      	mov	r1, fp
 8001bd6:	018b      	lsls	r3, r1, #6
 8001bd8:	4651      	mov	r1, sl
 8001bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bde:	4651      	mov	r1, sl
 8001be0:	018a      	lsls	r2, r1, #6
 8001be2:	4651      	mov	r1, sl
 8001be4:	ebb2 0801 	subs.w	r8, r2, r1
 8001be8:	4659      	mov	r1, fp
 8001bea:	eb63 0901 	sbc.w	r9, r3, r1
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c02:	4690      	mov	r8, r2
 8001c04:	4699      	mov	r9, r3
 8001c06:	4623      	mov	r3, r4
 8001c08:	eb18 0303 	adds.w	r3, r8, r3
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	462b      	mov	r3, r5
 8001c10:	eb49 0303 	adc.w	r3, r9, r3
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c22:	4629      	mov	r1, r5
 8001c24:	024b      	lsls	r3, r1, #9
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	024a      	lsls	r2, r1, #9
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c36:	2200      	movs	r2, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c40:	f7fe fb1e 	bl	8000280 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c4c:	e058      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	4b38      	ldr	r3, [pc, #224]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	099b      	lsrs	r3, r3, #6
 8001c54:	2200      	movs	r2, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	4611      	mov	r1, r2
 8001c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
 8001c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c68:	4642      	mov	r2, r8
 8001c6a:	464b      	mov	r3, r9
 8001c6c:	f04f 0000 	mov.w	r0, #0
 8001c70:	f04f 0100 	mov.w	r1, #0
 8001c74:	0159      	lsls	r1, r3, #5
 8001c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c7a:	0150      	lsls	r0, r2, #5
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4641      	mov	r1, r8
 8001c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c86:	4649      	mov	r1, r9
 8001c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	00eb      	lsls	r3, r5, #3
 8001cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb6:	00e2      	lsls	r2, r4, #3
 8001cb8:	4614      	mov	r4, r2
 8001cba:	461d      	mov	r5, r3
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	18e3      	adds	r3, r4, r3
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	464b      	mov	r3, r9
 8001cc4:	eb45 0303 	adc.w	r3, r5, r3
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	028b      	lsls	r3, r1, #10
 8001cda:	4621      	mov	r1, r4
 8001cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	028a      	lsls	r2, r1, #10
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cea:	2200      	movs	r2, #0
 8001cec:	61bb      	str	r3, [r7, #24]
 8001cee:	61fa      	str	r2, [r7, #28]
 8001cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf4:	f7fe fac4 	bl	8000280 <__aeabi_uldivmod>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1a:	e002      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200

08001d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000000 	.word	0x20000000

08001d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d58:	f7ff fff0 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0a9b      	lsrs	r3, r3, #10
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4903      	ldr	r1, [pc, #12]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	080067f4 	.word	0x080067f4

08001d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d80:	f7ff ffdc 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0b5b      	lsrs	r3, r3, #13
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	; (8001da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	080067f4 	.word	0x080067f4

08001da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e041      	b.n	8001e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fef4 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3304      	adds	r3, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f000 fb1c 	bl	8002420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e03c      	b.n	8001ed6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_Start+0xa0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d018      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x5c>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e76:	d013      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x5c>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_TIM_Base_Start+0xa4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00e      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x5c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_TIM_Base_Start+0xa8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d009      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x5c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a17      	ldr	r2, [pc, #92]	; (8001ef0 <HAL_TIM_Base_Start+0xac>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d004      	beq.n	8001ea0 <HAL_TIM_Base_Start+0x5c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_TIM_Base_Start+0xb0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d010      	beq.n	8001ed4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	e007      	b.n	8001ed4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40014000 	.word	0x40014000

08001ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e041      	b.n	8001f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f839 	bl	8001f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4610      	mov	r0, r2
 8001f38:	f000 fa72 	bl	8002420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <HAL_TIM_PWM_Start+0x24>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	e022      	b.n	8002016 <HAL_TIM_PWM_Start+0x6a>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d109      	bne.n	8001fea <HAL_TIM_PWM_Start+0x3e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	e015      	b.n	8002016 <HAL_TIM_PWM_Start+0x6a>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d109      	bne.n	8002004 <HAL_TIM_PWM_Start+0x58>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	e008      	b.n	8002016 <HAL_TIM_PWM_Start+0x6a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf14      	ite	ne
 8002010:	2301      	movne	r3, #1
 8002012:	2300      	moveq	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e068      	b.n	80020f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d104      	bne.n	800202e <HAL_TIM_PWM_Start+0x82>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	e013      	b.n	8002056 <HAL_TIM_PWM_Start+0xaa>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b04      	cmp	r3, #4
 8002032:	d104      	bne.n	800203e <HAL_TIM_PWM_Start+0x92>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800203c:	e00b      	b.n	8002056 <HAL_TIM_PWM_Start+0xaa>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d104      	bne.n	800204e <HAL_TIM_PWM_Start+0xa2>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800204c:	e003      	b.n	8002056 <HAL_TIM_PWM_Start+0xaa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fc84 	bl	800296c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <HAL_TIM_PWM_Start+0x14c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d107      	bne.n	800207e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_TIM_PWM_Start+0x14c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_TIM_PWM_Start+0x10e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002090:	d013      	beq.n	80020ba <HAL_TIM_PWM_Start+0x10e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_TIM_PWM_Start+0x150>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_TIM_PWM_Start+0x10e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_TIM_PWM_Start+0x154>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_TIM_PWM_Start+0x10e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a16      	ldr	r2, [pc, #88]	; (8002104 <HAL_TIM_PWM_Start+0x158>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_TIM_PWM_Start+0x10e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_TIM_PWM_Start+0x15c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d111      	bne.n	80020de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d010      	beq.n	80020ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020dc:	e007      	b.n	80020ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010000 	.word	0x40010000
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00
 8002108:	40014000 	.word	0x40014000

0800210c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002126:	2302      	movs	r3, #2
 8002128:	e0ae      	b.n	8002288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f200 809f 	bhi.w	8002278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800213a:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800213c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002140:	08002175 	.word	0x08002175
 8002144:	08002279 	.word	0x08002279
 8002148:	08002279 	.word	0x08002279
 800214c:	08002279 	.word	0x08002279
 8002150:	080021b5 	.word	0x080021b5
 8002154:	08002279 	.word	0x08002279
 8002158:	08002279 	.word	0x08002279
 800215c:	08002279 	.word	0x08002279
 8002160:	080021f7 	.word	0x080021f7
 8002164:	08002279 	.word	0x08002279
 8002168:	08002279 	.word	0x08002279
 800216c:	08002279 	.word	0x08002279
 8002170:	08002237 	.word	0x08002237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f9d0 	bl	8002520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0208 	orr.w	r2, r2, #8
 800218e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6999      	ldr	r1, [r3, #24]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	619a      	str	r2, [r3, #24]
      break;
 80021b2:	e064      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fa16 	bl	80025ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6999      	ldr	r1, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	021a      	lsls	r2, r3, #8
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	619a      	str	r2, [r3, #24]
      break;
 80021f4:	e043      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fa61 	bl	80026c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0208 	orr.w	r2, r2, #8
 8002210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0204 	bic.w	r2, r2, #4
 8002220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69d9      	ldr	r1, [r3, #28]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	61da      	str	r2, [r3, #28]
      break;
 8002234:	e023      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 faab 	bl	8002798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	61da      	str	r2, [r3, #28]
      break;
 8002276:	e002      	b.n	800227e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	75fb      	strb	r3, [r7, #23]
      break;
 800227c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <HAL_TIM_ConfigClockSource+0x1c>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e0b4      	b.n	8002416 <HAL_TIM_ConfigClockSource+0x186>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e4:	d03e      	beq.n	8002364 <HAL_TIM_ConfigClockSource+0xd4>
 80022e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ea:	f200 8087 	bhi.w	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 80022ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f2:	f000 8086 	beq.w	8002402 <HAL_TIM_ConfigClockSource+0x172>
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fa:	d87f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d01a      	beq.n	8002336 <HAL_TIM_ConfigClockSource+0xa6>
 8002300:	2b70      	cmp	r3, #112	; 0x70
 8002302:	d87b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b60      	cmp	r3, #96	; 0x60
 8002306:	d050      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0x11a>
 8002308:	2b60      	cmp	r3, #96	; 0x60
 800230a:	d877      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b50      	cmp	r3, #80	; 0x50
 800230e:	d03c      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xfa>
 8002310:	2b50      	cmp	r3, #80	; 0x50
 8002312:	d873      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d058      	beq.n	80023ca <HAL_TIM_ConfigClockSource+0x13a>
 8002318:	2b40      	cmp	r3, #64	; 0x40
 800231a:	d86f      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b30      	cmp	r3, #48	; 0x30
 800231e:	d064      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002320:	2b30      	cmp	r3, #48	; 0x30
 8002322:	d86b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b20      	cmp	r3, #32
 8002326:	d060      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002328:	2b20      	cmp	r3, #32
 800232a:	d867      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d05c      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b10      	cmp	r3, #16
 8002332:	d05a      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x15a>
 8002334:	e062      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f000 faf1 	bl	800292c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	609a      	str	r2, [r3, #8]
      break;
 8002362:	e04f      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f000 fada 	bl	800292c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002386:	609a      	str	r2, [r3, #8]
      break;
 8002388:	e03c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6859      	ldr	r1, [r3, #4]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	461a      	mov	r2, r3
 8002398:	f000 fa4e 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2150      	movs	r1, #80	; 0x50
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 faa7 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80023a8:	e02c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f000 fa6d 	bl	8002896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2160      	movs	r1, #96	; 0x60
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fa97 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80023c8:	e01c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	461a      	mov	r2, r3
 80023d8:	f000 fa2e 	bl	8002838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fa87 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80023e8:	e00c      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f000 fa7e 	bl	80028f6 <TIM_ITRx_SetConfig>
      break;
 80023fa:	e003      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e000      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a34      	ldr	r2, [pc, #208]	; (8002504 <TIM_Base_SetConfig+0xe4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00f      	beq.n	8002458 <TIM_Base_SetConfig+0x38>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243e:	d00b      	beq.n	8002458 <TIM_Base_SetConfig+0x38>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a31      	ldr	r2, [pc, #196]	; (8002508 <TIM_Base_SetConfig+0xe8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <TIM_Base_SetConfig+0x38>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <TIM_Base_SetConfig+0xec>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d003      	beq.n	8002458 <TIM_Base_SetConfig+0x38>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a2f      	ldr	r2, [pc, #188]	; (8002510 <TIM_Base_SetConfig+0xf0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d108      	bne.n	800246a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a25      	ldr	r2, [pc, #148]	; (8002504 <TIM_Base_SetConfig+0xe4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01b      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002478:	d017      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a22      	ldr	r2, [pc, #136]	; (8002508 <TIM_Base_SetConfig+0xe8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a21      	ldr	r2, [pc, #132]	; (800250c <TIM_Base_SetConfig+0xec>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00f      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a20      	ldr	r2, [pc, #128]	; (8002510 <TIM_Base_SetConfig+0xf0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00b      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <TIM_Base_SetConfig+0xf4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d007      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <TIM_Base_SetConfig+0xf8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d003      	beq.n	80024aa <TIM_Base_SetConfig+0x8a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <TIM_Base_SetConfig+0xfc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d108      	bne.n	80024bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <TIM_Base_SetConfig+0xe4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d103      	bne.n	80024f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	615a      	str	r2, [r3, #20]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40010000 	.word	0x40010000
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800
 8002510:	40000c00 	.word	0x40000c00
 8002514:	40014000 	.word	0x40014000
 8002518:	40014400 	.word	0x40014400
 800251c:	40014800 	.word	0x40014800

08002520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	f023 0201 	bic.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <TIM_OC1_SetConfig+0xc8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10c      	bne.n	8002596 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 0308 	bic.w	r3, r3, #8
 8002582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <TIM_OC1_SetConfig+0xc8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d111      	bne.n	80025c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	621a      	str	r2, [r3, #32]
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40010000 	.word	0x40010000

080025ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 0210 	bic.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0320 	bic.w	r3, r3, #32
 8002636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <TIM_OC2_SetConfig+0xd4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10d      	bne.n	8002668 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002652:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002666:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <TIM_OC2_SetConfig+0xd4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d113      	bne.n	8002698 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40010000 	.word	0x40010000

080026c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <TIM_OC3_SetConfig+0xd0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10d      	bne.n	800273e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <TIM_OC3_SetConfig+0xd0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d113      	bne.n	800276e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800274c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	621a      	str	r2, [r3, #32]
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40010000 	.word	0x40010000

08002798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	031b      	lsls	r3, r3, #12
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <TIM_OC4_SetConfig+0x9c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d109      	bne.n	800280c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002896:	b480      	push	{r7}
 8002898:	b087      	sub	sp, #28
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	f023 0210 	bic.w	r2, r3, #16
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	031b      	lsls	r3, r3, #12
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	f043 0307 	orr.w	r3, r3, #7
 8002918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	021a      	lsls	r2, r3, #8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	431a      	orrs	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	371c      	adds	r7, #28
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	2201      	movs	r2, #1
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	621a      	str	r2, [r3, #32]
}
 80029aa:	bf00      	nop
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e050      	b.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d018      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d013      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a18      	ldr	r2, [pc, #96]	; (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00e      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d009      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10c      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40010000 	.word	0x40010000
 8002a84:	40000400 	.word	0x40000400
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	40014000 	.word	0x40014000

08002a94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e03d      	b.n	8002b2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e03f      	b.n	8002bca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe f89c 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2224      	movs	r2, #36	; 0x24
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f929 	bl	8002dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08a      	sub	sp, #40	; 0x28
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d17c      	bne.n	8002cec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <HAL_UART_Transmit+0x2c>
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e075      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_UART_Transmit+0x3e>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e06e      	b.n	8002cee <HAL_UART_Transmit+0x11c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2221      	movs	r2, #33	; 0x21
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c26:	f7fe f97d 	bl	8000f24 <HAL_GetTick>
 8002c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	88fa      	ldrh	r2, [r7, #6]
 8002c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c64:	e02a      	b.n	8002cbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f840 	bl	8002cf6 <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e036      	b.n	8002cee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e007      	b.n	8002cae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	3301      	adds	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1cf      	bne.n	8002c66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f810 	bl	8002cf6 <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e006      	b.n	8002cee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b090      	sub	sp, #64	; 0x40
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d06:	e050      	b.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0e:	d04c      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d16:	f7fe f905 	bl	8000f24 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d241      	bcs.n	8002daa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d46:	637a      	str	r2, [r7, #52]	; 0x34
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e5      	bne.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	613b      	str	r3, [r7, #16]
   return(result);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d7a:	623a      	str	r2, [r7, #32]
 8002d7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	69f9      	ldr	r1, [r7, #28]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e00f      	b.n	8002dca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4013      	ands	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d09f      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3740      	adds	r7, #64	; 0x40
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b0c0      	sub	sp, #256	; 0x100
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	68d9      	ldr	r1, [r3, #12]
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	ea40 0301 	orr.w	r3, r0, r1
 8002dfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	431a      	orrs	r2, r3
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e2c:	f021 010c 	bic.w	r1, r1, #12
 8002e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4e:	6999      	ldr	r1, [r3, #24]
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	ea40 0301 	orr.w	r3, r0, r1
 8002e5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <UART_SetConfig+0x2cc>)
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d005      	beq.n	8002e74 <UART_SetConfig+0xa0>
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b8d      	ldr	r3, [pc, #564]	; (80030a4 <UART_SetConfig+0x2d0>)
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d104      	bne.n	8002e7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7fe ff82 	bl	8001d7c <HAL_RCC_GetPCLK2Freq>
 8002e78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e7c:	e003      	b.n	8002e86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e7e:	f7fe ff69 	bl	8001d54 <HAL_RCC_GetPCLK1Freq>
 8002e82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e90:	f040 810c 	bne.w	80030ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ea2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	462b      	mov	r3, r5
 8002eaa:	1891      	adds	r1, r2, r2
 8002eac:	65b9      	str	r1, [r7, #88]	; 0x58
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	eb12 0801 	adds.w	r8, r2, r1
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb43 0901 	adc.w	r9, r3, r1
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ece:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ed2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ed6:	4690      	mov	r8, r2
 8002ed8:	4699      	mov	r9, r3
 8002eda:	4623      	mov	r3, r4
 8002edc:	eb18 0303 	adds.w	r3, r8, r3
 8002ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ee4:	462b      	mov	r3, r5
 8002ee6:	eb49 0303 	adc.w	r3, r9, r3
 8002eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002efa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002efe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f02:	460b      	mov	r3, r1
 8002f04:	18db      	adds	r3, r3, r3
 8002f06:	653b      	str	r3, [r7, #80]	; 0x50
 8002f08:	4613      	mov	r3, r2
 8002f0a:	eb42 0303 	adc.w	r3, r2, r3
 8002f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f18:	f7fd f9b2 	bl	8000280 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b61      	ldr	r3, [pc, #388]	; (80030a8 <UART_SetConfig+0x2d4>)
 8002f22:	fba3 2302 	umull	r2, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	011c      	lsls	r4, r3, #4
 8002f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f3c:	4642      	mov	r2, r8
 8002f3e:	464b      	mov	r3, r9
 8002f40:	1891      	adds	r1, r2, r2
 8002f42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f44:	415b      	adcs	r3, r3
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f4c:	4641      	mov	r1, r8
 8002f4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f52:	4649      	mov	r1, r9
 8002f54:	eb43 0b01 	adc.w	fp, r3, r1
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f6c:	4692      	mov	sl, r2
 8002f6e:	469b      	mov	fp, r3
 8002f70:	4643      	mov	r3, r8
 8002f72:	eb1a 0303 	adds.w	r3, sl, r3
 8002f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f7a:	464b      	mov	r3, r9
 8002f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	18db      	adds	r3, r3, r3
 8002f9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	eb42 0303 	adc.w	r3, r2, r3
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002faa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fae:	f7fd f967 	bl	8000280 <__aeabi_uldivmod>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <UART_SetConfig+0x2d4>)
 8002fba:	fba3 2301 	umull	r2, r3, r3, r1
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2264      	movs	r2, #100	; 0x64
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	1acb      	subs	r3, r1, r3
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <UART_SetConfig+0x2d4>)
 8002fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fdc:	441c      	add	r4, r3
 8002fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fe8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	464b      	mov	r3, r9
 8002ff4:	1891      	adds	r1, r2, r2
 8002ff6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ff8:	415b      	adcs	r3, r3
 8002ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ffc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003000:	4641      	mov	r1, r8
 8003002:	1851      	adds	r1, r2, r1
 8003004:	6339      	str	r1, [r7, #48]	; 0x30
 8003006:	4649      	mov	r1, r9
 8003008:	414b      	adcs	r3, r1
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003018:	4659      	mov	r1, fp
 800301a:	00cb      	lsls	r3, r1, #3
 800301c:	4651      	mov	r1, sl
 800301e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003022:	4651      	mov	r1, sl
 8003024:	00ca      	lsls	r2, r1, #3
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	4603      	mov	r3, r0
 800302c:	4642      	mov	r2, r8
 800302e:	189b      	adds	r3, r3, r2
 8003030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003034:	464b      	mov	r3, r9
 8003036:	460a      	mov	r2, r1
 8003038:	eb42 0303 	adc.w	r3, r2, r3
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800304c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003054:	460b      	mov	r3, r1
 8003056:	18db      	adds	r3, r3, r3
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	4613      	mov	r3, r2
 800305c:	eb42 0303 	adc.w	r3, r2, r3
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003066:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800306a:	f7fd f909 	bl	8000280 <__aeabi_uldivmod>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <UART_SetConfig+0x2d4>)
 8003074:	fba3 1302 	umull	r1, r3, r3, r2
 8003078:	095b      	lsrs	r3, r3, #5
 800307a:	2164      	movs	r1, #100	; 0x64
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	3332      	adds	r3, #50	; 0x32
 8003086:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <UART_SetConfig+0x2d4>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	f003 0207 	and.w	r2, r3, #7
 8003092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4422      	add	r2, r4
 800309a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800309c:	e105      	b.n	80032aa <UART_SetConfig+0x4d6>
 800309e:	bf00      	nop
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40011400 	.word	0x40011400
 80030a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	6239      	str	r1, [r7, #32]
 80030c6:	415b      	adcs	r3, r3
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ce:	4641      	mov	r1, r8
 80030d0:	1854      	adds	r4, r2, r1
 80030d2:	4649      	mov	r1, r9
 80030d4:	eb43 0501 	adc.w	r5, r3, r1
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	00eb      	lsls	r3, r5, #3
 80030e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e6:	00e2      	lsls	r2, r4, #3
 80030e8:	4614      	mov	r4, r2
 80030ea:	461d      	mov	r5, r3
 80030ec:	4643      	mov	r3, r8
 80030ee:	18e3      	adds	r3, r4, r3
 80030f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030f4:	464b      	mov	r3, r9
 80030f6:	eb45 0303 	adc.w	r3, r5, r3
 80030fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800310a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800311a:	4629      	mov	r1, r5
 800311c:	008b      	lsls	r3, r1, #2
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003124:	4621      	mov	r1, r4
 8003126:	008a      	lsls	r2, r1, #2
 8003128:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800312c:	f7fd f8a8 	bl	8000280 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4b60      	ldr	r3, [pc, #384]	; (80032b8 <UART_SetConfig+0x4e4>)
 8003136:	fba3 2302 	umull	r2, r3, r3, r2
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	011c      	lsls	r4, r3, #4
 800313e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003142:	2200      	movs	r2, #0
 8003144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003148:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800314c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	1891      	adds	r1, r2, r2
 8003156:	61b9      	str	r1, [r7, #24]
 8003158:	415b      	adcs	r3, r3
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003160:	4641      	mov	r1, r8
 8003162:	1851      	adds	r1, r2, r1
 8003164:	6139      	str	r1, [r7, #16]
 8003166:	4649      	mov	r1, r9
 8003168:	414b      	adcs	r3, r1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003178:	4659      	mov	r1, fp
 800317a:	00cb      	lsls	r3, r1, #3
 800317c:	4651      	mov	r1, sl
 800317e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003182:	4651      	mov	r1, sl
 8003184:	00ca      	lsls	r2, r1, #3
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	4603      	mov	r3, r0
 800318c:	4642      	mov	r2, r8
 800318e:	189b      	adds	r3, r3, r2
 8003190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003194:	464b      	mov	r3, r9
 8003196:	460a      	mov	r2, r1
 8003198:	eb42 0303 	adc.w	r3, r2, r3
 800319c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80031aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031b8:	4649      	mov	r1, r9
 80031ba:	008b      	lsls	r3, r1, #2
 80031bc:	4641      	mov	r1, r8
 80031be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031c2:	4641      	mov	r1, r8
 80031c4:	008a      	lsls	r2, r1, #2
 80031c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031ca:	f7fd f859 	bl	8000280 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <UART_SetConfig+0x4e4>)
 80031d4:	fba3 1302 	umull	r1, r3, r3, r2
 80031d8:	095b      	lsrs	r3, r3, #5
 80031da:	2164      	movs	r1, #100	; 0x64
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	3332      	adds	r3, #50	; 0x32
 80031e6:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <UART_SetConfig+0x4e4>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f2:	441c      	add	r4, r3
 80031f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031f8:	2200      	movs	r2, #0
 80031fa:	673b      	str	r3, [r7, #112]	; 0x70
 80031fc:	677a      	str	r2, [r7, #116]	; 0x74
 80031fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003202:	4642      	mov	r2, r8
 8003204:	464b      	mov	r3, r9
 8003206:	1891      	adds	r1, r2, r2
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	415b      	adcs	r3, r3
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003212:	4641      	mov	r1, r8
 8003214:	1851      	adds	r1, r2, r1
 8003216:	6039      	str	r1, [r7, #0]
 8003218:	4649      	mov	r1, r9
 800321a:	414b      	adcs	r3, r1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800322a:	4659      	mov	r1, fp
 800322c:	00cb      	lsls	r3, r1, #3
 800322e:	4651      	mov	r1, sl
 8003230:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003234:	4651      	mov	r1, sl
 8003236:	00ca      	lsls	r2, r1, #3
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	4603      	mov	r3, r0
 800323e:	4642      	mov	r2, r8
 8003240:	189b      	adds	r3, r3, r2
 8003242:	66bb      	str	r3, [r7, #104]	; 0x68
 8003244:	464b      	mov	r3, r9
 8003246:	460a      	mov	r2, r1
 8003248:	eb42 0303 	adc.w	r3, r2, r3
 800324c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800324e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	663b      	str	r3, [r7, #96]	; 0x60
 8003258:	667a      	str	r2, [r7, #100]	; 0x64
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003266:	4649      	mov	r1, r9
 8003268:	008b      	lsls	r3, r1, #2
 800326a:	4641      	mov	r1, r8
 800326c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003270:	4641      	mov	r1, r8
 8003272:	008a      	lsls	r2, r1, #2
 8003274:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003278:	f7fd f802 	bl	8000280 <__aeabi_uldivmod>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <UART_SetConfig+0x4e4>)
 8003282:	fba3 1302 	umull	r1, r3, r3, r2
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2164      	movs	r1, #100	; 0x64
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	3332      	adds	r3, #50	; 0x32
 8003294:	4a08      	ldr	r2, [pc, #32]	; (80032b8 <UART_SetConfig+0x4e4>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4422      	add	r2, r4
 80032a8:	609a      	str	r2, [r3, #8]
}
 80032aa:	bf00      	nop
 80032ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	51eb851f 	.word	0x51eb851f

080032bc <__NVIC_SetPriority>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003314:	2100      	movs	r1, #0
 8003316:	f06f 0004 	mvn.w	r0, #4
 800331a:	f7ff ffcf 	bl	80032bc <__NVIC_SetPriority>
#endif
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800332a:	f3ef 8305 	mrs	r3, IPSR
 800332e:	603b      	str	r3, [r7, #0]
  return(result);
 8003330:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003336:	f06f 0305 	mvn.w	r3, #5
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e00c      	b.n	8003358 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <osKernelInitialize+0x44>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003346:	4b08      	ldr	r3, [pc, #32]	; (8003368 <osKernelInitialize+0x44>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	e002      	b.n	8003358 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003358:	687b      	ldr	r3, [r7, #4]
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000178 	.word	0x20000178

0800336c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003372:	f3ef 8305 	mrs	r3, IPSR
 8003376:	603b      	str	r3, [r7, #0]
  return(result);
 8003378:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <osKernelStart+0x1a>
    stat = osErrorISR;
 800337e:	f06f 0305 	mvn.w	r3, #5
 8003382:	607b      	str	r3, [r7, #4]
 8003384:	e010      	b.n	80033a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <osKernelStart+0x48>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d109      	bne.n	80033a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800338e:	f7ff ffbf 	bl	8003310 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <osKernelStart+0x48>)
 8003394:	2202      	movs	r2, #2
 8003396:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003398:	f001 f866 	bl	8004468 <vTaskStartScheduler>
      stat = osOK;
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e002      	b.n	80033a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000178 	.word	0x20000178

080033b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af04      	add	r7, sp, #16
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c8:	f3ef 8305 	mrs	r3, IPSR
 80033cc:	617b      	str	r3, [r7, #20]
  return(result);
 80033ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d17e      	bne.n	80034d2 <osThreadNew+0x11a>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d07b      	beq.n	80034d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80033de:	2318      	movs	r3, #24
 80033e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d045      	beq.n	800347e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <osThreadNew+0x48>
        name = attr->name;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <osThreadNew+0x6e>
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	2b38      	cmp	r3, #56	; 0x38
 8003418:	d805      	bhi.n	8003426 <osThreadNew+0x6e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <osThreadNew+0x72>
        return (NULL);
 8003426:	2300      	movs	r3, #0
 8003428:	e054      	b.n	80034d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	089b      	lsrs	r3, r3, #2
 8003438:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00e      	beq.n	8003460 <osThreadNew+0xa8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b5b      	cmp	r3, #91	; 0x5b
 8003448:	d90a      	bls.n	8003460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <osThreadNew+0xa8>
        mem = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	e010      	b.n	8003482 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10c      	bne.n	8003482 <osThreadNew+0xca>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d108      	bne.n	8003482 <osThreadNew+0xca>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <osThreadNew+0xca>
          mem = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	e001      	b.n	8003482 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d110      	bne.n	80034aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fe0c 	bl	80040bc <xTaskCreateStatic>
 80034a4:	4603      	mov	r3, r0
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e013      	b.n	80034d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d110      	bne.n	80034d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 fe57 	bl	8004176 <xTaskCreate>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <osThreadNew+0x11a>
            hTask = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034d2:	693b      	ldr	r3, [r7, #16]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e4:	f3ef 8305 	mrs	r3, IPSR
 80034e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <osDelay+0x1c>
    stat = osErrorISR;
 80034f0:	f06f 0305 	mvn.w	r3, #5
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e007      	b.n	8003508 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 ff7c 	bl	8004400 <vTaskDelay>
    }
  }

  return (stat);
 8003508:	68fb      	ldr	r3, [r7, #12]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <vApplicationGetIdleTaskMemory+0x2c>)
 8003524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4a06      	ldr	r2, [pc, #24]	; (8003544 <vApplicationGetIdleTaskMemory+0x30>)
 800352a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2280      	movs	r2, #128	; 0x80
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	2000017c 	.word	0x2000017c
 8003544:	200001d8 	.word	0x200001d8

08003548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <vApplicationGetTimerTaskMemory+0x2c>)
 8003558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	4a06      	ldr	r2, [pc, #24]	; (8003578 <vApplicationGetTimerTaskMemory+0x30>)
 800355e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	200003d8 	.word	0x200003d8
 8003578:	20000434 	.word	0x20000434

0800357c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f103 0208 	add.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0208 	add.w	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 0208 	add.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d103      	bne.n	800363e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e00c      	b.n	8003658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3308      	adds	r3, #8
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e002      	b.n	800364c <vListInsert+0x2e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d2f6      	bcs.n	8003646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800370a:	bf00      	nop
 800370c:	e7fe      	b.n	800370c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800370e:	f002 f851 	bl	80057b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	68f9      	ldr	r1, [r7, #12]
 800371c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	441a      	add	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373e:	3b01      	subs	r3, #1
 8003740:	68f9      	ldr	r1, [r7, #12]
 8003742:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	441a      	add	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d114      	bne.n	800378e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01a      	beq.n	80037a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3310      	adds	r3, #16
 8003770:	4618      	mov	r0, r3
 8003772:	f001 f903 	bl	800497c <xTaskRemoveFromEventList>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <xQueueGenericReset+0xcc>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	e009      	b.n	80037a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3310      	adds	r3, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fef2 	bl	800357c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff feed 	bl	800357c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037a2:	f002 f837 	bl	8005814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037a6:	2301      	movs	r3, #1
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	; 0x38
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037da:	bf00      	nop
 80037dc:	e7fe      	b.n	80037dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <xQueueGenericCreateStatic+0x52>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <xQueueGenericCreateStatic+0x56>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericCreateStatic+0x58>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <xQueueGenericCreateStatic+0x7e>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <xQueueGenericCreateStatic+0x82>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueGenericCreateStatic+0x84>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61fb      	str	r3, [r7, #28]
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003852:	2350      	movs	r3, #80	; 0x50
 8003854:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b50      	cmp	r3, #80	; 0x50
 800385a:	d00a      	beq.n	8003872 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	61bb      	str	r3, [r7, #24]
}
 800386e:	bf00      	nop
 8003870:	e7fe      	b.n	8003870 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003872:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003886:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4613      	mov	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f805 	bl	80038a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800389a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800389c:	4618      	mov	r0, r3
 800389e:	3730      	adds	r7, #48	; 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038d2:	2101      	movs	r1, #1
 80038d4:	69b8      	ldr	r0, [r7, #24]
 80038d6:	f7ff ff05 	bl	80036e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <xQueueGenericSend+0x32>
	__asm volatile
 8003908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390c:	f383 8811 	msr	BASEPRI, r3
 8003910:	f3bf 8f6f 	isb	sy
 8003914:	f3bf 8f4f 	dsb	sy
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800391a:	bf00      	nop
 800391c:	e7fe      	b.n	800391c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d103      	bne.n	800392c <xQueueGenericSend+0x40>
 8003924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <xQueueGenericSend+0x44>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <xQueueGenericSend+0x46>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <xQueueGenericSend+0x60>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003948:	bf00      	nop
 800394a:	e7fe      	b.n	800394a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <xQueueGenericSend+0x6e>
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <xQueueGenericSend+0x72>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSend+0x74>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericSend+0x8e>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	623b      	str	r3, [r7, #32]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397a:	f001 f9bd 	bl	8004cf8 <xTaskGetSchedulerState>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <xQueueGenericSend+0x9e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <xQueueGenericSend+0xa2>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <xQueueGenericSend+0xa4>
 800398e:	2300      	movs	r3, #0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericSend+0xbe>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61fb      	str	r3, [r7, #28]
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039aa:	f001 ff03 	bl	80057b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <xQueueGenericSend+0xd4>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d129      	bne.n	8003a14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c6:	f000 fa0b 	bl	8003de0 <prvCopyDataToQueue>
 80039ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	3324      	adds	r3, #36	; 0x24
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 ffcf 	bl	800497c <xTaskRemoveFromEventList>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e4:	4b3f      	ldr	r3, [pc, #252]	; (8003ae4 <xQueueGenericSend+0x1f8>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	e00a      	b.n	8003a0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039fc:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <xQueueGenericSend+0x1f8>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a0c:	f001 ff02 	bl	8005814 <vPortExitCritical>
				return pdPASS;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e063      	b.n	8003adc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1a:	f001 fefb 	bl	8005814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e05c      	b.n	8003adc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f809 	bl	8004a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a32:	2301      	movs	r3, #1
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a36:	f001 feed 	bl	8005814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3a:	f000 fd7b 	bl	8004534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a3e:	f001 feb9 	bl	80057b4 <vPortEnterCritical>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSend+0x16c>
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d103      	bne.n	8003a6e <xQueueGenericSend+0x182>
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a6e:	f001 fed1 	bl	8005814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a72:	1d3a      	adds	r2, r7, #4
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fff8 	bl	8004a70 <xTaskCheckForTimeOut>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d124      	bne.n	8003ad0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a88:	f000 faa2 	bl	8003fd0 <prvIsQueueFull>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	3310      	adds	r3, #16
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ff1e 	bl	80048dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa2:	f000 fa2d 	bl	8003f00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aa6:	f000 fd53 	bl	8004550 <xTaskResumeAll>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af7c 	bne.w	80039aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ab2:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <xQueueGenericSend+0x1f8>)
 8003ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	e772      	b.n	80039aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac6:	f000 fa1b 	bl	8003f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aca:	f000 fd41 	bl	8004550 <xTaskResumeAll>
 8003ace:	e76c      	b.n	80039aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ad2:	f000 fa15 	bl	8003f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ad6:	f000 fd3b 	bl	8004550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ada:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3738      	adds	r7, #56	; 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b090      	sub	sp, #64	; 0x40
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b12:	bf00      	nop
 8003b14:	e7fe      	b.n	8003b14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d103      	bne.n	8003b24 <xQueueGenericSendFromISR+0x3c>
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <xQueueGenericSendFromISR+0x40>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <xQueueGenericSendFromISR+0x42>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d103      	bne.n	8003b52 <xQueueGenericSendFromISR+0x6a>
 8003b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d101      	bne.n	8003b56 <xQueueGenericSendFromISR+0x6e>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <xQueueGenericSendFromISR+0x70>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	623b      	str	r3, [r7, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b72:	f001 ff01 	bl	8005978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b76:	f3ef 8211 	mrs	r2, BASEPRI
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	61fa      	str	r2, [r7, #28]
 8003b8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <xQueueGenericSendFromISR+0xbc>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d12f      	bne.n	8003c04 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bba:	f000 f911 	bl	8003de0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d112      	bne.n	8003bee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d016      	beq.n	8003bfe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	3324      	adds	r3, #36	; 0x24
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fed1 	bl	800497c <xTaskRemoveFromEventList>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e007      	b.n	8003bfe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	b25a      	sxtb	r2, r3
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c02:	e001      	b.n	8003c08 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3740      	adds	r7, #64	; 0x40
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	; 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xQueueReceive+0x30>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	623b      	str	r3, [r7, #32]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <xQueueReceive+0x3e>
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <xQueueReceive+0x42>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xQueueReceive+0x44>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <xQueueReceive+0x5e>
	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	61fb      	str	r3, [r7, #28]
}
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7e:	f001 f83b 	bl	8004cf8 <xTaskGetSchedulerState>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <xQueueReceive+0x6e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <xQueueReceive+0x72>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueReceive+0x74>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueReceive+0x8e>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	61bb      	str	r3, [r7, #24]
}
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cae:	f001 fd81 	bl	80057b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01f      	beq.n	8003cfe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc2:	f000 f8f7 	bl	8003eb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00f      	beq.n	8003cf6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	3310      	adds	r3, #16
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fe4e 	bl	800497c <xTaskRemoveFromEventList>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <xQueueReceive+0x1bc>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cf6:	f001 fd8d 	bl	8005814 <vPortExitCritical>
				return pdPASS;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e069      	b.n	8003dd2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d04:	f001 fd86 	bl	8005814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e062      	b.n	8003dd2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d12:	f107 0310 	add.w	r3, r7, #16
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fe94 	bl	8004a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d20:	f001 fd78 	bl	8005814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d24:	f000 fc06 	bl	8004534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d28:	f001 fd44 	bl	80057b4 <vPortEnterCritical>
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d32:	b25b      	sxtb	r3, r3
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d103      	bne.n	8003d42 <xQueueReceive+0x122>
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d48:	b25b      	sxtb	r3, r3
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d103      	bne.n	8003d58 <xQueueReceive+0x138>
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d58:	f001 fd5c 	bl	8005814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d5c:	1d3a      	adds	r2, r7, #4
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fe83 	bl	8004a70 <xTaskCheckForTimeOut>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d123      	bne.n	8003db8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d72:	f000 f917 	bl	8003fa4 <prvIsQueueEmpty>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d017      	beq.n	8003dac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	3324      	adds	r3, #36	; 0x24
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fda9 	bl	80048dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8c:	f000 f8b8 	bl	8003f00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d90:	f000 fbde 	bl	8004550 <xTaskResumeAll>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d189      	bne.n	8003cae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d9a:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <xQueueReceive+0x1bc>)
 8003d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	f3bf 8f6f 	isb	sy
 8003daa:	e780      	b.n	8003cae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dae:	f000 f8a7 	bl	8003f00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003db2:	f000 fbcd 	bl	8004550 <xTaskResumeAll>
 8003db6:	e77a      	b.n	8003cae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dba:	f000 f8a1 	bl	8003f00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dbe:	f000 fbc7 	bl	8004550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc4:	f000 f8ee 	bl	8003fa4 <prvIsQueueEmpty>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f43f af6f 	beq.w	8003cae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3730      	adds	r7, #48	; 0x30
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d14d      	bne.n	8003ea2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 ff92 	bl	8004d34 <xTaskPriorityDisinherit>
 8003e10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e043      	b.n	8003ea2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d119      	bne.n	8003e54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6858      	ldr	r0, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	f001 fff8 	bl	8005e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	441a      	add	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d32b      	bcc.n	8003ea2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	e026      	b.n	8003ea2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68d8      	ldr	r0, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	f001 ffde 	bl	8005e20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	441a      	add	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	425b      	negs	r3, r3
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d105      	bne.n	8003ea2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003eaa:	697b      	ldr	r3, [r7, #20]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	441a      	add	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d303      	bcc.n	8003ee8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68d9      	ldr	r1, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6838      	ldr	r0, [r7, #0]
 8003ef4:	f001 ff94 	bl	8005e20 <memcpy>
	}
}
 8003ef8:	bf00      	nop
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f08:	f001 fc54 	bl	80057b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f14:	e011      	b.n	8003f3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3324      	adds	r3, #36	; 0x24
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fd2a 	bl	800497c <xTaskRemoveFromEventList>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f2e:	f000 fe01 	bl	8004b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	dce9      	bgt.n	8003f16 <prvUnlockQueue+0x16>
 8003f42:	e000      	b.n	8003f46 <prvUnlockQueue+0x46>
					break;
 8003f44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	22ff      	movs	r2, #255	; 0xff
 8003f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f4e:	f001 fc61 	bl	8005814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f52:	f001 fc2f 	bl	80057b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f5e:	e011      	b.n	8003f84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd05 	bl	800497c <xTaskRemoveFromEventList>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f78:	f000 fddc 	bl	8004b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dce9      	bgt.n	8003f60 <prvUnlockQueue+0x60>
 8003f8c:	e000      	b.n	8003f90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	22ff      	movs	r2, #255	; 0xff
 8003f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f98:	f001 fc3c 	bl	8005814 <vPortExitCritical>
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fac:	f001 fc02 	bl	80057b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e001      	b.n	8003fc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fc2:	f001 fc27 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fd8:	f001 fbec 	bl	80057b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d102      	bne.n	8003fee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e001      	b.n	8003ff2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ff2:	f001 fc0f 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e014      	b.n	800403a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <vQueueAddToRegistry+0x50>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800401c:	490c      	ldr	r1, [pc, #48]	; (8004050 <vQueueAddToRegistry+0x50>)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004026:	4a0a      	ldr	r2, [pc, #40]	; (8004050 <vQueueAddToRegistry+0x50>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004032:	e006      	b.n	8004042 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b07      	cmp	r3, #7
 800403e:	d9e7      	bls.n	8004010 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000834 	.word	0x20000834

08004054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004064:	f001 fba6 	bl	80057b4 <vPortEnterCritical>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800406e:	b25b      	sxtb	r3, r3
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d103      	bne.n	800407e <vQueueWaitForMessageRestricted+0x2a>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004084:	b25b      	sxtb	r3, r3
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d103      	bne.n	8004094 <vQueueWaitForMessageRestricted+0x40>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004094:	f001 fbbe 	bl	8005814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3324      	adds	r3, #36	; 0x24
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fc3b 	bl	8004924 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff ff26 	bl	8003f00 <prvUnlockQueue>
	}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	; 0x38
 80040c0:	af04      	add	r7, sp, #16
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	623b      	str	r3, [r7, #32]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <xTaskCreateStatic+0x46>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	61fb      	str	r3, [r7, #28]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004102:	235c      	movs	r3, #92	; 0x5c
 8004104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b5c      	cmp	r3, #92	; 0x5c
 800410a:	d00a      	beq.n	8004122 <xTaskCreateStatic+0x66>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	61bb      	str	r3, [r7, #24]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004122:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01e      	beq.n	8004168 <xTaskCreateStatic+0xac>
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004138:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2202      	movs	r2, #2
 800413e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004142:	2300      	movs	r3, #0
 8004144:	9303      	str	r3, [sp, #12]
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	9302      	str	r3, [sp, #8]
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 f850 	bl	8004200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004162:	f000 f8dd 	bl	8004320 <prvAddNewTaskToReadyList>
 8004166:	e001      	b.n	800416c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800416c:	697b      	ldr	r3, [r7, #20]
	}
 800416e:	4618      	mov	r0, r3
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	; 0x30
 800417a:	af04      	add	r7, sp, #16
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	603b      	str	r3, [r7, #0]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f001 fc34 	bl	80059f8 <pvPortMalloc>
 8004190:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00e      	beq.n	80041b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004198:	205c      	movs	r0, #92	; 0x5c
 800419a:	f001 fc2d 	bl	80059f8 <pvPortMalloc>
 800419e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
 80041ac:	e005      	b.n	80041ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f001 fcee 	bl	8005b90 <vPortFree>
 80041b4:	e001      	b.n	80041ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d017      	beq.n	80041f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041c8:	88fa      	ldrh	r2, [r7, #6]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9303      	str	r3, [sp, #12]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	9302      	str	r3, [sp, #8]
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f80e 	bl	8004200 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e4:	69f8      	ldr	r0, [r7, #28]
 80041e6:	f000 f89b 	bl	8004320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	e002      	b.n	80041f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
 80041f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041f6:	69bb      	ldr	r3, [r7, #24]
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	461a      	mov	r2, r3
 8004218:	21a5      	movs	r1, #165	; 0xa5
 800421a:	f001 fe0f 	bl	8005e3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800421e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004228:	3b01      	subs	r3, #1
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	617b      	str	r3, [r7, #20]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01f      	beq.n	800429e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
 8004262:	e012      	b.n	800428a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	7819      	ldrb	r1, [r3, #0]
 800426c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	3334      	adds	r3, #52	; 0x34
 8004274:	460a      	mov	r2, r1
 8004276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	2b0f      	cmp	r3, #15
 800428e:	d9e9      	bls.n	8004264 <prvInitialiseNewTask+0x64>
 8004290:	e000      	b.n	8004294 <prvInitialiseNewTask+0x94>
			{
				break;
 8004292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800429c:	e003      	b.n	80042a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	2b37      	cmp	r3, #55	; 0x37
 80042aa:	d901      	bls.n	80042b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ac:	2337      	movs	r3, #55	; 0x37
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	2200      	movs	r2, #0
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f978 	bl	80035bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	3318      	adds	r3, #24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f973 	bl	80035bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	2200      	movs	r2, #0
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	69b8      	ldr	r0, [r7, #24]
 8004300:	f001 f928 	bl	8005554 <pxPortInitialiseStack>
 8004304:	4602      	mov	r2, r0
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004316:	bf00      	nop
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004328:	f001 fa44 	bl	80057b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800432c:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <prvAddNewTaskToReadyList+0xc4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a2c      	ldr	r2, [pc, #176]	; (80043e4 <prvAddNewTaskToReadyList+0xc4>)
 8004334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004336:	4b2c      	ldr	r3, [pc, #176]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800433e:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <prvAddNewTaskToReadyList+0xc4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d110      	bne.n	800436e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800434c:	f000 fc16 	bl	8004b7c <prvInitialiseTaskLists>
 8004350:	e00d      	b.n	800436e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004352:	4b26      	ldr	r3, [pc, #152]	; (80043ec <prvAddNewTaskToReadyList+0xcc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800435a:	4b23      	ldr	r3, [pc, #140]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d802      	bhi.n	800436e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004368:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <prvAddNewTaskToReadyList+0xd0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <prvAddNewTaskToReadyList+0xd0>)
 8004376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <prvAddNewTaskToReadyList+0xd0>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <prvAddNewTaskToReadyList+0xd4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d903      	bls.n	8004394 <prvAddNewTaskToReadyList+0x74>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	4a18      	ldr	r2, [pc, #96]	; (80043f4 <prvAddNewTaskToReadyList+0xd4>)
 8004392:	6013      	str	r3, [r2, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <prvAddNewTaskToReadyList+0xd8>)
 80043a2:	441a      	add	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7ff f913 	bl	80035d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043b0:	f001 fa30 	bl	8005814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <prvAddNewTaskToReadyList+0xcc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d207      	bcs.n	80043da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <prvAddNewTaskToReadyList+0xdc>)
 80043cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043da:	bf00      	nop
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000d48 	.word	0x20000d48
 80043e8:	20000874 	.word	0x20000874
 80043ec:	20000d54 	.word	0x20000d54
 80043f0:	20000d64 	.word	0x20000d64
 80043f4:	20000d50 	.word	0x20000d50
 80043f8:	20000878 	.word	0x20000878
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <vTaskDelay+0x60>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <vTaskDelay+0x30>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	60bb      	str	r3, [r7, #8]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004430:	f000 f880 	bl	8004534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004434:	2100      	movs	r1, #0
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fcea 	bl	8004e10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800443c:	f000 f888 	bl	8004550 <xTaskResumeAll>
 8004440:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <vTaskDelay+0x64>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000d70 	.word	0x20000d70
 8004464:	e000ed04 	.word	0xe000ed04

08004468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004476:	463a      	mov	r2, r7
 8004478:	1d39      	adds	r1, r7, #4
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff f848 	bl	8003514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	9202      	str	r2, [sp, #8]
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	460a      	mov	r2, r1
 8004496:	4921      	ldr	r1, [pc, #132]	; (800451c <vTaskStartScheduler+0xb4>)
 8004498:	4821      	ldr	r0, [pc, #132]	; (8004520 <vTaskStartScheduler+0xb8>)
 800449a:	f7ff fe0f 	bl	80040bc <xTaskCreateStatic>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <vTaskStartScheduler+0xbc>)
 80044a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044a4:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <vTaskStartScheduler+0xbc>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e001      	b.n	80044b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d102      	bne.n	80044c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044bc:	f000 fcfc 	bl	8004eb8 <xTimerCreateTimerTask>
 80044c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d116      	bne.n	80044f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <vTaskStartScheduler+0xc0>)
 80044de:	f04f 32ff 	mov.w	r2, #4294967295
 80044e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044e4:	4b11      	ldr	r3, [pc, #68]	; (800452c <vTaskStartScheduler+0xc4>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <vTaskStartScheduler+0xc8>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044f0:	f001 f8be 	bl	8005670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044f4:	e00e      	b.n	8004514 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d10a      	bne.n	8004514 <vTaskStartScheduler+0xac>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	60fb      	str	r3, [r7, #12]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vTaskStartScheduler+0xaa>
}
 8004514:	bf00      	nop
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08006760 	.word	0x08006760
 8004520:	08004b4d 	.word	0x08004b4d
 8004524:	20000d6c 	.word	0x20000d6c
 8004528:	20000d68 	.word	0x20000d68
 800452c:	20000d54 	.word	0x20000d54
 8004530:	20000d4c 	.word	0x20000d4c

08004534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <vTaskSuspendAll+0x18>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	4a03      	ldr	r2, [pc, #12]	; (800454c <vTaskSuspendAll+0x18>)
 8004540:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	20000d70 	.word	0x20000d70

08004550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800455e:	4b42      	ldr	r3, [pc, #264]	; (8004668 <xTaskResumeAll+0x118>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <xTaskResumeAll+0x2c>
	__asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	603b      	str	r3, [r7, #0]
}
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800457c:	f001 f91a 	bl	80057b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004580:	4b39      	ldr	r3, [pc, #228]	; (8004668 <xTaskResumeAll+0x118>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3b01      	subs	r3, #1
 8004586:	4a38      	ldr	r2, [pc, #224]	; (8004668 <xTaskResumeAll+0x118>)
 8004588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <xTaskResumeAll+0x118>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d162      	bne.n	8004658 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004592:	4b36      	ldr	r3, [pc, #216]	; (800466c <xTaskResumeAll+0x11c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d05e      	beq.n	8004658 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800459a:	e02f      	b.n	80045fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459c:	4b34      	ldr	r3, [pc, #208]	; (8004670 <xTaskResumeAll+0x120>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3318      	adds	r3, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f871 	bl	8003690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3304      	adds	r3, #4
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff f86c 	bl	8003690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <xTaskResumeAll+0x124>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <xTaskResumeAll+0x7c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a2a      	ldr	r2, [pc, #168]	; (8004674 <xTaskResumeAll+0x124>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a27      	ldr	r2, [pc, #156]	; (8004678 <xTaskResumeAll+0x128>)
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe fff7 	bl	80035d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <xTaskResumeAll+0x12c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045f6:	4b22      	ldr	r3, [pc, #136]	; (8004680 <xTaskResumeAll+0x130>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <xTaskResumeAll+0x120>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1cb      	bne.n	800459c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800460a:	f000 fb55 	bl	8004cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <xTaskResumeAll+0x134>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800461a:	f000 f847 	bl	80046ac <xTaskIncrementTick>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <xTaskResumeAll+0x130>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3b01      	subs	r3, #1
 800462e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f1      	bne.n	800461a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <xTaskResumeAll+0x134>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <xTaskResumeAll+0x130>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004648:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <xTaskResumeAll+0x138>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004658:	f001 f8dc 	bl	8005814 <vPortExitCritical>

	return xAlreadyYielded;
 800465c:	68bb      	ldr	r3, [r7, #8]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20000d70 	.word	0x20000d70
 800466c:	20000d48 	.word	0x20000d48
 8004670:	20000d08 	.word	0x20000d08
 8004674:	20000d50 	.word	0x20000d50
 8004678:	20000878 	.word	0x20000878
 800467c:	20000874 	.word	0x20000874
 8004680:	20000d5c 	.word	0x20000d5c
 8004684:	20000d58 	.word	0x20000d58
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <xTaskGetTickCount+0x1c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004698:	687b      	ldr	r3, [r7, #4]
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000d4c 	.word	0x20000d4c

080046ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b6:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <xTaskIncrementTick+0x148>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 808f 	bne.w	80047de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046c0:	4b4d      	ldr	r3, [pc, #308]	; (80047f8 <xTaskIncrementTick+0x14c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c8:	4a4b      	ldr	r2, [pc, #300]	; (80047f8 <xTaskIncrementTick+0x14c>)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d120      	bne.n	8004716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d4:	4b49      	ldr	r3, [pc, #292]	; (80047fc <xTaskIncrementTick+0x150>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	603b      	str	r3, [r7, #0]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xTaskIncrementTick+0x46>
 80046f4:	4b41      	ldr	r3, [pc, #260]	; (80047fc <xTaskIncrementTick+0x150>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <xTaskIncrementTick+0x154>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3f      	ldr	r2, [pc, #252]	; (80047fc <xTaskIncrementTick+0x150>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4a3f      	ldr	r2, [pc, #252]	; (8004800 <xTaskIncrementTick+0x154>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <xTaskIncrementTick+0x158>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <xTaskIncrementTick+0x158>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	f000 fad1 	bl	8004cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <xTaskIncrementTick+0x15c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d349      	bcc.n	80047b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <xTaskIncrementTick+0x150>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <xTaskIncrementTick+0x15c>)
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	601a      	str	r2, [r3, #0]
					break;
 8004732:	e03f      	b.n	80047b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <xTaskIncrementTick+0x150>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d203      	bcs.n	8004754 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <xTaskIncrementTick+0x15c>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004752:	e02f      	b.n	80047b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe ff99 	bl	8003690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff90 	bl	8003690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <xTaskIncrementTick+0x160>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d903      	bls.n	8004784 <xTaskIncrementTick+0xd8>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4a22      	ldr	r2, [pc, #136]	; (800480c <xTaskIncrementTick+0x160>)
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <xTaskIncrementTick+0x164>)
 8004792:	441a      	add	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe ff1b 	bl	80035d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <xTaskIncrementTick+0x168>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3b8      	bcc.n	8004720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b2:	e7b5      	b.n	8004720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <xTaskIncrementTick+0x168>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4915      	ldr	r1, [pc, #84]	; (8004810 <xTaskIncrementTick+0x164>)
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d901      	bls.n	80047d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <xTaskIncrementTick+0x16c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80047d8:	2301      	movs	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e004      	b.n	80047e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <xTaskIncrementTick+0x170>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a0d      	ldr	r2, [pc, #52]	; (800481c <xTaskIncrementTick+0x170>)
 80047e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000d70 	.word	0x20000d70
 80047f8:	20000d4c 	.word	0x20000d4c
 80047fc:	20000d00 	.word	0x20000d00
 8004800:	20000d04 	.word	0x20000d04
 8004804:	20000d60 	.word	0x20000d60
 8004808:	20000d68 	.word	0x20000d68
 800480c:	20000d50 	.word	0x20000d50
 8004810:	20000878 	.word	0x20000878
 8004814:	20000874 	.word	0x20000874
 8004818:	20000d5c 	.word	0x20000d5c
 800481c:	20000d58 	.word	0x20000d58

08004820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <vTaskSwitchContext+0xa8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <vTaskSwitchContext+0xac>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004834:	e041      	b.n	80048ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004836:	4b25      	ldr	r3, [pc, #148]	; (80048cc <vTaskSwitchContext+0xac>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483c:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <vTaskSwitchContext+0xb0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e010      	b.n	8004866 <vTaskSwitchContext+0x46>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vTaskSwitchContext+0x40>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	607b      	str	r3, [r7, #4]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vTaskSwitchContext+0x3e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <vTaskSwitchContext+0xb4>)
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0e4      	beq.n	8004844 <vTaskSwitchContext+0x24>
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4a13      	ldr	r2, [pc, #76]	; (80048d4 <vTaskSwitchContext+0xb4>)
 8004886:	4413      	add	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3308      	adds	r3, #8
 800489c:	429a      	cmp	r2, r3
 800489e:	d104      	bne.n	80048aa <vTaskSwitchContext+0x8a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <vTaskSwitchContext+0xb8>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	4a06      	ldr	r2, [pc, #24]	; (80048d0 <vTaskSwitchContext+0xb0>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000d70 	.word	0x20000d70
 80048cc:	20000d5c 	.word	0x20000d5c
 80048d0:	20000d50 	.word	0x20000d50
 80048d4:	20000878 	.word	0x20000878
 80048d8:	20000874 	.word	0x20000874

080048dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	60fb      	str	r3, [r7, #12]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004902:	4b07      	ldr	r3, [pc, #28]	; (8004920 <vTaskPlaceOnEventList+0x44>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3318      	adds	r3, #24
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fe fe87 	bl	800361e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004910:	2101      	movs	r1, #1
 8004912:	6838      	ldr	r0, [r7, #0]
 8004914:	f000 fa7c 	bl	8004e10 <prvAddCurrentTaskToDelayedList>
}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000874 	.word	0x20000874

08004924 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	617b      	str	r3, [r7, #20]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vTaskPlaceOnEventListRestricted+0x54>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3318      	adds	r3, #24
 8004952:	4619      	mov	r1, r3
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7fe fe3e 	bl	80035d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295
 8004964:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	68b8      	ldr	r0, [r7, #8]
 800496a:	f000 fa51 	bl	8004e10 <prvAddCurrentTaskToDelayedList>
	}
 800496e:	bf00      	nop
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000874 	.word	0x20000874

0800497c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60fb      	str	r3, [r7, #12]
}
 80049a4:	bf00      	nop
 80049a6:	e7fe      	b.n	80049a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	3318      	adds	r3, #24
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fe6f 	bl	8003690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b2:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <xTaskRemoveFromEventList+0xb0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d11d      	bne.n	80049f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3304      	adds	r3, #4
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fe66 	bl	8003690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <xTaskRemoveFromEventList+0xb4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <xTaskRemoveFromEventList+0x5c>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <xTaskRemoveFromEventList+0xb4>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <xTaskRemoveFromEventList+0xb8>)
 80049e6:	441a      	add	r2, r3
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fe fdf1 	bl	80035d6 <vListInsertEnd>
 80049f4:	e005      	b.n	8004a02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	3318      	adds	r3, #24
 80049fa:	4619      	mov	r1, r3
 80049fc:	480e      	ldr	r0, [pc, #56]	; (8004a38 <xTaskRemoveFromEventList+0xbc>)
 80049fe:	f7fe fdea 	bl	80035d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <xTaskRemoveFromEventList+0xc0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d905      	bls.n	8004a1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <xTaskRemoveFromEventList+0xc4>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e001      	b.n	8004a20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a20:	697b      	ldr	r3, [r7, #20]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000d70 	.word	0x20000d70
 8004a30:	20000d50 	.word	0x20000d50
 8004a34:	20000878 	.word	0x20000878
 8004a38:	20000d08 	.word	0x20000d08
 8004a3c:	20000874 	.word	0x20000874
 8004a40:	20000d5c 	.word	0x20000d5c

08004a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <vTaskInternalSetTimeOutState+0x24>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <vTaskInternalSetTimeOutState+0x28>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	605a      	str	r2, [r3, #4]
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000d60 	.word	0x20000d60
 8004a6c:	20000d4c 	.word	0x20000d4c

08004a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	613b      	str	r3, [r7, #16]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60fb      	str	r3, [r7, #12]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ab2:	f000 fe7f 	bl	80057b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <xTaskCheckForTimeOut+0xbc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d102      	bne.n	8004ad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	e023      	b.n	8004b1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <xTaskCheckForTimeOut+0xc0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d007      	beq.n	8004af2 <xTaskCheckForTimeOut+0x82>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
 8004af0:	e015      	b.n	8004b1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d20b      	bcs.n	8004b14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad2      	subs	r2, r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff ff9b 	bl	8004a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	e004      	b.n	8004b1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b1e:	f000 fe79 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8004b22:	69fb      	ldr	r3, [r7, #28]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	20000d4c 	.word	0x20000d4c
 8004b30:	20000d60 	.word	0x20000d60

08004b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <vTaskMissedYield+0x14>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000d5c 	.word	0x20000d5c

08004b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b54:	f000 f852 	bl	8004bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <prvIdleTask+0x28>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d9f9      	bls.n	8004b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <prvIdleTask+0x2c>)
 8004b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b70:	e7f0      	b.n	8004b54 <prvIdleTask+0x8>
 8004b72:	bf00      	nop
 8004b74:	20000878 	.word	0x20000878
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	e00c      	b.n	8004ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4a12      	ldr	r2, [pc, #72]	; (8004bdc <prvInitialiseTaskLists+0x60>)
 8004b94:	4413      	add	r3, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fcf0 	bl	800357c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b37      	cmp	r3, #55	; 0x37
 8004ba6:	d9ef      	bls.n	8004b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ba8:	480d      	ldr	r0, [pc, #52]	; (8004be0 <prvInitialiseTaskLists+0x64>)
 8004baa:	f7fe fce7 	bl	800357c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bae:	480d      	ldr	r0, [pc, #52]	; (8004be4 <prvInitialiseTaskLists+0x68>)
 8004bb0:	f7fe fce4 	bl	800357c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bb4:	480c      	ldr	r0, [pc, #48]	; (8004be8 <prvInitialiseTaskLists+0x6c>)
 8004bb6:	f7fe fce1 	bl	800357c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bba:	480c      	ldr	r0, [pc, #48]	; (8004bec <prvInitialiseTaskLists+0x70>)
 8004bbc:	f7fe fcde 	bl	800357c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bc0:	480b      	ldr	r0, [pc, #44]	; (8004bf0 <prvInitialiseTaskLists+0x74>)
 8004bc2:	f7fe fcdb 	bl	800357c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <prvInitialiseTaskLists+0x78>)
 8004bc8:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <prvInitialiseTaskLists+0x64>)
 8004bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <prvInitialiseTaskLists+0x7c>)
 8004bce:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <prvInitialiseTaskLists+0x68>)
 8004bd0:	601a      	str	r2, [r3, #0]
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000878 	.word	0x20000878
 8004be0:	20000cd8 	.word	0x20000cd8
 8004be4:	20000cec 	.word	0x20000cec
 8004be8:	20000d08 	.word	0x20000d08
 8004bec:	20000d1c 	.word	0x20000d1c
 8004bf0:	20000d34 	.word	0x20000d34
 8004bf4:	20000d00 	.word	0x20000d00
 8004bf8:	20000d04 	.word	0x20000d04

08004bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c02:	e019      	b.n	8004c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c04:	f000 fdd6 	bl	80057b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	4b10      	ldr	r3, [pc, #64]	; (8004c4c <prvCheckTasksWaitingTermination+0x50>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe fd3b 	bl	8003690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <prvCheckTasksWaitingTermination+0x54>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <prvCheckTasksWaitingTermination+0x54>)
 8004c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <prvCheckTasksWaitingTermination+0x58>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <prvCheckTasksWaitingTermination+0x58>)
 8004c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c2e:	f000 fdf1 	bl	8005814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f810 	bl	8004c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <prvCheckTasksWaitingTermination+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e1      	bne.n	8004c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000d1c 	.word	0x20000d1c
 8004c50:	20000d48 	.word	0x20000d48
 8004c54:	20000d30 	.word	0x20000d30

08004c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 ff8e 	bl	8005b90 <vPortFree>
				vPortFree( pxTCB );
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 ff8b 	bl	8005b90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c7a:	e018      	b.n	8004cae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d103      	bne.n	8004c8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 ff82 	bl	8005b90 <vPortFree>
	}
 8004c8c:	e00f      	b.n	8004cae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d00a      	beq.n	8004cae <prvDeleteTCB+0x56>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60fb      	str	r3, [r7, #12]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <prvDeleteTCB+0x54>
	}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <prvResetNextTaskUnblockTime+0x38>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cd0:	e008      	b.n	8004ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd2:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <prvResetNextTaskUnblockTime+0x38>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	20000d00 	.word	0x20000d00
 8004cf4:	20000d68 	.word	0x20000d68

08004cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <xTaskGetSchedulerState+0x34>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d102      	bne.n	8004d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d06:	2301      	movs	r3, #1
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e008      	b.n	8004d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <xTaskGetSchedulerState+0x38>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d14:	2302      	movs	r3, #2
 8004d16:	607b      	str	r3, [r7, #4]
 8004d18:	e001      	b.n	8004d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d1e:	687b      	ldr	r3, [r7, #4]
	}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	20000d54 	.word	0x20000d54
 8004d30:	20000d70 	.word	0x20000d70

08004d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d056      	beq.n	8004df8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <xTaskPriorityDisinherit+0xd0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d00a      	beq.n	8004d6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	60fb      	str	r3, [r7, #12]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60bb      	str	r3, [r7, #8]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d02c      	beq.n	8004df8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d128      	bne.n	8004df8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fe fc70 	bl	8003690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <xTaskPriorityDisinherit+0xd4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d903      	bls.n	8004dd8 <xTaskPriorityDisinherit+0xa4>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <xTaskPriorityDisinherit+0xd4>)
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4a09      	ldr	r2, [pc, #36]	; (8004e0c <xTaskPriorityDisinherit+0xd8>)
 8004de6:	441a      	add	r2, r3
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f7fe fbf1 	bl	80035d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df8:	697b      	ldr	r3, [r7, #20]
	}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000874 	.word	0x20000874
 8004e08:	20000d50 	.word	0x20000d50
 8004e0c:	20000878 	.word	0x20000878

08004e10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e1a:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e20:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3304      	adds	r3, #4
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fe fc32 	bl	8003690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d10a      	bne.n	8004e4a <prvAddCurrentTaskToDelayedList+0x3a>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4819      	ldr	r0, [pc, #100]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004e44:	f7fe fbc7 	bl	80035d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e48:	e026      	b.n	8004e98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d209      	bcs.n	8004e76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e62:	4b12      	ldr	r3, [pc, #72]	; (8004eac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f7fe fbd5 	bl	800361e <vListInsert>
}
 8004e74:	e010      	b.n	8004e98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e76:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fe fbcb 	bl	800361e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d202      	bcs.n	8004e98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e92:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6013      	str	r3, [r2, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20000d4c 	.word	0x20000d4c
 8004ea4:	20000874 	.word	0x20000874
 8004ea8:	20000d34 	.word	0x20000d34
 8004eac:	20000d04 	.word	0x20000d04
 8004eb0:	20000d00 	.word	0x20000d00
 8004eb4:	20000d68 	.word	0x20000d68

08004eb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ec2:	f000 fb07 	bl	80054d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <xTimerCreateTimerTask+0x80>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d021      	beq.n	8004f12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ed6:	1d3a      	adds	r2, r7, #4
 8004ed8:	f107 0108 	add.w	r1, r7, #8
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fb31 	bl	8003548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	9202      	str	r2, [sp, #8]
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	4910      	ldr	r1, [pc, #64]	; (8004f3c <xTimerCreateTimerTask+0x84>)
 8004efa:	4811      	ldr	r0, [pc, #68]	; (8004f40 <xTimerCreateTimerTask+0x88>)
 8004efc:	f7ff f8de 	bl	80040bc <xTaskCreateStatic>
 8004f00:	4603      	mov	r3, r0
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <xTimerCreateTimerTask+0x8c>)
 8004f04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTimerCreateTimerTask+0x8c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	613b      	str	r3, [r7, #16]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000da4 	.word	0x20000da4
 8004f3c:	08006768 	.word	0x08006768
 8004f40:	0800507d 	.word	0x0800507d
 8004f44:	20000da8 	.word	0x20000da8

08004f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	623b      	str	r3, [r7, #32]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02a      	beq.n	8004fd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b05      	cmp	r3, #5
 8004f8e:	dc18      	bgt.n	8004fc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f90:	f7ff feb2 	bl	8004cf8 <xTaskGetSchedulerState>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d109      	bne.n	8004fae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	f107 0110 	add.w	r1, r7, #16
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	f7fe fca1 	bl	80038ec <xQueueGenericSend>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
 8004fac:	e012      	b.n	8004fd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	f107 0110 	add.w	r1, r7, #16
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f7fe fc97 	bl	80038ec <xQueueGenericSend>
 8004fbe:	6278      	str	r0, [r7, #36]	; 0x24
 8004fc0:	e008      	b.n	8004fd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <xTimerGenericCommand+0x98>)
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	f107 0110 	add.w	r1, r7, #16
 8004fca:	2300      	movs	r3, #0
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	f7fe fd8b 	bl	8003ae8 <xQueueGenericSendFromISR>
 8004fd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000da4 	.word	0x20000da4

08004fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <prvProcessExpiredTimer+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe fb47 	bl	8003690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d022      	beq.n	8005056 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	18d1      	adds	r1, r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	6978      	ldr	r0, [r7, #20]
 800501e:	f000 f8d1 	bl	80051c4 <prvInsertTimerInActiveList>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01f      	beq.n	8005068 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005028:	2300      	movs	r3, #0
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2300      	movs	r3, #0
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	2100      	movs	r1, #0
 8005032:	6978      	ldr	r0, [r7, #20]
 8005034:	f7ff ff88 	bl	8004f48 <xTimerGenericCommand>
 8005038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d113      	bne.n	8005068 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	f023 0301 	bic.w	r3, r3, #1
 8005060:	b2da      	uxtb	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	6978      	ldr	r0, [r7, #20]
 800506e:	4798      	blx	r3
}
 8005070:	bf00      	nop
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000d9c 	.word	0x20000d9c

0800507c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005084:	f107 0308 	add.w	r3, r7, #8
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f857 	bl	800513c <prvGetNextExpireTime>
 800508e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4619      	mov	r1, r3
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 f803 	bl	80050a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800509a:	f000 f8d5 	bl	8005248 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800509e:	e7f1      	b.n	8005084 <prvTimerTask+0x8>

080050a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050aa:	f7ff fa43 	bl	8004534 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f866 	bl	8005184 <prvSampleTimeNow>
 80050b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d130      	bne.n	8005122 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <prvProcessTimerOrBlockTask+0x3c>
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d806      	bhi.n	80050dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050ce:	f7ff fa3f 	bl	8004550 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ff85 	bl	8004fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050da:	e024      	b.n	8005126 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80050e2:	4b13      	ldr	r3, [pc, #76]	; (8005130 <prvProcessTimerOrBlockTask+0x90>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <prvProcessTimerOrBlockTask+0x50>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <prvProcessTimerOrBlockTask+0x52>
 80050f0:	2300      	movs	r3, #0
 80050f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80050f4:	4b0f      	ldr	r3, [pc, #60]	; (8005134 <prvProcessTimerOrBlockTask+0x94>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	f7fe ffa7 	bl	8004054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005106:	f7ff fa23 	bl	8004550 <xTaskResumeAll>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <prvProcessTimerOrBlockTask+0x98>)
 8005112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
}
 8005120:	e001      	b.n	8005126 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005122:	f7ff fa15 	bl	8004550 <xTaskResumeAll>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000da0 	.word	0x20000da0
 8005134:	20000da4 	.word	0x20000da4
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <prvGetNextExpireTime+0x44>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <prvGetNextExpireTime+0x16>
 800514e:	2201      	movs	r2, #1
 8005150:	e000      	b.n	8005154 <prvGetNextExpireTime+0x18>
 8005152:	2200      	movs	r2, #0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <prvGetNextExpireTime+0x44>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e001      	b.n	8005170 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000d9c 	.word	0x20000d9c

08005184 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800518c:	f7ff fa7e 	bl	800468c <xTaskGetTickCount>
 8005190:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <prvSampleTimeNow+0x3c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d205      	bcs.n	80051a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800519c:	f000 f936 	bl	800540c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e002      	b.n	80051ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvSampleTimeNow+0x3c>)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051b4:	68fb      	ldr	r3, [r7, #12]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000dac 	.word	0x20000dac

080051c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d812      	bhi.n	8005210 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80051f8:	2301      	movs	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e01b      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <prvInsertTimerInActiveList+0x7c>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f7fe fa08 	bl	800361e <vListInsert>
 800520e:	e012      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	d206      	bcs.n	8005226 <prvInsertTimerInActiveList+0x62>
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	429a      	cmp	r2, r3
 800521e:	d302      	bcc.n	8005226 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	e007      	b.n	8005236 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <prvInsertTimerInActiveList+0x80>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3304      	adds	r3, #4
 800522e:	4619      	mov	r1, r3
 8005230:	4610      	mov	r0, r2
 8005232:	f7fe f9f4 	bl	800361e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005236:	697b      	ldr	r3, [r7, #20]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20000da0 	.word	0x20000da0
 8005244:	20000d9c 	.word	0x20000d9c

08005248 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08e      	sub	sp, #56	; 0x38
 800524c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800524e:	e0ca      	b.n	80053e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	da18      	bge.n	8005288 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005256:	1d3b      	adds	r3, r7, #4
 8005258:	3304      	adds	r3, #4
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	61fb      	str	r3, [r7, #28]
}
 8005274:	bf00      	nop
 8005276:	e7fe      	b.n	8005276 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800527e:	6850      	ldr	r0, [r2, #4]
 8005280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	4611      	mov	r1, r2
 8005286:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f2c0 80aa 	blt.w	80053e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	3304      	adds	r3, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fe f9f5 	bl	8003690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a6:	463b      	mov	r3, r7
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff6b 	bl	8005184 <prvSampleTimeNow>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b09      	cmp	r3, #9
 80052b4:	f200 8097 	bhi.w	80053e6 <prvProcessReceivedCommands+0x19e>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <prvProcessReceivedCommands+0x78>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052e9 	.word	0x080052e9
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052e9 	.word	0x080052e9
 80052cc:	0800535d 	.word	0x0800535d
 80052d0:	08005371 	.word	0x08005371
 80052d4:	080053bb 	.word	0x080053bb
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052e9 	.word	0x080052e9
 80052e0:	0800535d 	.word	0x0800535d
 80052e4:	08005371 	.word	0x08005371
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	18d1      	adds	r1, r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005308:	f7ff ff5c 	bl	80051c4 <prvInsertTimerInActiveList>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d069      	beq.n	80053e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005318:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d05e      	beq.n	80053e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	441a      	add	r2, r3
 8005330:	2300      	movs	r3, #0
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	2100      	movs	r1, #0
 8005338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533a:	f7ff fe05 	bl	8004f48 <xTimerGenericCommand>
 800533e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d14f      	bne.n	80053e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	61bb      	str	r3, [r7, #24]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	b2da      	uxtb	r2, r3
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800536e:	e03a      	b.n	80053e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	617b      	str	r3, [r7, #20]
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	18d1      	adds	r1, r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b4:	f7ff ff06 	bl	80051c4 <prvInsertTimerInActiveList>
					break;
 80053b8:	e015      	b.n	80053e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80053c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ca:	f000 fbe1 	bl	8005b90 <vPortFree>
 80053ce:	e00a      	b.n	80053e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053e2:	e000      	b.n	80053e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80053e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053e6:	4b08      	ldr	r3, [pc, #32]	; (8005408 <prvProcessReceivedCommands+0x1c0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	1d39      	adds	r1, r7, #4
 80053ec:	2200      	movs	r2, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fc16 	bl	8003c20 <xQueueReceive>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f47f af2a 	bne.w	8005250 <prvProcessReceivedCommands+0x8>
	}
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3730      	adds	r7, #48	; 0x30
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000da4 	.word	0x20000da4

0800540c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005412:	e048      	b.n	80054a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <prvSwitchTimerLists+0xc0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541e:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <prvSwitchTimerLists+0xc0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3304      	adds	r3, #4
 800542c:	4618      	mov	r0, r3
 800542e:	f7fe f92f 	bl	8003690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d02e      	beq.n	80054a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4413      	add	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	429a      	cmp	r2, r3
 8005458:	d90e      	bls.n	8005478 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <prvSwitchTimerLists+0xc0>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fe f8d4 	bl	800361e <vListInsert>
 8005476:	e016      	b.n	80054a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	2100      	movs	r1, #0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff fd60 	bl	8004f48 <xTimerGenericCommand>
 8005488:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	603b      	str	r3, [r7, #0]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1b1      	bne.n	8005414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <prvSwitchTimerLists+0xc4>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <prvSwitchTimerLists+0xc0>)
 80054bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054be:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <prvSwitchTimerLists+0xc4>)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	6013      	str	r3, [r2, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	20000d9c 	.word	0x20000d9c
 80054d0:	20000da0 	.word	0x20000da0

080054d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054da:	f000 f96b 	bl	80057b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054de:	4b15      	ldr	r3, [pc, #84]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d120      	bne.n	8005528 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80054e6:	4814      	ldr	r0, [pc, #80]	; (8005538 <prvCheckForValidListAndQueue+0x64>)
 80054e8:	f7fe f848 	bl	800357c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054ec:	4813      	ldr	r0, [pc, #76]	; (800553c <prvCheckForValidListAndQueue+0x68>)
 80054ee:	f7fe f845 	bl	800357c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <prvCheckForValidListAndQueue+0x6c>)
 80054f4:	4a10      	ldr	r2, [pc, #64]	; (8005538 <prvCheckForValidListAndQueue+0x64>)
 80054f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <prvCheckForValidListAndQueue+0x70>)
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <prvCheckForValidListAndQueue+0x68>)
 80054fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054fe:	2300      	movs	r3, #0
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <prvCheckForValidListAndQueue+0x74>)
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <prvCheckForValidListAndQueue+0x78>)
 8005506:	2110      	movs	r1, #16
 8005508:	200a      	movs	r0, #10
 800550a:	f7fe f953 	bl	80037b4 <xQueueGenericCreateStatic>
 800550e:	4603      	mov	r3, r0
 8005510:	4a08      	ldr	r2, [pc, #32]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 8005512:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <prvCheckForValidListAndQueue+0x60>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	490b      	ldr	r1, [pc, #44]	; (8005550 <prvCheckForValidListAndQueue+0x7c>)
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe fd6c 	bl	8004000 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005528:	f000 f974 	bl	8005814 <vPortExitCritical>
}
 800552c:	bf00      	nop
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000da4 	.word	0x20000da4
 8005538:	20000d74 	.word	0x20000d74
 800553c:	20000d88 	.word	0x20000d88
 8005540:	20000d9c 	.word	0x20000d9c
 8005544:	20000da0 	.word	0x20000da0
 8005548:	20000e50 	.word	0x20000e50
 800554c:	20000db0 	.word	0x20000db0
 8005550:	08006770 	.word	0x08006770

08005554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3b04      	subs	r3, #4
 8005564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800556c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3b04      	subs	r3, #4
 8005572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b04      	subs	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005584:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <pxPortInitialiseStack+0x64>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b14      	subs	r3, #20
 800558e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3b04      	subs	r3, #4
 800559a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f06f 0202 	mvn.w	r2, #2
 80055a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	3b20      	subs	r3, #32
 80055a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	080055bd 	.word	0x080055bd

080055bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055c6:	4b12      	ldr	r3, [pc, #72]	; (8005610 <prvTaskExitError+0x54>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	d00a      	beq.n	80055e6 <prvTaskExitError+0x2a>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <prvTaskExitError+0x28>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055fa:	bf00      	nop
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0fc      	beq.n	80055fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	2000000c 	.word	0x2000000c
	...

08005620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <pxCurrentTCBConst2>)
 8005622:	6819      	ldr	r1, [r3, #0]
 8005624:	6808      	ldr	r0, [r1, #0]
 8005626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562a:	f380 8809 	msr	PSP, r0
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f380 8811 	msr	BASEPRI, r0
 800563a:	4770      	bx	lr
 800563c:	f3af 8000 	nop.w

08005640 <pxCurrentTCBConst2>:
 8005640:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005648:	4808      	ldr	r0, [pc, #32]	; (800566c <prvPortStartFirstTask+0x24>)
 800564a:	6800      	ldr	r0, [r0, #0]
 800564c:	6800      	ldr	r0, [r0, #0]
 800564e:	f380 8808 	msr	MSP, r0
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8814 	msr	CONTROL, r0
 800565a:	b662      	cpsie	i
 800565c:	b661      	cpsie	f
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	df00      	svc	0
 8005668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800566a:	bf00      	nop
 800566c:	e000ed08 	.word	0xe000ed08

08005670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005676:	4b46      	ldr	r3, [pc, #280]	; (8005790 <xPortStartScheduler+0x120>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a46      	ldr	r2, [pc, #280]	; (8005794 <xPortStartScheduler+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10a      	bne.n	8005696 <xPortStartScheduler+0x26>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	613b      	str	r3, [r7, #16]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005696:	4b3e      	ldr	r3, [pc, #248]	; (8005790 <xPortStartScheduler+0x120>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <xPortStartScheduler+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d10a      	bne.n	80056b6 <xPortStartScheduler+0x46>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056b6:	4b39      	ldr	r3, [pc, #228]	; (800579c <xPortStartScheduler+0x12c>)
 80056b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <xPortStartScheduler+0x130>)
 80056dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <xPortStartScheduler+0x134>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e4:	e009      	b.n	80056fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056e6:	4b2f      	ldr	r3, [pc, #188]	; (80057a4 <xPortStartScheduler+0x134>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4a2d      	ldr	r2, [pc, #180]	; (80057a4 <xPortStartScheduler+0x134>)
 80056ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d0ef      	beq.n	80056e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <xPortStartScheduler+0x134>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1c3 0307 	rsb	r3, r3, #7
 800570e:	2b04      	cmp	r3, #4
 8005710:	d00a      	beq.n	8005728 <xPortStartScheduler+0xb8>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <xPortStartScheduler+0x134>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <xPortStartScheduler+0x134>)
 8005730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <xPortStartScheduler+0x134>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <xPortStartScheduler+0x134>)
 800573c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005746:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <xPortStartScheduler+0x138>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <xPortStartScheduler+0x138>)
 800574c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <xPortStartScheduler+0x138>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <xPortStartScheduler+0x138>)
 8005758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800575c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800575e:	f000 f8dd 	bl	800591c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <xPortStartScheduler+0x13c>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005768:	f000 f8fc 	bl	8005964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800576c:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <xPortStartScheduler+0x140>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0f      	ldr	r2, [pc, #60]	; (80057b0 <xPortStartScheduler+0x140>)
 8005772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005778:	f7ff ff66 	bl	8005648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800577c:	f7ff f850 	bl	8004820 <vTaskSwitchContext>
	prvTaskExitError();
 8005780:	f7ff ff1c 	bl	80055bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	e000ed00 	.word	0xe000ed00
 8005794:	410fc271 	.word	0x410fc271
 8005798:	410fc270 	.word	0x410fc270
 800579c:	e000e400 	.word	0xe000e400
 80057a0:	20000ea0 	.word	0x20000ea0
 80057a4:	20000ea4 	.word	0x20000ea4
 80057a8:	e000ed20 	.word	0xe000ed20
 80057ac:	2000000c 	.word	0x2000000c
 80057b0:	e000ef34 	.word	0xe000ef34

080057b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	607b      	str	r3, [r7, #4]
}
 80057cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057ce:	4b0f      	ldr	r3, [pc, #60]	; (800580c <vPortEnterCritical+0x58>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	4a0d      	ldr	r2, [pc, #52]	; (800580c <vPortEnterCritical+0x58>)
 80057d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <vPortEnterCritical+0x58>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10f      	bne.n	8005800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <vPortEnterCritical+0x5c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <vPortEnterCritical+0x4c>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <vPortEnterCritical+0x4a>
	}
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000000c 	.word	0x2000000c
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <vPortExitCritical+0x50>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10a      	bne.n	8005838 <vPortExitCritical+0x24>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
}
 8005834:	bf00      	nop
 8005836:	e7fe      	b.n	8005836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vPortExitCritical+0x50>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3b01      	subs	r3, #1
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <vPortExitCritical+0x50>)
 8005840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005842:	4b08      	ldr	r3, [pc, #32]	; (8005864 <vPortExitCritical+0x50>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <vPortExitCritical+0x42>
 800584a:	2300      	movs	r3, #0
 800584c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f383 8811 	msr	BASEPRI, r3
}
 8005854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	2000000c 	.word	0x2000000c
	...

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7fe ffbe 	bl	8004820 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f2:	f7fe fedb 	bl	80046ac <xTaskIncrementTick>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <xPortSysTickHandler+0x40>)
 80058fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	2300      	movs	r3, #0
 8005906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f383 8811 	msr	BASEPRI, r3
}
 800590e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	e000ed04 	.word	0xe000ed04

0800591c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005920:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005926:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <vPortSetupTimerInterrupt+0x38>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <vPortSetupTimerInterrupt+0x3c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0a      	ldr	r2, [pc, #40]	; (800595c <vPortSetupTimerInterrupt+0x40>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	099b      	lsrs	r3, r3, #6
 8005938:	4a09      	ldr	r2, [pc, #36]	; (8005960 <vPortSetupTimerInterrupt+0x44>)
 800593a:	3b01      	subs	r3, #1
 800593c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <vPortSetupTimerInterrupt+0x34>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010
 8005954:	e000e018 	.word	0xe000e018
 8005958:	20000000 	.word	0x20000000
 800595c:	10624dd3 	.word	0x10624dd3
 8005960:	e000e014 	.word	0xe000e014

08005964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005974 <vPortEnableVFP+0x10>
 8005968:	6801      	ldr	r1, [r0, #0]
 800596a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800596e:	6001      	str	r1, [r0, #0]
 8005970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005972:	bf00      	nop
 8005974:	e000ed88 	.word	0xe000ed88

08005978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800597e:	f3ef 8305 	mrs	r3, IPSR
 8005982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b0f      	cmp	r3, #15
 8005988:	d914      	bls.n	80059b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <vPortValidateInterruptPriority+0x70>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005994:	4b15      	ldr	r3, [pc, #84]	; (80059ec <vPortValidateInterruptPriority+0x74>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	7afa      	ldrb	r2, [r7, #11]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20a      	bcs.n	80059b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	607b      	str	r3, [r7, #4]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059b4:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <vPortValidateInterruptPriority+0x78>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <vPortValidateInterruptPriority+0x7c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d90a      	bls.n	80059da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	603b      	str	r3, [r7, #0]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <vPortValidateInterruptPriority+0x60>
	}
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	e000e3f0 	.word	0xe000e3f0
 80059ec:	20000ea0 	.word	0x20000ea0
 80059f0:	e000ed0c 	.word	0xe000ed0c
 80059f4:	20000ea4 	.word	0x20000ea4

080059f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a04:	f7fe fd96 	bl	8004534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a08:	4b5b      	ldr	r3, [pc, #364]	; (8005b78 <pvPortMalloc+0x180>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a10:	f000 f920 	bl	8005c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a14:	4b59      	ldr	r3, [pc, #356]	; (8005b7c <pvPortMalloc+0x184>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f040 8093 	bne.w	8005b48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01d      	beq.n	8005a64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a28:	2208      	movs	r2, #8
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d014      	beq.n	8005a64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f023 0307 	bic.w	r3, r3, #7
 8005a40:	3308      	adds	r3, #8
 8005a42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <pvPortMalloc+0x6c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	617b      	str	r3, [r7, #20]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06e      	beq.n	8005b48 <pvPortMalloc+0x150>
 8005a6a:	4b45      	ldr	r3, [pc, #276]	; (8005b80 <pvPortMalloc+0x188>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d869      	bhi.n	8005b48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a74:	4b43      	ldr	r3, [pc, #268]	; (8005b84 <pvPortMalloc+0x18c>)
 8005a76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a78:	4b42      	ldr	r3, [pc, #264]	; (8005b84 <pvPortMalloc+0x18c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a7e:	e004      	b.n	8005a8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d903      	bls.n	8005a9c <pvPortMalloc+0xa4>
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f1      	bne.n	8005a80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a9c:	4b36      	ldr	r3, [pc, #216]	; (8005b78 <pvPortMalloc+0x180>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d050      	beq.n	8005b48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4413      	add	r3, r2
 8005aae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	2308      	movs	r3, #8
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d91f      	bls.n	8005b08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <pvPortMalloc+0xf8>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	613b      	str	r3, [r7, #16]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b02:	69b8      	ldr	r0, [r7, #24]
 8005b04:	f000 f908 	bl	8005d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <pvPortMalloc+0x188>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	4a1b      	ldr	r2, [pc, #108]	; (8005b80 <pvPortMalloc+0x188>)
 8005b14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b16:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <pvPortMalloc+0x188>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b1b      	ldr	r3, [pc, #108]	; (8005b88 <pvPortMalloc+0x190>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d203      	bcs.n	8005b2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b22:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <pvPortMalloc+0x188>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <pvPortMalloc+0x190>)
 8005b28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <pvPortMalloc+0x184>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <pvPortMalloc+0x194>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3301      	adds	r3, #1
 8005b44:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <pvPortMalloc+0x194>)
 8005b46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b48:	f7fe fd02 	bl	8004550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <pvPortMalloc+0x174>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	60fb      	str	r3, [r7, #12]
}
 8005b68:	bf00      	nop
 8005b6a:	e7fe      	b.n	8005b6a <pvPortMalloc+0x172>
	return pvReturn;
 8005b6c:	69fb      	ldr	r3, [r7, #28]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3728      	adds	r7, #40	; 0x28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20004ab0 	.word	0x20004ab0
 8005b7c:	20004ac4 	.word	0x20004ac4
 8005b80:	20004ab4 	.word	0x20004ab4
 8005b84:	20004aa8 	.word	0x20004aa8
 8005b88:	20004ab8 	.word	0x20004ab8
 8005b8c:	20004abc 	.word	0x20004abc

08005b90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d04d      	beq.n	8005c3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4413      	add	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <vPortFree+0xb8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <vPortFree+0x44>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	e7fe      	b.n	8005bd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <vPortFree+0x62>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	60bb      	str	r3, [r7, #8]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <vPortFree+0xb8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01e      	beq.n	8005c3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11a      	bne.n	8005c3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <vPortFree+0xb8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	401a      	ands	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c18:	f7fe fc8c 	bl	8004534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <vPortFree+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4413      	add	r3, r2
 8005c26:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <vPortFree+0xbc>)
 8005c28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c2a:	6938      	ldr	r0, [r7, #16]
 8005c2c:	f000 f874 	bl	8005d18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <vPortFree+0xc0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <vPortFree+0xc0>)
 8005c38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c3a:	f7fe fc89 	bl	8004550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20004ac4 	.word	0x20004ac4
 8005c4c:	20004ab4 	.word	0x20004ab4
 8005c50:	20004ac0 	.word	0x20004ac0

08005c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <prvHeapInit+0xac>)
 8005c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3307      	adds	r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <prvHeapInit+0xac>)
 8005c84:	4413      	add	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <prvHeapInit+0xb0>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <prvHeapInit+0xb0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0307 	bic.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <prvHeapInit+0xb4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <prvHeapInit+0xb4>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <prvHeapInit+0xb8>)
 8005ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <prvHeapInit+0xbc>)
 8005cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <prvHeapInit+0xc0>)
 8005cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000ea8 	.word	0x20000ea8
 8005d04:	20004aa8 	.word	0x20004aa8
 8005d08:	20004ab0 	.word	0x20004ab0
 8005d0c:	20004ab8 	.word	0x20004ab8
 8005d10:	20004ab4 	.word	0x20004ab4
 8005d14:	20004ac4 	.word	0x20004ac4

08005d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <prvInsertBlockIntoFreeList+0xac>)
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e002      	b.n	8005d2c <prvInsertBlockIntoFreeList+0x14>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d8f7      	bhi.n	8005d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d108      	bne.n	8005d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d118      	bne.n	8005da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d00d      	beq.n	8005d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e008      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e003      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d002      	beq.n	8005db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20004aa8 	.word	0x20004aa8
 8005dc8:	20004ab0 	.word	0x20004ab0

08005dcc <__errno>:
 8005dcc:	4b01      	ldr	r3, [pc, #4]	; (8005dd4 <__errno+0x8>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000010 	.word	0x20000010

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	4d0d      	ldr	r5, [pc, #52]	; (8005e10 <__libc_init_array+0x38>)
 8005ddc:	4c0d      	ldr	r4, [pc, #52]	; (8005e14 <__libc_init_array+0x3c>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	2600      	movs	r6, #0
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	4d0b      	ldr	r5, [pc, #44]	; (8005e18 <__libc_init_array+0x40>)
 8005dea:	4c0c      	ldr	r4, [pc, #48]	; (8005e1c <__libc_init_array+0x44>)
 8005dec:	f000 fc8e 	bl	800670c <_init>
 8005df0:	1b64      	subs	r4, r4, r5
 8005df2:	10a4      	asrs	r4, r4, #2
 8005df4:	2600      	movs	r6, #0
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	08006838 	.word	0x08006838
 8005e14:	08006838 	.word	0x08006838
 8005e18:	08006838 	.word	0x08006838
 8005e1c:	0800683c 	.word	0x0800683c

08005e20 <memcpy>:
 8005e20:	440a      	add	r2, r1
 8005e22:	4291      	cmp	r1, r2
 8005e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e28:	d100      	bne.n	8005e2c <memcpy+0xc>
 8005e2a:	4770      	bx	lr
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d1f9      	bne.n	8005e2e <memcpy+0xe>
 8005e3a:	bd10      	pop	{r4, pc}

08005e3c <memset>:
 8005e3c:	4402      	add	r2, r0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d100      	bne.n	8005e46 <memset+0xa>
 8005e44:	4770      	bx	lr
 8005e46:	f803 1b01 	strb.w	r1, [r3], #1
 8005e4a:	e7f9      	b.n	8005e40 <memset+0x4>

08005e4c <siprintf>:
 8005e4c:	b40e      	push	{r1, r2, r3}
 8005e4e:	b500      	push	{lr}
 8005e50:	b09c      	sub	sp, #112	; 0x70
 8005e52:	ab1d      	add	r3, sp, #116	; 0x74
 8005e54:	9002      	str	r0, [sp, #8]
 8005e56:	9006      	str	r0, [sp, #24]
 8005e58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e5c:	4809      	ldr	r0, [pc, #36]	; (8005e84 <siprintf+0x38>)
 8005e5e:	9107      	str	r1, [sp, #28]
 8005e60:	9104      	str	r1, [sp, #16]
 8005e62:	4909      	ldr	r1, [pc, #36]	; (8005e88 <siprintf+0x3c>)
 8005e64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e68:	9105      	str	r1, [sp, #20]
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	9301      	str	r3, [sp, #4]
 8005e6e:	a902      	add	r1, sp, #8
 8005e70:	f000 f868 	bl	8005f44 <_svfiprintf_r>
 8005e74:	9b02      	ldr	r3, [sp, #8]
 8005e76:	2200      	movs	r2, #0
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	b01c      	add	sp, #112	; 0x70
 8005e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e80:	b003      	add	sp, #12
 8005e82:	4770      	bx	lr
 8005e84:	20000010 	.word	0x20000010
 8005e88:	ffff0208 	.word	0xffff0208

08005e8c <__ssputs_r>:
 8005e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	688e      	ldr	r6, [r1, #8]
 8005e92:	429e      	cmp	r6, r3
 8005e94:	4682      	mov	sl, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	4690      	mov	r8, r2
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	d838      	bhi.n	8005f10 <__ssputs_r+0x84>
 8005e9e:	898a      	ldrh	r2, [r1, #12]
 8005ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ea4:	d032      	beq.n	8005f0c <__ssputs_r+0x80>
 8005ea6:	6825      	ldr	r5, [r4, #0]
 8005ea8:	6909      	ldr	r1, [r1, #16]
 8005eaa:	eba5 0901 	sub.w	r9, r5, r1
 8005eae:	6965      	ldr	r5, [r4, #20]
 8005eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005eb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eb8:	3301      	adds	r3, #1
 8005eba:	444b      	add	r3, r9
 8005ebc:	106d      	asrs	r5, r5, #1
 8005ebe:	429d      	cmp	r5, r3
 8005ec0:	bf38      	it	cc
 8005ec2:	461d      	movcc	r5, r3
 8005ec4:	0553      	lsls	r3, r2, #21
 8005ec6:	d531      	bpl.n	8005f2c <__ssputs_r+0xa0>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f000 fb55 	bl	8006578 <_malloc_r>
 8005ece:	4606      	mov	r6, r0
 8005ed0:	b950      	cbnz	r0, 8005ee8 <__ssputs_r+0x5c>
 8005ed2:	230c      	movs	r3, #12
 8005ed4:	f8ca 3000 	str.w	r3, [sl]
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	464a      	mov	r2, r9
 8005eec:	f7ff ff98 	bl	8005e20 <memcpy>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	6126      	str	r6, [r4, #16]
 8005efe:	6165      	str	r5, [r4, #20]
 8005f00:	444e      	add	r6, r9
 8005f02:	eba5 0509 	sub.w	r5, r5, r9
 8005f06:	6026      	str	r6, [r4, #0]
 8005f08:	60a5      	str	r5, [r4, #8]
 8005f0a:	463e      	mov	r6, r7
 8005f0c:	42be      	cmp	r6, r7
 8005f0e:	d900      	bls.n	8005f12 <__ssputs_r+0x86>
 8005f10:	463e      	mov	r6, r7
 8005f12:	6820      	ldr	r0, [r4, #0]
 8005f14:	4632      	mov	r2, r6
 8005f16:	4641      	mov	r1, r8
 8005f18:	f000 faa8 	bl	800646c <memmove>
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	1b9b      	subs	r3, r3, r6
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	4433      	add	r3, r6
 8005f26:	6023      	str	r3, [r4, #0]
 8005f28:	2000      	movs	r0, #0
 8005f2a:	e7db      	b.n	8005ee4 <__ssputs_r+0x58>
 8005f2c:	462a      	mov	r2, r5
 8005f2e:	f000 fb97 	bl	8006660 <_realloc_r>
 8005f32:	4606      	mov	r6, r0
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1e1      	bne.n	8005efc <__ssputs_r+0x70>
 8005f38:	6921      	ldr	r1, [r4, #16]
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	f000 fab0 	bl	80064a0 <_free_r>
 8005f40:	e7c7      	b.n	8005ed2 <__ssputs_r+0x46>
	...

08005f44 <_svfiprintf_r>:
 8005f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	4698      	mov	r8, r3
 8005f4a:	898b      	ldrh	r3, [r1, #12]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	b09d      	sub	sp, #116	; 0x74
 8005f50:	4607      	mov	r7, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	d50e      	bpl.n	8005f76 <_svfiprintf_r+0x32>
 8005f58:	690b      	ldr	r3, [r1, #16]
 8005f5a:	b963      	cbnz	r3, 8005f76 <_svfiprintf_r+0x32>
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	f000 fb0b 	bl	8006578 <_malloc_r>
 8005f62:	6028      	str	r0, [r5, #0]
 8005f64:	6128      	str	r0, [r5, #16]
 8005f66:	b920      	cbnz	r0, 8005f72 <_svfiprintf_r+0x2e>
 8005f68:	230c      	movs	r3, #12
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	e0d1      	b.n	8006116 <_svfiprintf_r+0x1d2>
 8005f72:	2340      	movs	r3, #64	; 0x40
 8005f74:	616b      	str	r3, [r5, #20]
 8005f76:	2300      	movs	r3, #0
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f84:	2330      	movs	r3, #48	; 0x30
 8005f86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006130 <_svfiprintf_r+0x1ec>
 8005f8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f8e:	f04f 0901 	mov.w	r9, #1
 8005f92:	4623      	mov	r3, r4
 8005f94:	469a      	mov	sl, r3
 8005f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f9a:	b10a      	cbz	r2, 8005fa0 <_svfiprintf_r+0x5c>
 8005f9c:	2a25      	cmp	r2, #37	; 0x25
 8005f9e:	d1f9      	bne.n	8005f94 <_svfiprintf_r+0x50>
 8005fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8005fa4:	d00b      	beq.n	8005fbe <_svfiprintf_r+0x7a>
 8005fa6:	465b      	mov	r3, fp
 8005fa8:	4622      	mov	r2, r4
 8005faa:	4629      	mov	r1, r5
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff ff6d 	bl	8005e8c <__ssputs_r>
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	f000 80aa 	beq.w	800610c <_svfiprintf_r+0x1c8>
 8005fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fba:	445a      	add	r2, fp
 8005fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80a2 	beq.w	800610c <_svfiprintf_r+0x1c8>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fd2:	f10a 0a01 	add.w	sl, sl, #1
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fde:	931a      	str	r3, [sp, #104]	; 0x68
 8005fe0:	4654      	mov	r4, sl
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe8:	4851      	ldr	r0, [pc, #324]	; (8006130 <_svfiprintf_r+0x1ec>)
 8005fea:	f7fa f8f9 	bl	80001e0 <memchr>
 8005fee:	9a04      	ldr	r2, [sp, #16]
 8005ff0:	b9d8      	cbnz	r0, 800602a <_svfiprintf_r+0xe6>
 8005ff2:	06d0      	lsls	r0, r2, #27
 8005ff4:	bf44      	itt	mi
 8005ff6:	2320      	movmi	r3, #32
 8005ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ffc:	0711      	lsls	r1, r2, #28
 8005ffe:	bf44      	itt	mi
 8006000:	232b      	movmi	r3, #43	; 0x2b
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	f89a 3000 	ldrb.w	r3, [sl]
 800600a:	2b2a      	cmp	r3, #42	; 0x2a
 800600c:	d015      	beq.n	800603a <_svfiprintf_r+0xf6>
 800600e:	9a07      	ldr	r2, [sp, #28]
 8006010:	4654      	mov	r4, sl
 8006012:	2000      	movs	r0, #0
 8006014:	f04f 0c0a 	mov.w	ip, #10
 8006018:	4621      	mov	r1, r4
 800601a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800601e:	3b30      	subs	r3, #48	; 0x30
 8006020:	2b09      	cmp	r3, #9
 8006022:	d94e      	bls.n	80060c2 <_svfiprintf_r+0x17e>
 8006024:	b1b0      	cbz	r0, 8006054 <_svfiprintf_r+0x110>
 8006026:	9207      	str	r2, [sp, #28]
 8006028:	e014      	b.n	8006054 <_svfiprintf_r+0x110>
 800602a:	eba0 0308 	sub.w	r3, r0, r8
 800602e:	fa09 f303 	lsl.w	r3, r9, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	46a2      	mov	sl, r4
 8006038:	e7d2      	b.n	8005fe0 <_svfiprintf_r+0x9c>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	1d19      	adds	r1, r3, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfbb      	ittet	lt
 8006046:	425b      	neglt	r3, r3
 8006048:	f042 0202 	orrlt.w	r2, r2, #2
 800604c:	9307      	strge	r3, [sp, #28]
 800604e:	9307      	strlt	r3, [sp, #28]
 8006050:	bfb8      	it	lt
 8006052:	9204      	strlt	r2, [sp, #16]
 8006054:	7823      	ldrb	r3, [r4, #0]
 8006056:	2b2e      	cmp	r3, #46	; 0x2e
 8006058:	d10c      	bne.n	8006074 <_svfiprintf_r+0x130>
 800605a:	7863      	ldrb	r3, [r4, #1]
 800605c:	2b2a      	cmp	r3, #42	; 0x2a
 800605e:	d135      	bne.n	80060cc <_svfiprintf_r+0x188>
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	9203      	str	r2, [sp, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfb8      	it	lt
 800606c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006070:	3402      	adds	r4, #2
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006140 <_svfiprintf_r+0x1fc>
 8006078:	7821      	ldrb	r1, [r4, #0]
 800607a:	2203      	movs	r2, #3
 800607c:	4650      	mov	r0, sl
 800607e:	f7fa f8af 	bl	80001e0 <memchr>
 8006082:	b140      	cbz	r0, 8006096 <_svfiprintf_r+0x152>
 8006084:	2340      	movs	r3, #64	; 0x40
 8006086:	eba0 000a 	sub.w	r0, r0, sl
 800608a:	fa03 f000 	lsl.w	r0, r3, r0
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	4303      	orrs	r3, r0
 8006092:	3401      	adds	r4, #1
 8006094:	9304      	str	r3, [sp, #16]
 8006096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <_svfiprintf_r+0x1f0>)
 800609c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060a0:	2206      	movs	r2, #6
 80060a2:	f7fa f89d 	bl	80001e0 <memchr>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d038      	beq.n	800611c <_svfiprintf_r+0x1d8>
 80060aa:	4b23      	ldr	r3, [pc, #140]	; (8006138 <_svfiprintf_r+0x1f4>)
 80060ac:	bb1b      	cbnz	r3, 80060f6 <_svfiprintf_r+0x1b2>
 80060ae:	9b03      	ldr	r3, [sp, #12]
 80060b0:	3307      	adds	r3, #7
 80060b2:	f023 0307 	bic.w	r3, r3, #7
 80060b6:	3308      	adds	r3, #8
 80060b8:	9303      	str	r3, [sp, #12]
 80060ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060bc:	4433      	add	r3, r6
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	e767      	b.n	8005f92 <_svfiprintf_r+0x4e>
 80060c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80060c6:	460c      	mov	r4, r1
 80060c8:	2001      	movs	r0, #1
 80060ca:	e7a5      	b.n	8006018 <_svfiprintf_r+0xd4>
 80060cc:	2300      	movs	r3, #0
 80060ce:	3401      	adds	r4, #1
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	4619      	mov	r1, r3
 80060d4:	f04f 0c0a 	mov.w	ip, #10
 80060d8:	4620      	mov	r0, r4
 80060da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060de:	3a30      	subs	r2, #48	; 0x30
 80060e0:	2a09      	cmp	r2, #9
 80060e2:	d903      	bls.n	80060ec <_svfiprintf_r+0x1a8>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0c5      	beq.n	8006074 <_svfiprintf_r+0x130>
 80060e8:	9105      	str	r1, [sp, #20]
 80060ea:	e7c3      	b.n	8006074 <_svfiprintf_r+0x130>
 80060ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80060f0:	4604      	mov	r4, r0
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7f0      	b.n	80060d8 <_svfiprintf_r+0x194>
 80060f6:	ab03      	add	r3, sp, #12
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	462a      	mov	r2, r5
 80060fc:	4b0f      	ldr	r3, [pc, #60]	; (800613c <_svfiprintf_r+0x1f8>)
 80060fe:	a904      	add	r1, sp, #16
 8006100:	4638      	mov	r0, r7
 8006102:	f3af 8000 	nop.w
 8006106:	1c42      	adds	r2, r0, #1
 8006108:	4606      	mov	r6, r0
 800610a:	d1d6      	bne.n	80060ba <_svfiprintf_r+0x176>
 800610c:	89ab      	ldrh	r3, [r5, #12]
 800610e:	065b      	lsls	r3, r3, #25
 8006110:	f53f af2c 	bmi.w	8005f6c <_svfiprintf_r+0x28>
 8006114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006116:	b01d      	add	sp, #116	; 0x74
 8006118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611c:	ab03      	add	r3, sp, #12
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	462a      	mov	r2, r5
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <_svfiprintf_r+0x1f8>)
 8006124:	a904      	add	r1, sp, #16
 8006126:	4638      	mov	r0, r7
 8006128:	f000 f87a 	bl	8006220 <_printf_i>
 800612c:	e7eb      	b.n	8006106 <_svfiprintf_r+0x1c2>
 800612e:	bf00      	nop
 8006130:	080067fc 	.word	0x080067fc
 8006134:	08006806 	.word	0x08006806
 8006138:	00000000 	.word	0x00000000
 800613c:	08005e8d 	.word	0x08005e8d
 8006140:	08006802 	.word	0x08006802

08006144 <_printf_common>:
 8006144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	4616      	mov	r6, r2
 800614a:	4699      	mov	r9, r3
 800614c:	688a      	ldr	r2, [r1, #8]
 800614e:	690b      	ldr	r3, [r1, #16]
 8006150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006154:	4293      	cmp	r3, r2
 8006156:	bfb8      	it	lt
 8006158:	4613      	movlt	r3, r2
 800615a:	6033      	str	r3, [r6, #0]
 800615c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006160:	4607      	mov	r7, r0
 8006162:	460c      	mov	r4, r1
 8006164:	b10a      	cbz	r2, 800616a <_printf_common+0x26>
 8006166:	3301      	adds	r3, #1
 8006168:	6033      	str	r3, [r6, #0]
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	0699      	lsls	r1, r3, #26
 800616e:	bf42      	ittt	mi
 8006170:	6833      	ldrmi	r3, [r6, #0]
 8006172:	3302      	addmi	r3, #2
 8006174:	6033      	strmi	r3, [r6, #0]
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	f015 0506 	ands.w	r5, r5, #6
 800617c:	d106      	bne.n	800618c <_printf_common+0x48>
 800617e:	f104 0a19 	add.w	sl, r4, #25
 8006182:	68e3      	ldr	r3, [r4, #12]
 8006184:	6832      	ldr	r2, [r6, #0]
 8006186:	1a9b      	subs	r3, r3, r2
 8006188:	42ab      	cmp	r3, r5
 800618a:	dc26      	bgt.n	80061da <_printf_common+0x96>
 800618c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006190:	1e13      	subs	r3, r2, #0
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	bf18      	it	ne
 8006196:	2301      	movne	r3, #1
 8006198:	0692      	lsls	r2, r2, #26
 800619a:	d42b      	bmi.n	80061f4 <_printf_common+0xb0>
 800619c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061a0:	4649      	mov	r1, r9
 80061a2:	4638      	mov	r0, r7
 80061a4:	47c0      	blx	r8
 80061a6:	3001      	adds	r0, #1
 80061a8:	d01e      	beq.n	80061e8 <_printf_common+0xa4>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	68e5      	ldr	r5, [r4, #12]
 80061ae:	6832      	ldr	r2, [r6, #0]
 80061b0:	f003 0306 	and.w	r3, r3, #6
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	bf08      	it	eq
 80061b8:	1aad      	subeq	r5, r5, r2
 80061ba:	68a3      	ldr	r3, [r4, #8]
 80061bc:	6922      	ldr	r2, [r4, #16]
 80061be:	bf0c      	ite	eq
 80061c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061c4:	2500      	movne	r5, #0
 80061c6:	4293      	cmp	r3, r2
 80061c8:	bfc4      	itt	gt
 80061ca:	1a9b      	subgt	r3, r3, r2
 80061cc:	18ed      	addgt	r5, r5, r3
 80061ce:	2600      	movs	r6, #0
 80061d0:	341a      	adds	r4, #26
 80061d2:	42b5      	cmp	r5, r6
 80061d4:	d11a      	bne.n	800620c <_printf_common+0xc8>
 80061d6:	2000      	movs	r0, #0
 80061d8:	e008      	b.n	80061ec <_printf_common+0xa8>
 80061da:	2301      	movs	r3, #1
 80061dc:	4652      	mov	r2, sl
 80061de:	4649      	mov	r1, r9
 80061e0:	4638      	mov	r0, r7
 80061e2:	47c0      	blx	r8
 80061e4:	3001      	adds	r0, #1
 80061e6:	d103      	bne.n	80061f0 <_printf_common+0xac>
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f0:	3501      	adds	r5, #1
 80061f2:	e7c6      	b.n	8006182 <_printf_common+0x3e>
 80061f4:	18e1      	adds	r1, r4, r3
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	2030      	movs	r0, #48	; 0x30
 80061fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061fe:	4422      	add	r2, r4
 8006200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006208:	3302      	adds	r3, #2
 800620a:	e7c7      	b.n	800619c <_printf_common+0x58>
 800620c:	2301      	movs	r3, #1
 800620e:	4622      	mov	r2, r4
 8006210:	4649      	mov	r1, r9
 8006212:	4638      	mov	r0, r7
 8006214:	47c0      	blx	r8
 8006216:	3001      	adds	r0, #1
 8006218:	d0e6      	beq.n	80061e8 <_printf_common+0xa4>
 800621a:	3601      	adds	r6, #1
 800621c:	e7d9      	b.n	80061d2 <_printf_common+0x8e>
	...

08006220 <_printf_i>:
 8006220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006224:	7e0f      	ldrb	r7, [r1, #24]
 8006226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006228:	2f78      	cmp	r7, #120	; 0x78
 800622a:	4691      	mov	r9, r2
 800622c:	4680      	mov	r8, r0
 800622e:	460c      	mov	r4, r1
 8006230:	469a      	mov	sl, r3
 8006232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006236:	d807      	bhi.n	8006248 <_printf_i+0x28>
 8006238:	2f62      	cmp	r7, #98	; 0x62
 800623a:	d80a      	bhi.n	8006252 <_printf_i+0x32>
 800623c:	2f00      	cmp	r7, #0
 800623e:	f000 80d8 	beq.w	80063f2 <_printf_i+0x1d2>
 8006242:	2f58      	cmp	r7, #88	; 0x58
 8006244:	f000 80a3 	beq.w	800638e <_printf_i+0x16e>
 8006248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800624c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006250:	e03a      	b.n	80062c8 <_printf_i+0xa8>
 8006252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006256:	2b15      	cmp	r3, #21
 8006258:	d8f6      	bhi.n	8006248 <_printf_i+0x28>
 800625a:	a101      	add	r1, pc, #4	; (adr r1, 8006260 <_printf_i+0x40>)
 800625c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006260:	080062b9 	.word	0x080062b9
 8006264:	080062cd 	.word	0x080062cd
 8006268:	08006249 	.word	0x08006249
 800626c:	08006249 	.word	0x08006249
 8006270:	08006249 	.word	0x08006249
 8006274:	08006249 	.word	0x08006249
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006249 	.word	0x08006249
 8006280:	08006249 	.word	0x08006249
 8006284:	08006249 	.word	0x08006249
 8006288:	08006249 	.word	0x08006249
 800628c:	080063d9 	.word	0x080063d9
 8006290:	080062fd 	.word	0x080062fd
 8006294:	080063bb 	.word	0x080063bb
 8006298:	08006249 	.word	0x08006249
 800629c:	08006249 	.word	0x08006249
 80062a0:	080063fb 	.word	0x080063fb
 80062a4:	08006249 	.word	0x08006249
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	08006249 	.word	0x08006249
 80062b0:	08006249 	.word	0x08006249
 80062b4:	080063c3 	.word	0x080063c3
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	602a      	str	r2, [r5, #0]
 80062c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0a3      	b.n	8006414 <_printf_i+0x1f4>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	6829      	ldr	r1, [r5, #0]
 80062d0:	0606      	lsls	r6, r0, #24
 80062d2:	f101 0304 	add.w	r3, r1, #4
 80062d6:	d50a      	bpl.n	80062ee <_printf_i+0xce>
 80062d8:	680e      	ldr	r6, [r1, #0]
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	2e00      	cmp	r6, #0
 80062de:	da03      	bge.n	80062e8 <_printf_i+0xc8>
 80062e0:	232d      	movs	r3, #45	; 0x2d
 80062e2:	4276      	negs	r6, r6
 80062e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e8:	485e      	ldr	r0, [pc, #376]	; (8006464 <_printf_i+0x244>)
 80062ea:	230a      	movs	r3, #10
 80062ec:	e019      	b.n	8006322 <_printf_i+0x102>
 80062ee:	680e      	ldr	r6, [r1, #0]
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062f6:	bf18      	it	ne
 80062f8:	b236      	sxthne	r6, r6
 80062fa:	e7ef      	b.n	80062dc <_printf_i+0xbc>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	6820      	ldr	r0, [r4, #0]
 8006300:	1d19      	adds	r1, r3, #4
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	0601      	lsls	r1, r0, #24
 8006306:	d501      	bpl.n	800630c <_printf_i+0xec>
 8006308:	681e      	ldr	r6, [r3, #0]
 800630a:	e002      	b.n	8006312 <_printf_i+0xf2>
 800630c:	0646      	lsls	r6, r0, #25
 800630e:	d5fb      	bpl.n	8006308 <_printf_i+0xe8>
 8006310:	881e      	ldrh	r6, [r3, #0]
 8006312:	4854      	ldr	r0, [pc, #336]	; (8006464 <_printf_i+0x244>)
 8006314:	2f6f      	cmp	r7, #111	; 0x6f
 8006316:	bf0c      	ite	eq
 8006318:	2308      	moveq	r3, #8
 800631a:	230a      	movne	r3, #10
 800631c:	2100      	movs	r1, #0
 800631e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006322:	6865      	ldr	r5, [r4, #4]
 8006324:	60a5      	str	r5, [r4, #8]
 8006326:	2d00      	cmp	r5, #0
 8006328:	bfa2      	ittt	ge
 800632a:	6821      	ldrge	r1, [r4, #0]
 800632c:	f021 0104 	bicge.w	r1, r1, #4
 8006330:	6021      	strge	r1, [r4, #0]
 8006332:	b90e      	cbnz	r6, 8006338 <_printf_i+0x118>
 8006334:	2d00      	cmp	r5, #0
 8006336:	d04d      	beq.n	80063d4 <_printf_i+0x1b4>
 8006338:	4615      	mov	r5, r2
 800633a:	fbb6 f1f3 	udiv	r1, r6, r3
 800633e:	fb03 6711 	mls	r7, r3, r1, r6
 8006342:	5dc7      	ldrb	r7, [r0, r7]
 8006344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006348:	4637      	mov	r7, r6
 800634a:	42bb      	cmp	r3, r7
 800634c:	460e      	mov	r6, r1
 800634e:	d9f4      	bls.n	800633a <_printf_i+0x11a>
 8006350:	2b08      	cmp	r3, #8
 8006352:	d10b      	bne.n	800636c <_printf_i+0x14c>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07de      	lsls	r6, r3, #31
 8006358:	d508      	bpl.n	800636c <_printf_i+0x14c>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	6861      	ldr	r1, [r4, #4]
 800635e:	4299      	cmp	r1, r3
 8006360:	bfde      	ittt	le
 8006362:	2330      	movle	r3, #48	; 0x30
 8006364:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800636c:	1b52      	subs	r2, r2, r5
 800636e:	6122      	str	r2, [r4, #16]
 8006370:	f8cd a000 	str.w	sl, [sp]
 8006374:	464b      	mov	r3, r9
 8006376:	aa03      	add	r2, sp, #12
 8006378:	4621      	mov	r1, r4
 800637a:	4640      	mov	r0, r8
 800637c:	f7ff fee2 	bl	8006144 <_printf_common>
 8006380:	3001      	adds	r0, #1
 8006382:	d14c      	bne.n	800641e <_printf_i+0x1fe>
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	b004      	add	sp, #16
 800638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800638e:	4835      	ldr	r0, [pc, #212]	; (8006464 <_printf_i+0x244>)
 8006390:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006394:	6829      	ldr	r1, [r5, #0]
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	f851 6b04 	ldr.w	r6, [r1], #4
 800639c:	6029      	str	r1, [r5, #0]
 800639e:	061d      	lsls	r5, r3, #24
 80063a0:	d514      	bpl.n	80063cc <_printf_i+0x1ac>
 80063a2:	07df      	lsls	r7, r3, #31
 80063a4:	bf44      	itt	mi
 80063a6:	f043 0320 	orrmi.w	r3, r3, #32
 80063aa:	6023      	strmi	r3, [r4, #0]
 80063ac:	b91e      	cbnz	r6, 80063b6 <_printf_i+0x196>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	f023 0320 	bic.w	r3, r3, #32
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	2310      	movs	r3, #16
 80063b8:	e7b0      	b.n	800631c <_printf_i+0xfc>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f043 0320 	orr.w	r3, r3, #32
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	2378      	movs	r3, #120	; 0x78
 80063c4:	4828      	ldr	r0, [pc, #160]	; (8006468 <_printf_i+0x248>)
 80063c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063ca:	e7e3      	b.n	8006394 <_printf_i+0x174>
 80063cc:	0659      	lsls	r1, r3, #25
 80063ce:	bf48      	it	mi
 80063d0:	b2b6      	uxthmi	r6, r6
 80063d2:	e7e6      	b.n	80063a2 <_printf_i+0x182>
 80063d4:	4615      	mov	r5, r2
 80063d6:	e7bb      	b.n	8006350 <_printf_i+0x130>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	6826      	ldr	r6, [r4, #0]
 80063dc:	6961      	ldr	r1, [r4, #20]
 80063de:	1d18      	adds	r0, r3, #4
 80063e0:	6028      	str	r0, [r5, #0]
 80063e2:	0635      	lsls	r5, r6, #24
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	d501      	bpl.n	80063ec <_printf_i+0x1cc>
 80063e8:	6019      	str	r1, [r3, #0]
 80063ea:	e002      	b.n	80063f2 <_printf_i+0x1d2>
 80063ec:	0670      	lsls	r0, r6, #25
 80063ee:	d5fb      	bpl.n	80063e8 <_printf_i+0x1c8>
 80063f0:	8019      	strh	r1, [r3, #0]
 80063f2:	2300      	movs	r3, #0
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	4615      	mov	r5, r2
 80063f8:	e7ba      	b.n	8006370 <_printf_i+0x150>
 80063fa:	682b      	ldr	r3, [r5, #0]
 80063fc:	1d1a      	adds	r2, r3, #4
 80063fe:	602a      	str	r2, [r5, #0]
 8006400:	681d      	ldr	r5, [r3, #0]
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	2100      	movs	r1, #0
 8006406:	4628      	mov	r0, r5
 8006408:	f7f9 feea 	bl	80001e0 <memchr>
 800640c:	b108      	cbz	r0, 8006412 <_printf_i+0x1f2>
 800640e:	1b40      	subs	r0, r0, r5
 8006410:	6060      	str	r0, [r4, #4]
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	6123      	str	r3, [r4, #16]
 8006416:	2300      	movs	r3, #0
 8006418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800641c:	e7a8      	b.n	8006370 <_printf_i+0x150>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	462a      	mov	r2, r5
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	47d0      	blx	sl
 8006428:	3001      	adds	r0, #1
 800642a:	d0ab      	beq.n	8006384 <_printf_i+0x164>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	079b      	lsls	r3, r3, #30
 8006430:	d413      	bmi.n	800645a <_printf_i+0x23a>
 8006432:	68e0      	ldr	r0, [r4, #12]
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	4298      	cmp	r0, r3
 8006438:	bfb8      	it	lt
 800643a:	4618      	movlt	r0, r3
 800643c:	e7a4      	b.n	8006388 <_printf_i+0x168>
 800643e:	2301      	movs	r3, #1
 8006440:	4632      	mov	r2, r6
 8006442:	4649      	mov	r1, r9
 8006444:	4640      	mov	r0, r8
 8006446:	47d0      	blx	sl
 8006448:	3001      	adds	r0, #1
 800644a:	d09b      	beq.n	8006384 <_printf_i+0x164>
 800644c:	3501      	adds	r5, #1
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	9903      	ldr	r1, [sp, #12]
 8006452:	1a5b      	subs	r3, r3, r1
 8006454:	42ab      	cmp	r3, r5
 8006456:	dcf2      	bgt.n	800643e <_printf_i+0x21e>
 8006458:	e7eb      	b.n	8006432 <_printf_i+0x212>
 800645a:	2500      	movs	r5, #0
 800645c:	f104 0619 	add.w	r6, r4, #25
 8006460:	e7f5      	b.n	800644e <_printf_i+0x22e>
 8006462:	bf00      	nop
 8006464:	0800680d 	.word	0x0800680d
 8006468:	0800681e 	.word	0x0800681e

0800646c <memmove>:
 800646c:	4288      	cmp	r0, r1
 800646e:	b510      	push	{r4, lr}
 8006470:	eb01 0402 	add.w	r4, r1, r2
 8006474:	d902      	bls.n	800647c <memmove+0x10>
 8006476:	4284      	cmp	r4, r0
 8006478:	4623      	mov	r3, r4
 800647a:	d807      	bhi.n	800648c <memmove+0x20>
 800647c:	1e43      	subs	r3, r0, #1
 800647e:	42a1      	cmp	r1, r4
 8006480:	d008      	beq.n	8006494 <memmove+0x28>
 8006482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800648a:	e7f8      	b.n	800647e <memmove+0x12>
 800648c:	4402      	add	r2, r0
 800648e:	4601      	mov	r1, r0
 8006490:	428a      	cmp	r2, r1
 8006492:	d100      	bne.n	8006496 <memmove+0x2a>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800649a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800649e:	e7f7      	b.n	8006490 <memmove+0x24>

080064a0 <_free_r>:
 80064a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d044      	beq.n	8006530 <_free_r+0x90>
 80064a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064aa:	9001      	str	r0, [sp, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f1a1 0404 	sub.w	r4, r1, #4
 80064b2:	bfb8      	it	lt
 80064b4:	18e4      	addlt	r4, r4, r3
 80064b6:	f000 f913 	bl	80066e0 <__malloc_lock>
 80064ba:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <_free_r+0x94>)
 80064bc:	9801      	ldr	r0, [sp, #4]
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	b933      	cbnz	r3, 80064d0 <_free_r+0x30>
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	6014      	str	r4, [r2, #0]
 80064c6:	b003      	add	sp, #12
 80064c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064cc:	f000 b90e 	b.w	80066ec <__malloc_unlock>
 80064d0:	42a3      	cmp	r3, r4
 80064d2:	d908      	bls.n	80064e6 <_free_r+0x46>
 80064d4:	6825      	ldr	r5, [r4, #0]
 80064d6:	1961      	adds	r1, r4, r5
 80064d8:	428b      	cmp	r3, r1
 80064da:	bf01      	itttt	eq
 80064dc:	6819      	ldreq	r1, [r3, #0]
 80064de:	685b      	ldreq	r3, [r3, #4]
 80064e0:	1949      	addeq	r1, r1, r5
 80064e2:	6021      	streq	r1, [r4, #0]
 80064e4:	e7ed      	b.n	80064c2 <_free_r+0x22>
 80064e6:	461a      	mov	r2, r3
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	b10b      	cbz	r3, 80064f0 <_free_r+0x50>
 80064ec:	42a3      	cmp	r3, r4
 80064ee:	d9fa      	bls.n	80064e6 <_free_r+0x46>
 80064f0:	6811      	ldr	r1, [r2, #0]
 80064f2:	1855      	adds	r5, r2, r1
 80064f4:	42a5      	cmp	r5, r4
 80064f6:	d10b      	bne.n	8006510 <_free_r+0x70>
 80064f8:	6824      	ldr	r4, [r4, #0]
 80064fa:	4421      	add	r1, r4
 80064fc:	1854      	adds	r4, r2, r1
 80064fe:	42a3      	cmp	r3, r4
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	d1e0      	bne.n	80064c6 <_free_r+0x26>
 8006504:	681c      	ldr	r4, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	6053      	str	r3, [r2, #4]
 800650a:	4421      	add	r1, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	e7da      	b.n	80064c6 <_free_r+0x26>
 8006510:	d902      	bls.n	8006518 <_free_r+0x78>
 8006512:	230c      	movs	r3, #12
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	e7d6      	b.n	80064c6 <_free_r+0x26>
 8006518:	6825      	ldr	r5, [r4, #0]
 800651a:	1961      	adds	r1, r4, r5
 800651c:	428b      	cmp	r3, r1
 800651e:	bf04      	itt	eq
 8006520:	6819      	ldreq	r1, [r3, #0]
 8006522:	685b      	ldreq	r3, [r3, #4]
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	bf04      	itt	eq
 8006528:	1949      	addeq	r1, r1, r5
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	6054      	str	r4, [r2, #4]
 800652e:	e7ca      	b.n	80064c6 <_free_r+0x26>
 8006530:	b003      	add	sp, #12
 8006532:	bd30      	pop	{r4, r5, pc}
 8006534:	20004ac8 	.word	0x20004ac8

08006538 <sbrk_aligned>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4e0e      	ldr	r6, [pc, #56]	; (8006574 <sbrk_aligned+0x3c>)
 800653c:	460c      	mov	r4, r1
 800653e:	6831      	ldr	r1, [r6, #0]
 8006540:	4605      	mov	r5, r0
 8006542:	b911      	cbnz	r1, 800654a <sbrk_aligned+0x12>
 8006544:	f000 f8bc 	bl	80066c0 <_sbrk_r>
 8006548:	6030      	str	r0, [r6, #0]
 800654a:	4621      	mov	r1, r4
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f8b7 	bl	80066c0 <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d00a      	beq.n	800656c <sbrk_aligned+0x34>
 8006556:	1cc4      	adds	r4, r0, #3
 8006558:	f024 0403 	bic.w	r4, r4, #3
 800655c:	42a0      	cmp	r0, r4
 800655e:	d007      	beq.n	8006570 <sbrk_aligned+0x38>
 8006560:	1a21      	subs	r1, r4, r0
 8006562:	4628      	mov	r0, r5
 8006564:	f000 f8ac 	bl	80066c0 <_sbrk_r>
 8006568:	3001      	adds	r0, #1
 800656a:	d101      	bne.n	8006570 <sbrk_aligned+0x38>
 800656c:	f04f 34ff 	mov.w	r4, #4294967295
 8006570:	4620      	mov	r0, r4
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	20004acc 	.word	0x20004acc

08006578 <_malloc_r>:
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	1ccd      	adds	r5, r1, #3
 800657e:	f025 0503 	bic.w	r5, r5, #3
 8006582:	3508      	adds	r5, #8
 8006584:	2d0c      	cmp	r5, #12
 8006586:	bf38      	it	cc
 8006588:	250c      	movcc	r5, #12
 800658a:	2d00      	cmp	r5, #0
 800658c:	4607      	mov	r7, r0
 800658e:	db01      	blt.n	8006594 <_malloc_r+0x1c>
 8006590:	42a9      	cmp	r1, r5
 8006592:	d905      	bls.n	80065a0 <_malloc_r+0x28>
 8006594:	230c      	movs	r3, #12
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	2600      	movs	r6, #0
 800659a:	4630      	mov	r0, r6
 800659c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a0:	4e2e      	ldr	r6, [pc, #184]	; (800665c <_malloc_r+0xe4>)
 80065a2:	f000 f89d 	bl	80066e0 <__malloc_lock>
 80065a6:	6833      	ldr	r3, [r6, #0]
 80065a8:	461c      	mov	r4, r3
 80065aa:	bb34      	cbnz	r4, 80065fa <_malloc_r+0x82>
 80065ac:	4629      	mov	r1, r5
 80065ae:	4638      	mov	r0, r7
 80065b0:	f7ff ffc2 	bl	8006538 <sbrk_aligned>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	4604      	mov	r4, r0
 80065b8:	d14d      	bne.n	8006656 <_malloc_r+0xde>
 80065ba:	6834      	ldr	r4, [r6, #0]
 80065bc:	4626      	mov	r6, r4
 80065be:	2e00      	cmp	r6, #0
 80065c0:	d140      	bne.n	8006644 <_malloc_r+0xcc>
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	4631      	mov	r1, r6
 80065c6:	4638      	mov	r0, r7
 80065c8:	eb04 0803 	add.w	r8, r4, r3
 80065cc:	f000 f878 	bl	80066c0 <_sbrk_r>
 80065d0:	4580      	cmp	r8, r0
 80065d2:	d13a      	bne.n	800664a <_malloc_r+0xd2>
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	3503      	adds	r5, #3
 80065d8:	1a6d      	subs	r5, r5, r1
 80065da:	f025 0503 	bic.w	r5, r5, #3
 80065de:	3508      	adds	r5, #8
 80065e0:	2d0c      	cmp	r5, #12
 80065e2:	bf38      	it	cc
 80065e4:	250c      	movcc	r5, #12
 80065e6:	4629      	mov	r1, r5
 80065e8:	4638      	mov	r0, r7
 80065ea:	f7ff ffa5 	bl	8006538 <sbrk_aligned>
 80065ee:	3001      	adds	r0, #1
 80065f0:	d02b      	beq.n	800664a <_malloc_r+0xd2>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	442b      	add	r3, r5
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	e00e      	b.n	8006618 <_malloc_r+0xa0>
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	1b52      	subs	r2, r2, r5
 80065fe:	d41e      	bmi.n	800663e <_malloc_r+0xc6>
 8006600:	2a0b      	cmp	r2, #11
 8006602:	d916      	bls.n	8006632 <_malloc_r+0xba>
 8006604:	1961      	adds	r1, r4, r5
 8006606:	42a3      	cmp	r3, r4
 8006608:	6025      	str	r5, [r4, #0]
 800660a:	bf18      	it	ne
 800660c:	6059      	strne	r1, [r3, #4]
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	bf08      	it	eq
 8006612:	6031      	streq	r1, [r6, #0]
 8006614:	5162      	str	r2, [r4, r5]
 8006616:	604b      	str	r3, [r1, #4]
 8006618:	4638      	mov	r0, r7
 800661a:	f104 060b 	add.w	r6, r4, #11
 800661e:	f000 f865 	bl	80066ec <__malloc_unlock>
 8006622:	f026 0607 	bic.w	r6, r6, #7
 8006626:	1d23      	adds	r3, r4, #4
 8006628:	1af2      	subs	r2, r6, r3
 800662a:	d0b6      	beq.n	800659a <_malloc_r+0x22>
 800662c:	1b9b      	subs	r3, r3, r6
 800662e:	50a3      	str	r3, [r4, r2]
 8006630:	e7b3      	b.n	800659a <_malloc_r+0x22>
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	42a3      	cmp	r3, r4
 8006636:	bf0c      	ite	eq
 8006638:	6032      	streq	r2, [r6, #0]
 800663a:	605a      	strne	r2, [r3, #4]
 800663c:	e7ec      	b.n	8006618 <_malloc_r+0xa0>
 800663e:	4623      	mov	r3, r4
 8006640:	6864      	ldr	r4, [r4, #4]
 8006642:	e7b2      	b.n	80065aa <_malloc_r+0x32>
 8006644:	4634      	mov	r4, r6
 8006646:	6876      	ldr	r6, [r6, #4]
 8006648:	e7b9      	b.n	80065be <_malloc_r+0x46>
 800664a:	230c      	movs	r3, #12
 800664c:	603b      	str	r3, [r7, #0]
 800664e:	4638      	mov	r0, r7
 8006650:	f000 f84c 	bl	80066ec <__malloc_unlock>
 8006654:	e7a1      	b.n	800659a <_malloc_r+0x22>
 8006656:	6025      	str	r5, [r4, #0]
 8006658:	e7de      	b.n	8006618 <_malloc_r+0xa0>
 800665a:	bf00      	nop
 800665c:	20004ac8 	.word	0x20004ac8

08006660 <_realloc_r>:
 8006660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006664:	4680      	mov	r8, r0
 8006666:	4614      	mov	r4, r2
 8006668:	460e      	mov	r6, r1
 800666a:	b921      	cbnz	r1, 8006676 <_realloc_r+0x16>
 800666c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006670:	4611      	mov	r1, r2
 8006672:	f7ff bf81 	b.w	8006578 <_malloc_r>
 8006676:	b92a      	cbnz	r2, 8006684 <_realloc_r+0x24>
 8006678:	f7ff ff12 	bl	80064a0 <_free_r>
 800667c:	4625      	mov	r5, r4
 800667e:	4628      	mov	r0, r5
 8006680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006684:	f000 f838 	bl	80066f8 <_malloc_usable_size_r>
 8006688:	4284      	cmp	r4, r0
 800668a:	4607      	mov	r7, r0
 800668c:	d802      	bhi.n	8006694 <_realloc_r+0x34>
 800668e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006692:	d812      	bhi.n	80066ba <_realloc_r+0x5a>
 8006694:	4621      	mov	r1, r4
 8006696:	4640      	mov	r0, r8
 8006698:	f7ff ff6e 	bl	8006578 <_malloc_r>
 800669c:	4605      	mov	r5, r0
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0ed      	beq.n	800667e <_realloc_r+0x1e>
 80066a2:	42bc      	cmp	r4, r7
 80066a4:	4622      	mov	r2, r4
 80066a6:	4631      	mov	r1, r6
 80066a8:	bf28      	it	cs
 80066aa:	463a      	movcs	r2, r7
 80066ac:	f7ff fbb8 	bl	8005e20 <memcpy>
 80066b0:	4631      	mov	r1, r6
 80066b2:	4640      	mov	r0, r8
 80066b4:	f7ff fef4 	bl	80064a0 <_free_r>
 80066b8:	e7e1      	b.n	800667e <_realloc_r+0x1e>
 80066ba:	4635      	mov	r5, r6
 80066bc:	e7df      	b.n	800667e <_realloc_r+0x1e>
	...

080066c0 <_sbrk_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4d06      	ldr	r5, [pc, #24]	; (80066dc <_sbrk_r+0x1c>)
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	4608      	mov	r0, r1
 80066ca:	602b      	str	r3, [r5, #0]
 80066cc:	f7fa fb52 	bl	8000d74 <_sbrk>
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d102      	bne.n	80066da <_sbrk_r+0x1a>
 80066d4:	682b      	ldr	r3, [r5, #0]
 80066d6:	b103      	cbz	r3, 80066da <_sbrk_r+0x1a>
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	bd38      	pop	{r3, r4, r5, pc}
 80066dc:	20004ad0 	.word	0x20004ad0

080066e0 <__malloc_lock>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__malloc_lock+0x8>)
 80066e2:	f000 b811 	b.w	8006708 <__retarget_lock_acquire_recursive>
 80066e6:	bf00      	nop
 80066e8:	20004ad4 	.word	0x20004ad4

080066ec <__malloc_unlock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_unlock+0x8>)
 80066ee:	f000 b80c 	b.w	800670a <__retarget_lock_release_recursive>
 80066f2:	bf00      	nop
 80066f4:	20004ad4 	.word	0x20004ad4

080066f8 <_malloc_usable_size_r>:
 80066f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fc:	1f18      	subs	r0, r3, #4
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfbc      	itt	lt
 8006702:	580b      	ldrlt	r3, [r1, r0]
 8006704:	18c0      	addlt	r0, r0, r3
 8006706:	4770      	bx	lr

08006708 <__retarget_lock_acquire_recursive>:
 8006708:	4770      	bx	lr

0800670a <__retarget_lock_release_recursive>:
 800670a:	4770      	bx	lr

0800670c <_init>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr

08006718 <_fini>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr
